// Generated from ./src/app/modules/state-machines/generate-diagram-from-code/verilog/grammar/VerilogParser.g4 by ANTLR 4.9.0-SNAPSHOT


import {ATN} from "antlr4ts/atn/ATN";
import {ATNDeserializer} from "antlr4ts/atn/ATNDeserializer";
import {FailedPredicateException} from "antlr4ts/FailedPredicateException";
import {NotNull} from "antlr4ts/Decorators";
import {NoViableAltException} from "antlr4ts/NoViableAltException";
import {Override} from "antlr4ts/Decorators";
import {Parser} from "antlr4ts/Parser";
import {ParserRuleContext} from "antlr4ts/ParserRuleContext";
import {ParserATNSimulator} from "antlr4ts/atn/ParserATNSimulator";
import {ParseTreeListener} from "antlr4ts/tree/ParseTreeListener";
import {ParseTreeVisitor} from "antlr4ts/tree/ParseTreeVisitor";
import {RecognitionException} from "antlr4ts/RecognitionException";
import {RuleContext} from "antlr4ts/RuleContext";
//import { RuleVersion } from "antlr4ts/RuleVersion";
import {TerminalNode} from "antlr4ts/tree/TerminalNode";
import {Token} from "antlr4ts/Token";
import {TokenStream} from "antlr4ts/TokenStream";
import {Vocabulary} from "antlr4ts/Vocabulary";
import {VocabularyImpl} from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";

import {VerilogParserListener} from "./VerilogParserListener";
import {VerilogParserVisitor} from "./VerilogParserVisitor";


export class VerilogParser extends Parser {
  public static readonly ALWAYS = 1;
  public static readonly AND = 2;
  public static readonly ASSIGN = 3;
  public static readonly AUTOMATIC = 4;
  public static readonly BEGIN = 5;
  public static readonly BUF = 6;
  public static readonly BUFIFONE = 7;
  public static readonly BUFIFZERO = 8;
  public static readonly CASE = 9;
  public static readonly CASEX = 10;
  public static readonly CASEZ = 11;
  public static readonly CELL = 12;
  public static readonly CMOS = 13;
  public static readonly CONFIG = 14;
  public static readonly DEASSIGN = 15;
  public static readonly DEFAULT = 16;
  public static readonly DEFPARAM = 17;
  public static readonly DESIGN = 18;
  public static readonly DISABLE = 19;
  public static readonly DLFULLSKEW = 20;
  public static readonly DLHOLD = 21;
  public static readonly DLNOCHANGE = 22;
  public static readonly DLPERIOD = 23;
  public static readonly DLRECOVERY = 24;
  public static readonly DLRECREM = 25;
  public static readonly DLREMOVAL = 26;
  public static readonly DLSETUP = 27;
  public static readonly DLSETUPHOLD = 28;
  public static readonly DLSKEW = 29;
  public static readonly DLTIMESKEW = 30;
  public static readonly DLWIDTH = 31;
  public static readonly EDGE = 32;
  public static readonly ELSE = 33;
  public static readonly END = 34;
  public static readonly ENDCASE = 35;
  public static readonly ENDCONFIG = 36;
  public static readonly ENDFUNCTION = 37;
  public static readonly ENDGENERATE = 38;
  public static readonly ENDMODULE = 39;
  public static readonly ENDPRIMITIVE = 40;
  public static readonly ENDSPECIFY = 41;
  public static readonly ENDTABLE = 42;
  public static readonly ENDTASK = 43;
  public static readonly EVENT = 44;
  public static readonly FOR = 45;
  public static readonly FORCE = 46;
  public static readonly FOREVER = 47;
  public static readonly FORK = 48;
  public static readonly FUNCTION = 49;
  public static readonly GENERATE = 50;
  public static readonly GENVAR = 51;
  public static readonly HIGHZONE = 52;
  public static readonly HIGHZZERO = 53;
  public static readonly IF = 54;
  public static readonly IFNONE = 55;
  public static readonly INCLUDE = 56;
  public static readonly INITIAL = 57;
  public static readonly INOUT = 58;
  public static readonly INPUT = 59;
  public static readonly INSTANCE = 60;
  public static readonly INTEGER = 61;
  public static readonly JOIN = 62;
  public static readonly LARGE = 63;
  public static readonly LIBLIST = 64;
  public static readonly LIBRARY = 65;
  public static readonly LOCALPARAM = 66;
  public static readonly MACROMODULE = 67;
  public static readonly MEDIUM = 68;
  public static readonly MIINCDIR = 69;
  public static readonly MODULE = 70;
  public static readonly NAND = 71;
  public static readonly NEGEDGE = 72;
  public static readonly NMOS = 73;
  public static readonly NOR = 74;
  public static readonly NOSHOWCANCELLED = 75;
  public static readonly NOT = 76;
  public static readonly NOTIFONE = 77;
  public static readonly NOTIFZERO = 78;
  public static readonly OR = 79;
  public static readonly OUTPUT = 80;
  public static readonly PARAMETER = 81;
  public static readonly PATHPULSEDL = 82;
  public static readonly PMOS = 83;
  public static readonly POSEDGE = 84;
  public static readonly PRIMITIVE = 85;
  public static readonly PULLDOWN = 86;
  public static readonly PULLONE = 87;
  public static readonly PULLUP = 88;
  public static readonly PULLZERO = 89;
  public static readonly PULSESTYLE_ONDETECT = 90;
  public static readonly PULSESTYLE_ONEVENT = 91;
  public static readonly RCMOS = 92;
  public static readonly REAL = 93;
  public static readonly REALTIME = 94;
  public static readonly REG = 95;
  public static readonly RELEASE = 96;
  public static readonly REPEAT = 97;
  public static readonly RNMOS = 98;
  public static readonly RPMOS = 99;
  public static readonly RTRAN = 100;
  public static readonly RTRANIFONE = 101;
  public static readonly RTRANIFZERO = 102;
  public static readonly SCALARED = 103;
  public static readonly SHOWCANCELLED = 104;
  public static readonly SIGNED = 105;
  public static readonly SMALL = 106;
  public static readonly SPECIFY = 107;
  public static readonly SPECPARAM = 108;
  public static readonly STRONGONE = 109;
  public static readonly STRONGZERO = 110;
  public static readonly SUPPLYONE = 111;
  public static readonly SUPPLYZERO = 112;
  public static readonly TABLE = 113;
  public static readonly TASK = 114;
  public static readonly TIME = 115;
  public static readonly TRAN = 116;
  public static readonly TRANIFONE = 117;
  public static readonly TRANIFZERO = 118;
  public static readonly TRI = 119;
  public static readonly TRIAND = 120;
  public static readonly TRIONE = 121;
  public static readonly TRIOR = 122;
  public static readonly TRIREG = 123;
  public static readonly TRIZERO = 124;
  public static readonly USE = 125;
  public static readonly UWIRE = 126;
  public static readonly VECTORED = 127;
  public static readonly WAIT = 128;
  public static readonly WAND = 129;
  public static readonly WEAKONE = 130;
  public static readonly WEAKZERO = 131;
  public static readonly WHILE = 132;
  public static readonly WIRE = 133;
  public static readonly WOR = 134;
  public static readonly XNOR = 135;
  public static readonly XOR = 136;
  public static readonly AM = 137;
  public static readonly AMAM = 138;
  public static readonly AMAMAM = 139;
  public static readonly AS = 140;
  public static readonly ASAS = 141;
  public static readonly ASGT = 142;
  public static readonly AT = 143;
  public static readonly CA = 144;
  public static readonly CATI = 145;
  public static readonly CL = 146;
  public static readonly CO = 147;
  public static readonly DL = 148;
  public static readonly DQ = 149;
  public static readonly DT = 150;
  public static readonly EM = 151;
  public static readonly EMEQ = 152;
  public static readonly EMEQEQ = 153;
  public static readonly EQ = 154;
  public static readonly EQEQ = 155;
  public static readonly EQEQEQ = 156;
  public static readonly EQGT = 157;
  public static readonly GA = 158;
  public static readonly GT = 159;
  public static readonly GTEQ = 160;
  public static readonly GTGT = 161;
  public static readonly GTGTGT = 162;
  public static readonly HA = 163;
  public static readonly LB = 164;
  public static readonly LC = 165;
  public static readonly LP = 166;
  public static readonly LT = 167;
  public static readonly LTEQ = 168;
  public static readonly LTLT = 169;
  public static readonly LTLTLT = 170;
  public static readonly MI = 171;
  public static readonly MICL = 172;
  public static readonly MIGT = 173;
  public static readonly MO = 174;
  public static readonly PL = 175;
  public static readonly PLCL = 176;
  public static readonly QM = 177;
  public static readonly RB = 178;
  public static readonly RC = 179;
  public static readonly RP = 180;
  public static readonly SC = 181;
  public static readonly SL = 182;
  public static readonly TI = 183;
  public static readonly TIAM = 184;
  public static readonly TICA = 185;
  public static readonly TIVL = 186;
  public static readonly VL = 187;
  public static readonly VLVL = 188;
  public static readonly BINARY_BASE = 189;
  public static readonly BLOCK_COMMENT = 190;
  public static readonly DECIMAL_BASE = 191;
  public static readonly ESCAPED_IDENTIFIER = 192;
  public static readonly EXPONENTIAL_NUMBER = 193;
  public static readonly FIXED_POINT_NUMBER = 194;
  public static readonly HEX_BASE = 195;
  public static readonly LINE_COMMENT = 196;
  public static readonly OCTAL_BASE = 197;
  public static readonly SIMPLE_IDENTIFIER = 198;
  public static readonly STRING = 199;
  public static readonly SYSTEM_TF_IDENTIFIER = 200;
  public static readonly UNSIGNED_NUMBER = 201;
  public static readonly WHITE_SPACE = 202;
  public static readonly BINARY_VALUE = 203;
  public static readonly X_OR_Z_UNDERSCORE = 204;
  public static readonly EDGE_DESCRIPTOR = 205;
  public static readonly HEX_VALUE = 206;
  public static readonly FILE_PATH_SPEC = 207;
  public static readonly OCTAL_VALUE = 208;
  public static readonly EDGE_SYMBOL = 209;
  public static readonly LEVEL_ONLY_SYMBOL = 210;
  public static readonly OUTPUT_OR_LEVEL_SYMBOL = 211;
  public static readonly BEGIN_KEYWORDS_DIRECTIVE = 212;
  public static readonly CELLDEFINE_DIRECTIVE = 213;
  public static readonly DEFAULT_NETTYPE_DIRECTIVE = 214;
  public static readonly DEFINE_DIRECTIVE = 215;
  public static readonly ELSE_DIRECTIVE = 216;
  public static readonly ELSIF_DIRECTIVE = 217;
  public static readonly END_KEYWORDS_DIRECTIVE = 218;
  public static readonly ENDCELLDEFINE_DIRECTIVE = 219;
  public static readonly ENDIF_DIRECTIVE = 220;
  public static readonly IFDEF_DIRECTIVE = 221;
  public static readonly IFNDEF_DIRECTIVE = 222;
  public static readonly INCLUDE_DIRECTIVE = 223;
  public static readonly LINE_DIRECTIVE = 224;
  public static readonly NOUNCONNECTED_DRIVE_DIRECTIVE = 225;
  public static readonly PRAGMA_DIRECTIVE = 226;
  public static readonly RESETALL_DIRECTIVE = 227;
  public static readonly TIMESCALE_DIRECTIVE = 228;
  public static readonly UNCONNECTED_DRIVE_DIRECTIVE = 229;
  public static readonly UNDEF_DIRECTIVE = 230;
  public static readonly MACRO_USAGE = 231;
  public static readonly VERSION_SPECIFIER = 232;
  public static readonly DEFAULT_NETTYPE_VALUE = 233;
  public static readonly MACRO_NAME = 234;
  public static readonly FILENAME = 235;
  public static readonly MACRO_DELIMITER = 236;
  public static readonly MACRO_ESC_NEWLINE = 237;
  public static readonly MACRO_ESC_QUOTE = 238;
  public static readonly MACRO_QUOTE = 239;
  public static readonly MACRO_TEXT = 240;
  public static readonly SOURCE_TEXT = 241;
  public static readonly TIME_UNIT = 242;
  public static readonly TIME_VALUE = 243;
  public static readonly UNCONNECTED_DRIVE_VALUE = 244;
  public static readonly MACRO_IDENTIFIER = 245;
  public static readonly RULE_library_text = 0;
  public static readonly RULE_library_description = 1;
  public static readonly RULE_library_declaration = 2;
  public static readonly RULE_library_incdir = 3;
  public static readonly RULE_include_statement = 4;
  public static readonly RULE_file_path_spec = 5;
  public static readonly RULE_source_text = 6;
  public static readonly RULE_description = 7;
  public static readonly RULE_module_declaration = 8;
  public static readonly RULE_module_keyword = 9;
  public static readonly RULE_module_parameter_port_list = 10;
  public static readonly RULE_list_of_port_declarations = 11;
  public static readonly RULE_port = 12;
  public static readonly RULE_port_implicit = 13;
  public static readonly RULE_port_explicit = 14;
  public static readonly RULE_port_expression = 15;
  public static readonly RULE_port_reference = 16;
  public static readonly RULE_port_declaration = 17;
  public static readonly RULE_module_item = 18;
  public static readonly RULE_module_or_generate_item = 19;
  public static readonly RULE_module_or_generate_item_declaration = 20;
  public static readonly RULE_parameter_override = 21;
  public static readonly RULE_config_declaration = 22;
  public static readonly RULE_design_statement = 23;
  public static readonly RULE_design_statement_item = 24;
  public static readonly RULE_config_rule_statement = 25;
  public static readonly RULE_default_clause = 26;
  public static readonly RULE_inst_clause = 27;
  public static readonly RULE_inst_name = 28;
  public static readonly RULE_cell_clause = 29;
  public static readonly RULE_liblist_clause = 30;
  public static readonly RULE_use_clause = 31;
  public static readonly RULE_local_parameter_declaration = 32;
  public static readonly RULE_parameter_declaration = 33;
  public static readonly RULE_specparam_declaration = 34;
  public static readonly RULE_parameter_type = 35;
  public static readonly RULE_inout_declaration = 36;
  public static readonly RULE_input_declaration = 37;
  public static readonly RULE_output_declaration = 38;
  public static readonly RULE_event_declaration = 39;
  public static readonly RULE_integer_declaration = 40;
  public static readonly RULE_net_declaration = 41;
  public static readonly RULE_real_declaration = 42;
  public static readonly RULE_realtime_declaration = 43;
  public static readonly RULE_reg_declaration = 44;
  public static readonly RULE_time_declaration = 45;
  public static readonly RULE_net_type = 46;
  public static readonly RULE_output_variable_type = 47;
  public static readonly RULE_real_type = 48;
  public static readonly RULE_variable_type = 49;
  public static readonly RULE_drive_strength = 50;
  public static readonly RULE_strength0 = 51;
  public static readonly RULE_strength1 = 52;
  public static readonly RULE_charge_strength = 53;
  public static readonly RULE_delay3 = 54;
  public static readonly RULE_delay2 = 55;
  public static readonly RULE_delay_value = 56;
  public static readonly RULE_list_of_defparam_assignments = 57;
  public static readonly RULE_list_of_event_identifiers = 58;
  public static readonly RULE_event_id = 59;
  public static readonly RULE_list_of_net_decl_assignments = 60;
  public static readonly RULE_list_of_net_identifiers = 61;
  public static readonly RULE_net_id = 62;
  public static readonly RULE_list_of_param_assignments = 63;
  public static readonly RULE_list_of_port_identifiers = 64;
  public static readonly RULE_list_of_real_identifiers = 65;
  public static readonly RULE_list_of_specparam_assignments = 66;
  public static readonly RULE_list_of_variable_identifiers = 67;
  public static readonly RULE_list_of_variable_port_identifiers = 68;
  public static readonly RULE_var_port_id = 69;
  public static readonly RULE_defparam_assignment = 70;
  public static readonly RULE_net_decl_assignment = 71;
  public static readonly RULE_param_assignment = 72;
  public static readonly RULE_specparam_assignment = 73;
  public static readonly RULE_pulse_control_specparam = 74;
  public static readonly RULE_error_limit_value = 75;
  public static readonly RULE_reject_limit_value = 76;
  public static readonly RULE_limit_value = 77;
  public static readonly RULE_dimension = 78;
  public static readonly RULE_range_ = 79;
  public static readonly RULE_function_declaration = 80;
  public static readonly RULE_function_item_declaration = 81;
  public static readonly RULE_function_port_list = 82;
  public static readonly RULE_func_port_item = 83;
  public static readonly RULE_function_range_or_type = 84;
  public static readonly RULE_task_declaration = 85;
  public static readonly RULE_task_item_declaration = 86;
  public static readonly RULE_task_port_list = 87;
  public static readonly RULE_task_port_item = 88;
  public static readonly RULE_tf_input_declaration = 89;
  public static readonly RULE_tf_output_declaration = 90;
  public static readonly RULE_tf_inout_declaration = 91;
  public static readonly RULE_task_port_type = 92;
  public static readonly RULE_block_item_declaration = 93;
  public static readonly RULE_list_of_block_variable_identifiers = 94;
  public static readonly RULE_list_of_block_real_identifiers = 95;
  public static readonly RULE_block_variable_type = 96;
  public static readonly RULE_block_real_type = 97;
  public static readonly RULE_gate_instantiation = 98;
  public static readonly RULE_cmos_switch_instance = 99;
  public static readonly RULE_enable_gate_instance = 100;
  public static readonly RULE_mos_switch_instance = 101;
  public static readonly RULE_n_input_gate_instance = 102;
  public static readonly RULE_n_output_gate_instance = 103;
  public static readonly RULE_pass_switch_instance = 104;
  public static readonly RULE_pass_enable_switch_instance = 105;
  public static readonly RULE_pull_gate_instance = 106;
  public static readonly RULE_name_of_gate_instance = 107;
  public static readonly RULE_pulldown_strength = 108;
  public static readonly RULE_pullup_strength = 109;
  public static readonly RULE_enable_terminal = 110;
  public static readonly RULE_inout_terminal = 111;
  public static readonly RULE_input_terminal = 112;
  public static readonly RULE_ncontrol_terminal = 113;
  public static readonly RULE_output_terminal = 114;
  public static readonly RULE_pcontrol_terminal = 115;
  public static readonly RULE_cmos_switchtype = 116;
  public static readonly RULE_enable_gatetype = 117;
  public static readonly RULE_mos_switchtype = 118;
  public static readonly RULE_n_input_gatetype = 119;
  public static readonly RULE_n_output_gatetype = 120;
  public static readonly RULE_pass_en_switchtype = 121;
  public static readonly RULE_pass_switchtype = 122;
  public static readonly RULE_module_instantiation = 123;
  public static readonly RULE_parameter_value_assignment = 124;
  public static readonly RULE_list_of_parameter_assignments = 125;
  public static readonly RULE_ordered_parameter_assignment = 126;
  public static readonly RULE_named_parameter_assignment = 127;
  public static readonly RULE_module_instance = 128;
  public static readonly RULE_name_of_module_instance = 129;
  public static readonly RULE_list_of_port_connections = 130;
  public static readonly RULE_ordered_port_connection = 131;
  public static readonly RULE_named_port_connection = 132;
  public static readonly RULE_generate_region = 133;
  public static readonly RULE_genvar_declaration = 134;
  public static readonly RULE_list_of_genvar_identifiers = 135;
  public static readonly RULE_loop_generate_construct = 136;
  public static readonly RULE_genvar_initialization = 137;
  public static readonly RULE_genvar_expression = 138;
  public static readonly RULE_genvar_iteration = 139;
  public static readonly RULE_conditional_generate_construct = 140;
  public static readonly RULE_if_generate_construct = 141;
  public static readonly RULE_case_generate_construct = 142;
  public static readonly RULE_case_generate_item = 143;
  public static readonly RULE_generate_block = 144;
  public static readonly RULE_generate_block_name = 145;
  public static readonly RULE_generate_block_or_null = 146;
  public static readonly RULE_udp_declaration = 147;
  public static readonly RULE_udp_port_list = 148;
  public static readonly RULE_udp_declaration_port_list = 149;
  public static readonly RULE_udp_port_declaration = 150;
  public static readonly RULE_udp_output_declaration = 151;
  public static readonly RULE_udp_input_declaration = 152;
  public static readonly RULE_udp_reg_declaration = 153;
  public static readonly RULE_udp_body = 154;
  public static readonly RULE_combinational_body = 155;
  public static readonly RULE_combinational_entry = 156;
  public static readonly RULE_sequential_body = 157;
  public static readonly RULE_udp_initial_statement = 158;
  public static readonly RULE_init_val = 159;
  public static readonly RULE_sequential_entry = 160;
  public static readonly RULE_seq_input_list = 161;
  public static readonly RULE_level_input_list = 162;
  public static readonly RULE_edge_input_list = 163;
  public static readonly RULE_edge_indicator = 164;
  public static readonly RULE_current_state = 165;
  public static readonly RULE_next_state = 166;
  public static readonly RULE_output_symbol = 167;
  public static readonly RULE_level_symbol = 168;
  public static readonly RULE_edge_symbol = 169;
  public static readonly RULE_udp_instantiation = 170;
  public static readonly RULE_udp_instance = 171;
  public static readonly RULE_name_of_udp_instance = 172;
  public static readonly RULE_continuous_assign = 173;
  public static readonly RULE_list_of_net_assignments = 174;
  public static readonly RULE_net_assignment = 175;
  public static readonly RULE_initial_construct = 176;
  public static readonly RULE_always_construct = 177;
  public static readonly RULE_blocking_assignment = 178;
  public static readonly RULE_nonblocking_assignment = 179;
  public static readonly RULE_procedural_continuous_assignments = 180;
  public static readonly RULE_variable_assignment = 181;
  public static readonly RULE_par_block = 182;
  public static readonly RULE_block_name = 183;
  public static readonly RULE_seq_block = 184;
  public static readonly RULE_statement = 185;
  public static readonly RULE_statement_or_null = 186;
  public static readonly RULE_function_statement = 187;
  public static readonly RULE_delay_control = 188;
  public static readonly RULE_delay_or_event_control = 189;
  public static readonly RULE_disable_statement = 190;
  public static readonly RULE_event_control = 191;
  public static readonly RULE_event_trigger = 192;
  public static readonly RULE_event_expression = 193;
  public static readonly RULE_procedural_timing_control = 194;
  public static readonly RULE_procedural_timing_control_statement = 195;
  public static readonly RULE_wait_statement = 196;
  public static readonly RULE_conditional_statement = 197;
  public static readonly RULE_case_statement = 198;
  public static readonly RULE_case_item = 199;
  public static readonly RULE_loop_statement = 200;
  public static readonly RULE_system_task_enable = 201;
  public static readonly RULE_sys_task_en_port_list = 202;
  public static readonly RULE_sys_task_en_port_item = 203;
  public static readonly RULE_task_enable = 204;
  public static readonly RULE_task_en_port_list = 205;
  public static readonly RULE_specify_block = 206;
  public static readonly RULE_specify_item = 207;
  public static readonly RULE_pulsestyle_declaration = 208;
  public static readonly RULE_showcancelled_declaration = 209;
  public static readonly RULE_path_declaration = 210;
  public static readonly RULE_simple_path_declaration = 211;
  public static readonly RULE_parallel_path_description = 212;
  public static readonly RULE_full_path_description = 213;
  public static readonly RULE_list_of_path_inputs = 214;
  public static readonly RULE_list_of_path_outputs = 215;
  public static readonly RULE_specify_input_terminal_descriptor = 216;
  public static readonly RULE_specify_output_terminal_descriptor = 217;
  public static readonly RULE_input_identifier = 218;
  public static readonly RULE_output_identifier = 219;
  public static readonly RULE_path_delay_value = 220;
  public static readonly RULE_list_of_path_delay_expressions = 221;
  public static readonly RULE_t_path_delay_expression = 222;
  public static readonly RULE_trise_path_delay_expression = 223;
  public static readonly RULE_tfall_path_delay_expression = 224;
  public static readonly RULE_tz_path_delay_expression = 225;
  public static readonly RULE_t01_path_delay_expression = 226;
  public static readonly RULE_t10_path_delay_expression = 227;
  public static readonly RULE_t0z_path_delay_expression = 228;
  public static readonly RULE_tz1_path_delay_expression = 229;
  public static readonly RULE_t1z_path_delay_expression = 230;
  public static readonly RULE_tz0_path_delay_expression = 231;
  public static readonly RULE_t0x_path_delay_expression = 232;
  public static readonly RULE_tx1_path_delay_expression = 233;
  public static readonly RULE_t1x_path_delay_expression = 234;
  public static readonly RULE_tx0_path_delay_expression = 235;
  public static readonly RULE_txz_path_delay_expression = 236;
  public static readonly RULE_tzx_path_delay_expression = 237;
  public static readonly RULE_path_delay_expression = 238;
  public static readonly RULE_edge_sensitive_path_declaration = 239;
  public static readonly RULE_parallel_edge_sensitive_path_description = 240;
  public static readonly RULE_full_edge_sensitive_path_description = 241;
  public static readonly RULE_data_source_expression = 242;
  public static readonly RULE_edge_identifier = 243;
  public static readonly RULE_state_dependent_path_declaration = 244;
  public static readonly RULE_polarity_operator = 245;
  public static readonly RULE_system_timing_check = 246;
  public static readonly RULE_setup_timing_check = 247;
  public static readonly RULE_notifier_opt = 248;
  public static readonly RULE_hold_timing_check = 249;
  public static readonly RULE_setuphold_timing_check = 250;
  public static readonly RULE_timing_check_opt = 251;
  public static readonly RULE_stamptime_cond_opt = 252;
  public static readonly RULE_checktime_cond_opt = 253;
  public static readonly RULE_delayed_ref_opt = 254;
  public static readonly RULE_delayed_data_opt = 255;
  public static readonly RULE_recovery_timing_check = 256;
  public static readonly RULE_removal_timing_check = 257;
  public static readonly RULE_recrem_timing_check = 258;
  public static readonly RULE_skew_timing_check = 259;
  public static readonly RULE_timeskew_timing_check = 260;
  public static readonly RULE_skew_timing_check_opt = 261;
  public static readonly RULE_event_based_flag_opt = 262;
  public static readonly RULE_remain_active_flag_opt = 263;
  public static readonly RULE_fullskew_timing_check = 264;
  public static readonly RULE_period_timing_check = 265;
  public static readonly RULE_width_timing_check = 266;
  public static readonly RULE_threshold_opt = 267;
  public static readonly RULE_nochange_timing_check = 268;
  public static readonly RULE_checktime_condition = 269;
  public static readonly RULE_controlled_reference_event = 270;
  public static readonly RULE_data_event = 271;
  public static readonly RULE_delayed_data = 272;
  public static readonly RULE_delayed_reference = 273;
  public static readonly RULE_end_edge_offset = 274;
  public static readonly RULE_event_based_flag = 275;
  public static readonly RULE_notifier = 276;
  public static readonly RULE_reference_event = 277;
  public static readonly RULE_remain_active_flag = 278;
  public static readonly RULE_stamptime_condition = 279;
  public static readonly RULE_start_edge_offset = 280;
  public static readonly RULE_threshold = 281;
  public static readonly RULE_timing_check_limit = 282;
  public static readonly RULE_timing_check_event = 283;
  public static readonly RULE_controlled_timing_check_event = 284;
  public static readonly RULE_timing_check_event_control = 285;
  public static readonly RULE_specify_terminal_descriptor = 286;
  public static readonly RULE_edge_control_specifier = 287;
  public static readonly RULE_edge_descriptor = 288;
  public static readonly RULE_timing_check_condition = 289;
  public static readonly RULE_scalar_timing_check_condition = 290;
  public static readonly RULE_scalar_constant = 291;
  public static readonly RULE_concatenation = 292;
  public static readonly RULE_constant_concatenation = 293;
  public static readonly RULE_constant_multiple_concatenation = 294;
  public static readonly RULE_module_path_concatenation = 295;
  public static readonly RULE_module_path_multiple_concatenation = 296;
  public static readonly RULE_multiple_concatenation = 297;
  public static readonly RULE_constant_function_call = 298;
  public static readonly RULE_constant_system_function_call = 299;
  public static readonly RULE_function_call = 300;
  public static readonly RULE_system_function_call = 301;
  public static readonly RULE_sys_func_call_port_list = 302;
  public static readonly RULE_base_expression = 303;
  public static readonly RULE_constant_base_expression = 304;
  public static readonly RULE_constant_expression = 305;
  public static readonly RULE_constant_mintypmax_expression = 306;
  public static readonly RULE_constant_range_expression = 307;
  public static readonly RULE_dimension_constant_expression = 308;
  public static readonly RULE_expression = 309;
  public static readonly RULE_lsb_constant_expression = 310;
  public static readonly RULE_mintypmax_expression = 311;
  public static readonly RULE_module_path_expression = 312;
  public static readonly RULE_module_path_mintypmax_expression = 313;
  public static readonly RULE_msb_constant_expression = 314;
  public static readonly RULE_range_expression = 315;
  public static readonly RULE_width_constant_expression = 316;
  public static readonly RULE_constant_primary = 317;
  public static readonly RULE_module_path_primary = 318;
  public static readonly RULE_primary = 319;
  public static readonly RULE_select_ = 320;
  public static readonly RULE_bit_select = 321;
  public static readonly RULE_net_lvalue = 322;
  public static readonly RULE_const_select = 323;
  public static readonly RULE_const_bit_select = 324;
  public static readonly RULE_variable_lvalue = 325;
  public static readonly RULE_unary_operator = 326;
  public static readonly RULE_unary_module_path_operator = 327;
  public static readonly RULE_number = 328;
  public static readonly RULE_real_number = 329;
  public static readonly RULE_decimal_number = 330;
  public static readonly RULE_binary_number = 331;
  public static readonly RULE_octal_number = 332;
  public static readonly RULE_hex_number = 333;
  public static readonly RULE_size = 334;
  public static readonly RULE_fixed_point_number = 335;
  public static readonly RULE_exponential_number = 336;
  public static readonly RULE_unsigned_number = 337;
  public static readonly RULE_decimal_value = 338;
  public static readonly RULE_binary_value = 339;
  public static readonly RULE_octal_value = 340;
  public static readonly RULE_hex_value = 341;
  public static readonly RULE_decimal_base = 342;
  public static readonly RULE_binary_base = 343;
  public static readonly RULE_octal_base = 344;
  public static readonly RULE_hex_base = 345;
  public static readonly RULE_string_ = 346;
  public static readonly RULE_attribute_instance = 347;
  public static readonly RULE_attr_spec = 348;
  public static readonly RULE_attr_name = 349;
  public static readonly RULE_block_identifier = 350;
  public static readonly RULE_cell_identifier = 351;
  public static readonly RULE_config_identifier = 352;
  public static readonly RULE_escaped_identifier = 353;
  public static readonly RULE_event_identifier = 354;
  public static readonly RULE_function_identifier = 355;
  public static readonly RULE_gate_instance_identifier = 356;
  public static readonly RULE_generate_block_identifier = 357;
  public static readonly RULE_genvar_identifier = 358;
  public static readonly RULE_hierarchical_identifier = 359;
  public static readonly RULE_hier_ref = 360;
  public static readonly RULE_identifier = 361;
  public static readonly RULE_input_port_identifier = 362;
  public static readonly RULE_instance_identifier = 363;
  public static readonly RULE_library_identifier = 364;
  public static readonly RULE_module_identifier = 365;
  public static readonly RULE_module_instance_identifier = 366;
  public static readonly RULE_net_identifier = 367;
  public static readonly RULE_output_port_identifier = 368;
  public static readonly RULE_parameter_identifier = 369;
  public static readonly RULE_port_identifier = 370;
  public static readonly RULE_real_identifier = 371;
  public static readonly RULE_simple_identifier = 372;
  public static readonly RULE_specparam_identifier = 373;
  public static readonly RULE_system_function_identifier = 374;
  public static readonly RULE_system_task_identifier = 375;
  public static readonly RULE_task_identifier = 376;
  public static readonly RULE_terminal_identifier = 377;
  public static readonly RULE_topmodule_identifier = 378;
  public static readonly RULE_udp_identifier = 379;
  public static readonly RULE_udp_instance_identifier = 380;
  public static readonly RULE_variable_identifier = 381;
  // tslint:disable:no-trailing-whitespace
  public static readonly ruleNames: string[] = [
    "library_text", "library_description", "library_declaration", "library_incdir",
    "include_statement", "file_path_spec", "source_text", "description", "module_declaration",
    "module_keyword", "module_parameter_port_list", "list_of_port_declarations",
    "port", "port_implicit", "port_explicit", "port_expression", "port_reference",
    "port_declaration", "module_item", "module_or_generate_item", "module_or_generate_item_declaration",
    "parameter_override", "config_declaration", "design_statement", "design_statement_item",
    "config_rule_statement", "default_clause", "inst_clause", "inst_name",
    "cell_clause", "liblist_clause", "use_clause", "local_parameter_declaration",
    "parameter_declaration", "specparam_declaration", "parameter_type", "inout_declaration",
    "input_declaration", "output_declaration", "event_declaration", "integer_declaration",
    "net_declaration", "real_declaration", "realtime_declaration", "reg_declaration",
    "time_declaration", "net_type", "output_variable_type", "real_type", "variable_type",
    "drive_strength", "strength0", "strength1", "charge_strength", "delay3",
    "delay2", "delay_value", "list_of_defparam_assignments", "list_of_event_identifiers",
    "event_id", "list_of_net_decl_assignments", "list_of_net_identifiers",
    "net_id", "list_of_param_assignments", "list_of_port_identifiers", "list_of_real_identifiers",
    "list_of_specparam_assignments", "list_of_variable_identifiers", "list_of_variable_port_identifiers",
    "var_port_id", "defparam_assignment", "net_decl_assignment", "param_assignment",
    "specparam_assignment", "pulse_control_specparam", "error_limit_value",
    "reject_limit_value", "limit_value", "dimension", "range_", "function_declaration",
    "function_item_declaration", "function_port_list", "func_port_item", "function_range_or_type",
    "task_declaration", "task_item_declaration", "task_port_list", "task_port_item",
    "tf_input_declaration", "tf_output_declaration", "tf_inout_declaration",
    "task_port_type", "block_item_declaration", "list_of_block_variable_identifiers",
    "list_of_block_real_identifiers", "block_variable_type", "block_real_type",
    "gate_instantiation", "cmos_switch_instance", "enable_gate_instance",
    "mos_switch_instance", "n_input_gate_instance", "n_output_gate_instance",
    "pass_switch_instance", "pass_enable_switch_instance", "pull_gate_instance",
    "name_of_gate_instance", "pulldown_strength", "pullup_strength", "enable_terminal",
    "inout_terminal", "input_terminal", "ncontrol_terminal", "output_terminal",
    "pcontrol_terminal", "cmos_switchtype", "enable_gatetype", "mos_switchtype",
    "n_input_gatetype", "n_output_gatetype", "pass_en_switchtype", "pass_switchtype",
    "module_instantiation", "parameter_value_assignment", "list_of_parameter_assignments",
    "ordered_parameter_assignment", "named_parameter_assignment", "module_instance",
    "name_of_module_instance", "list_of_port_connections", "ordered_port_connection",
    "named_port_connection", "generate_region", "genvar_declaration", "list_of_genvar_identifiers",
    "loop_generate_construct", "genvar_initialization", "genvar_expression",
    "genvar_iteration", "conditional_generate_construct", "if_generate_construct",
    "case_generate_construct", "case_generate_item", "generate_block", "generate_block_name",
    "generate_block_or_null", "udp_declaration", "udp_port_list", "udp_declaration_port_list",
    "udp_port_declaration", "udp_output_declaration", "udp_input_declaration",
    "udp_reg_declaration", "udp_body", "combinational_body", "combinational_entry",
    "sequential_body", "udp_initial_statement", "init_val", "sequential_entry",
    "seq_input_list", "level_input_list", "edge_input_list", "edge_indicator",
    "current_state", "next_state", "output_symbol", "level_symbol", "edge_symbol",
    "udp_instantiation", "udp_instance", "name_of_udp_instance", "continuous_assign",
    "list_of_net_assignments", "net_assignment", "initial_construct", "always_construct",
    "blocking_assignment", "nonblocking_assignment", "procedural_continuous_assignments",
    "variable_assignment", "par_block", "block_name", "seq_block", "statement",
    "statement_or_null", "function_statement", "delay_control", "delay_or_event_control",
    "disable_statement", "event_control", "event_trigger", "event_expression",
    "procedural_timing_control", "procedural_timing_control_statement", "wait_statement",
    "conditional_statement", "case_statement", "case_item", "loop_statement",
    "system_task_enable", "sys_task_en_port_list", "sys_task_en_port_item",
    "task_enable", "task_en_port_list", "specify_block", "specify_item", "pulsestyle_declaration",
    "showcancelled_declaration", "path_declaration", "simple_path_declaration",
    "parallel_path_description", "full_path_description", "list_of_path_inputs",
    "list_of_path_outputs", "specify_input_terminal_descriptor", "specify_output_terminal_descriptor",
    "input_identifier", "output_identifier", "path_delay_value", "list_of_path_delay_expressions",
    "t_path_delay_expression", "trise_path_delay_expression", "tfall_path_delay_expression",
    "tz_path_delay_expression", "t01_path_delay_expression", "t10_path_delay_expression",
    "t0z_path_delay_expression", "tz1_path_delay_expression", "t1z_path_delay_expression",
    "tz0_path_delay_expression", "t0x_path_delay_expression", "tx1_path_delay_expression",
    "t1x_path_delay_expression", "tx0_path_delay_expression", "txz_path_delay_expression",
    "tzx_path_delay_expression", "path_delay_expression", "edge_sensitive_path_declaration",
    "parallel_edge_sensitive_path_description", "full_edge_sensitive_path_description",
    "data_source_expression", "edge_identifier", "state_dependent_path_declaration",
    "polarity_operator", "system_timing_check", "setup_timing_check", "notifier_opt",
    "hold_timing_check", "setuphold_timing_check", "timing_check_opt", "stamptime_cond_opt",
    "checktime_cond_opt", "delayed_ref_opt", "delayed_data_opt", "recovery_timing_check",
    "removal_timing_check", "recrem_timing_check", "skew_timing_check", "timeskew_timing_check",
    "skew_timing_check_opt", "event_based_flag_opt", "remain_active_flag_opt",
    "fullskew_timing_check", "period_timing_check", "width_timing_check",
    "threshold_opt", "nochange_timing_check", "checktime_condition", "controlled_reference_event",
    "data_event", "delayed_data", "delayed_reference", "end_edge_offset",
    "event_based_flag", "notifier", "reference_event", "remain_active_flag",
    "stamptime_condition", "start_edge_offset", "threshold", "timing_check_limit",
    "timing_check_event", "controlled_timing_check_event", "timing_check_event_control",
    "specify_terminal_descriptor", "edge_control_specifier", "edge_descriptor",
    "timing_check_condition", "scalar_timing_check_condition", "scalar_constant",
    "concatenation", "constant_concatenation", "constant_multiple_concatenation",
    "module_path_concatenation", "module_path_multiple_concatenation", "multiple_concatenation",
    "constant_function_call", "constant_system_function_call", "function_call",
    "system_function_call", "sys_func_call_port_list", "base_expression",
    "constant_base_expression", "constant_expression", "constant_mintypmax_expression",
    "constant_range_expression", "dimension_constant_expression", "expression",
    "lsb_constant_expression", "mintypmax_expression", "module_path_expression",
    "module_path_mintypmax_expression", "msb_constant_expression", "range_expression",
    "width_constant_expression", "constant_primary", "module_path_primary",
    "primary", "select_", "bit_select", "net_lvalue", "const_select", "const_bit_select",
    "variable_lvalue", "unary_operator", "unary_module_path_operator", "number",
    "real_number", "decimal_number", "binary_number", "octal_number", "hex_number",
    "size", "fixed_point_number", "exponential_number", "unsigned_number",
    "decimal_value", "binary_value", "octal_value", "hex_value", "decimal_base",
    "binary_base", "octal_base", "hex_base", "string_", "attribute_instance",
    "attr_spec", "attr_name", "block_identifier", "cell_identifier", "config_identifier",
    "escaped_identifier", "event_identifier", "function_identifier", "gate_instance_identifier",
    "generate_block_identifier", "genvar_identifier", "hierarchical_identifier",
    "hier_ref", "identifier", "input_port_identifier", "instance_identifier",
    "library_identifier", "module_identifier", "module_instance_identifier",
    "net_identifier", "output_port_identifier", "parameter_identifier", "port_identifier",
    "real_identifier", "simple_identifier", "specparam_identifier", "system_function_identifier",
    "system_task_identifier", "task_identifier", "terminal_identifier", "topmodule_identifier",
    "udp_identifier", "udp_instance_identifier", "variable_identifier",
  ];

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined, "'always'", "'and'", "'assign'", "'automatic'", "'begin'",
    "'buf'", "'bufif1'", "'bufif0'", "'case'", "'casex'", "'casez'", "'cell'",
    "'cmos'", "'config'", "'deassign'", "'default'", "'defparam'", "'design'",
    "'disable'", "'$fullskew'", "'$hold'", "'$nochange'", "'$period'", "'$recovery'",
    "'$recrem'", "'$removal'", "'$setup'", "'$setuphold'", "'$skew'", "'$timeskew'",
    "'$width'", "'edge'", "'else'", "'end'", "'endcase'", "'endconfig'", "'endfunction'",
    "'endgenerate'", "'endmodule'", "'endprimitive'", "'endspecify'", "'endtable'",
    "'endtask'", "'event'", "'for'", "'force'", "'forever'", "'fork'", "'function'",
    "'generate'", "'genvar'", "'highz1'", "'highz0'", "'if'", "'ifnone'",
    "'include'", "'initial'", "'inout'", "'input'", "'instance'", "'integer'",
    "'join'", "'large'", "'liblist'", "'library'", "'localparam'", "'macromodule'",
    "'medium'", "'-incdir'", "'module'", "'nand'", "'negedge'", "'nmos'",
    "'nor'", "'noshowcancelled'", "'not'", "'notif1'", "'notif0'", "'or'",
    "'output'", "'parameter'", "'PATHPULSE$'", "'pmos'", "'posedge'", "'primitive'",
    "'pulldown'", "'pull1'", "'pullup'", "'pull0'", "'pulsestyle_ondetect'",
    "'pulsestyle_onevent'", "'rcmos'", "'real'", "'realtime'", "'reg'", "'release'",
    "'repeat'", "'rnmos'", "'rpmos'", "'rtran'", "'rtranif1'", "'rtranif0'",
    "'scalared'", "'showcancelled'", "'signed'", "'small'", "'specify'", "'specparam'",
    "'strong1'", "'strong0'", "'supply1'", "'supply0'", "'table'", "'task'",
    "'time'", "'tran'", "'tranif1'", "'tranif0'", "'tri'", "'triand'", "'tri1'",
    "'trior'", "'trireg'", "'tri0'", "'use'", "'uwire'", "'vectored'", "'wait'",
    "'wand'", "'weak1'", "'weak0'", "'while'", "'wire'", "'wor'", "'xnor'",
    "'xor'", "'&'", "'&&'", "'&&&'", "'*'", "'**'", "'*>'", "'@'", "'^'",
    "'^~'", "':'", "','", "'$'", "'\"'", "'.'", "'!'", "'!='", "'!=='", "'='",
    "'=='", "'==='", "'=>'", undefined, "'>'", "'>='", "'>>'", "'>>>'", "'#'",
    "'['", "'{'", "'('", "'<'", "'<='", "'<<'", "'<<<'", "'-'", "'-:'", "'->'",
    "'%'", "'+'", "'+:'", "'?'", "']'", "'}'", "')'", "';'", "'/'", "'~'",
    "'~&'", "'~^'", "'~|'", "'|'", "'||'", undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    "'celldefine'", undefined, undefined, undefined, undefined, "'end_keywords'",
    "'endcelldefine'", undefined, undefined, undefined, undefined, undefined,
    "'nounconnected_drive'", undefined, "'resetall'", undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, "'``'",
    undefined, "'`\\\"'", "'`\"'",
  ];
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined, "ALWAYS", "AND", "ASSIGN", "AUTOMATIC", "BEGIN", "BUF", "BUFIFONE",
    "BUFIFZERO", "CASE", "CASEX", "CASEZ", "CELL", "CMOS", "CONFIG", "DEASSIGN",
    "DEFAULT", "DEFPARAM", "DESIGN", "DISABLE", "DLFULLSKEW", "DLHOLD", "DLNOCHANGE",
    "DLPERIOD", "DLRECOVERY", "DLRECREM", "DLREMOVAL", "DLSETUP", "DLSETUPHOLD",
    "DLSKEW", "DLTIMESKEW", "DLWIDTH", "EDGE", "ELSE", "END", "ENDCASE", "ENDCONFIG",
    "ENDFUNCTION", "ENDGENERATE", "ENDMODULE", "ENDPRIMITIVE", "ENDSPECIFY",
    "ENDTABLE", "ENDTASK", "EVENT", "FOR", "FORCE", "FOREVER", "FORK", "FUNCTION",
    "GENERATE", "GENVAR", "HIGHZONE", "HIGHZZERO", "IF", "IFNONE", "INCLUDE",
    "INITIAL", "INOUT", "INPUT", "INSTANCE", "INTEGER", "JOIN", "LARGE", "LIBLIST",
    "LIBRARY", "LOCALPARAM", "MACROMODULE", "MEDIUM", "MIINCDIR", "MODULE",
    "NAND", "NEGEDGE", "NMOS", "NOR", "NOSHOWCANCELLED", "NOT", "NOTIFONE",
    "NOTIFZERO", "OR", "OUTPUT", "PARAMETER", "PATHPULSEDL", "PMOS", "POSEDGE",
    "PRIMITIVE", "PULLDOWN", "PULLONE", "PULLUP", "PULLZERO", "PULSESTYLE_ONDETECT",
    "PULSESTYLE_ONEVENT", "RCMOS", "REAL", "REALTIME", "REG", "RELEASE", "REPEAT",
    "RNMOS", "RPMOS", "RTRAN", "RTRANIFONE", "RTRANIFZERO", "SCALARED", "SHOWCANCELLED",
    "SIGNED", "SMALL", "SPECIFY", "SPECPARAM", "STRONGONE", "STRONGZERO",
    "SUPPLYONE", "SUPPLYZERO", "TABLE", "TASK", "TIME", "TRAN", "TRANIFONE",
    "TRANIFZERO", "TRI", "TRIAND", "TRIONE", "TRIOR", "TRIREG", "TRIZERO",
    "USE", "UWIRE", "VECTORED", "WAIT", "WAND", "WEAKONE", "WEAKZERO", "WHILE",
    "WIRE", "WOR", "XNOR", "XOR", "AM", "AMAM", "AMAMAM", "AS", "ASAS", "ASGT",
    "AT", "CA", "CATI", "CL", "CO", "DL", "DQ", "DT", "EM", "EMEQ", "EMEQEQ",
    "EQ", "EQEQ", "EQEQEQ", "EQGT", "GA", "GT", "GTEQ", "GTGT", "GTGTGT",
    "HA", "LB", "LC", "LP", "LT", "LTEQ", "LTLT", "LTLTLT", "MI", "MICL",
    "MIGT", "MO", "PL", "PLCL", "QM", "RB", "RC", "RP", "SC", "SL", "TI",
    "TIAM", "TICA", "TIVL", "VL", "VLVL", "BINARY_BASE", "BLOCK_COMMENT",
    "DECIMAL_BASE", "ESCAPED_IDENTIFIER", "EXPONENTIAL_NUMBER", "FIXED_POINT_NUMBER",
    "HEX_BASE", "LINE_COMMENT", "OCTAL_BASE", "SIMPLE_IDENTIFIER", "STRING",
    "SYSTEM_TF_IDENTIFIER", "UNSIGNED_NUMBER", "WHITE_SPACE", "BINARY_VALUE",
    "X_OR_Z_UNDERSCORE", "EDGE_DESCRIPTOR", "HEX_VALUE", "FILE_PATH_SPEC",
    "OCTAL_VALUE", "EDGE_SYMBOL", "LEVEL_ONLY_SYMBOL", "OUTPUT_OR_LEVEL_SYMBOL",
    "BEGIN_KEYWORDS_DIRECTIVE", "CELLDEFINE_DIRECTIVE", "DEFAULT_NETTYPE_DIRECTIVE",
    "DEFINE_DIRECTIVE", "ELSE_DIRECTIVE", "ELSIF_DIRECTIVE", "END_KEYWORDS_DIRECTIVE",
    "ENDCELLDEFINE_DIRECTIVE", "ENDIF_DIRECTIVE", "IFDEF_DIRECTIVE", "IFNDEF_DIRECTIVE",
    "INCLUDE_DIRECTIVE", "LINE_DIRECTIVE", "NOUNCONNECTED_DRIVE_DIRECTIVE",
    "PRAGMA_DIRECTIVE", "RESETALL_DIRECTIVE", "TIMESCALE_DIRECTIVE", "UNCONNECTED_DRIVE_DIRECTIVE",
    "UNDEF_DIRECTIVE", "MACRO_USAGE", "VERSION_SPECIFIER", "DEFAULT_NETTYPE_VALUE",
    "MACRO_NAME", "FILENAME", "MACRO_DELIMITER", "MACRO_ESC_NEWLINE", "MACRO_ESC_QUOTE",
    "MACRO_QUOTE", "MACRO_TEXT", "SOURCE_TEXT", "TIME_UNIT", "TIME_VALUE",
    "UNCONNECTED_DRIVE_VALUE", "MACRO_IDENTIFIER",
  ];
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(VerilogParser._LITERAL_NAMES, VerilogParser._SYMBOLIC_NAMES, []);

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return VerilogParser.VOCABULARY;
  }

  // tslint:enable:no-trailing-whitespace

  // @Override
  public get grammarFileName(): string {
    return "VerilogParser.g4";
  }

  // @Override
  public get ruleNames(): string[] {
    return VerilogParser.ruleNames;
  }

  // @Override
  public get serializedATN(): string {
    return VerilogParser._serializedATN;
  }

  protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException {
    return new FailedPredicateException(this, predicate, message);
  }

  constructor(input: TokenStream) {
    super(input);
    this._interp = new ParserATNSimulator(VerilogParser._ATN, this);
  }

  // @RuleVersion(0)
  public library_text(): Library_textContext {
    let _localctx: Library_textContext = new Library_textContext(this._ctx, this.state);
    this.enterRule(_localctx, 0, VerilogParser.RULE_library_text);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 767;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CONFIG || _la === VerilogParser.INCLUDE || _la === VerilogParser.LIBRARY) {
          {
            {
              this.state = 764;
              this.library_description();
            }
          }
          this.state = 769;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 770;
        this.match(VerilogParser.EOF);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public library_description(): Library_descriptionContext {
    let _localctx: Library_descriptionContext = new Library_descriptionContext(this._ctx, this.state);
    this.enterRule(_localctx, 2, VerilogParser.RULE_library_description);
    try {
      this.state = 775;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.LIBRARY:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 772;
          this.library_declaration();
        }
          break;
        case VerilogParser.INCLUDE:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 773;
          this.include_statement();
        }
          break;
        case VerilogParser.CONFIG:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 774;
          this.config_declaration();
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public library_declaration(): Library_declarationContext {
    let _localctx: Library_declarationContext = new Library_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 4, VerilogParser.RULE_library_declaration);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 777;
        this.match(VerilogParser.LIBRARY);
        this.state = 778;
        this.library_identifier();
        this.state = 779;
        this.file_path_spec();
        this.state = 784;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 780;
              this.match(VerilogParser.CO);
              this.state = 781;
              this.file_path_spec();
            }
          }
          this.state = 786;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 788;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.MIINCDIR) {
          {
            this.state = 787;
            this.library_incdir();
          }
        }

        this.state = 790;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public library_incdir(): Library_incdirContext {
    let _localctx: Library_incdirContext = new Library_incdirContext(this._ctx, this.state);
    this.enterRule(_localctx, 6, VerilogParser.RULE_library_incdir);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 792;
        this.match(VerilogParser.MIINCDIR);
        this.state = 793;
        this.file_path_spec();
        this.state = 798;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 794;
              this.match(VerilogParser.CO);
              this.state = 795;
              this.file_path_spec();
            }
          }
          this.state = 800;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public include_statement(): Include_statementContext {
    let _localctx: Include_statementContext = new Include_statementContext(this._ctx, this.state);
    this.enterRule(_localctx, 8, VerilogParser.RULE_include_statement);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 801;
        this.match(VerilogParser.INCLUDE);
        this.state = 802;
        this.file_path_spec();
        this.state = 803;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public file_path_spec(): File_path_specContext {
    let _localctx: File_path_specContext = new File_path_specContext(this._ctx, this.state);
    this.enterRule(_localctx, 10, VerilogParser.RULE_file_path_spec);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 805;
        this.match(VerilogParser.FILE_PATH_SPEC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public source_text(): Source_textContext {
    let _localctx: Source_textContext = new Source_textContext(this._ctx, this.state);
    this.enterRule(_localctx, 12, VerilogParser.RULE_source_text);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 810;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CONFIG || ((((_la - 67)) & ~0x1F) === 0 && ((1 << (_la - 67)) & ((1 << (VerilogParser.MACROMODULE - 67)) | (1 << (VerilogParser.MODULE - 67)) | (1 << (VerilogParser.PRIMITIVE - 67)))) !== 0) || _la === VerilogParser.LP) {
          {
            {
              this.state = 807;
              this.description();
            }
          }
          this.state = 812;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 813;
        this.match(VerilogParser.EOF);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public description(): DescriptionContext {
    let _localctx: DescriptionContext = new DescriptionContext(this._ctx, this.state);
    this.enterRule(_localctx, 14, VerilogParser.RULE_description);
    try {
      this.state = 818;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 6, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 815;
          this.module_declaration();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 816;
          this.udp_declaration();
        }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 817;
          this.config_declaration();
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public module_declaration(): Module_declarationContext {
    let _localctx: Module_declarationContext = new Module_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 16, VerilogParser.RULE_module_declaration);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 823;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.LP) {
          {
            {
              this.state = 820;
              this.attribute_instance();
            }
          }
          this.state = 825;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 826;
        this.module_keyword();
        this.state = 827;
        this.module_identifier();
        this.state = 829;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.HA) {
          {
            this.state = 828;
            this.module_parameter_port_list();
          }
        }

        this.state = 832;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.LP) {
          {
            this.state = 831;
            this.list_of_port_declarations();
          }
        }

        this.state = 834;
        this.match(VerilogParser.SC);
        this.state = 838;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << VerilogParser.ALWAYS) | (1 << VerilogParser.AND) | (1 << VerilogParser.ASSIGN) | (1 << VerilogParser.BUF) | (1 << VerilogParser.BUFIFONE) | (1 << VerilogParser.BUFIFZERO) | (1 << VerilogParser.CASE) | (1 << VerilogParser.CMOS) | (1 << VerilogParser.DEFPARAM))) !== 0) || ((((_la - 44)) & ~0x1F) === 0 && ((1 << (_la - 44)) & ((1 << (VerilogParser.EVENT - 44)) | (1 << (VerilogParser.FOR - 44)) | (1 << (VerilogParser.FUNCTION - 44)) | (1 << (VerilogParser.GENERATE - 44)) | (1 << (VerilogParser.GENVAR - 44)) | (1 << (VerilogParser.IF - 44)) | (1 << (VerilogParser.INITIAL - 44)) | (1 << (VerilogParser.INOUT - 44)) | (1 << (VerilogParser.INPUT - 44)) | (1 << (VerilogParser.INTEGER - 44)) | (1 << (VerilogParser.LOCALPARAM - 44)) | (1 << (VerilogParser.NAND - 44)) | (1 << (VerilogParser.NMOS - 44)) | (1 << (VerilogParser.NOR - 44)))) !== 0) || ((((_la - 76)) & ~0x1F) === 0 && ((1 << (_la - 76)) & ((1 << (VerilogParser.NOT - 76)) | (1 << (VerilogParser.NOTIFONE - 76)) | (1 << (VerilogParser.NOTIFZERO - 76)) | (1 << (VerilogParser.OR - 76)) | (1 << (VerilogParser.OUTPUT - 76)) | (1 << (VerilogParser.PARAMETER - 76)) | (1 << (VerilogParser.PMOS - 76)) | (1 << (VerilogParser.PULLDOWN - 76)) | (1 << (VerilogParser.PULLUP - 76)) | (1 << (VerilogParser.RCMOS - 76)) | (1 << (VerilogParser.REAL - 76)) | (1 << (VerilogParser.REALTIME - 76)) | (1 << (VerilogParser.REG - 76)) | (1 << (VerilogParser.RNMOS - 76)) | (1 << (VerilogParser.RPMOS - 76)) | (1 << (VerilogParser.RTRAN - 76)) | (1 << (VerilogParser.RTRANIFONE - 76)) | (1 << (VerilogParser.RTRANIFZERO - 76)) | (1 << (VerilogParser.SPECIFY - 76)))) !== 0) || ((((_la - 108)) & ~0x1F) === 0 && ((1 << (_la - 108)) & ((1 << (VerilogParser.SPECPARAM - 108)) | (1 << (VerilogParser.SUPPLYONE - 108)) | (1 << (VerilogParser.SUPPLYZERO - 108)) | (1 << (VerilogParser.TASK - 108)) | (1 << (VerilogParser.TIME - 108)) | (1 << (VerilogParser.TRAN - 108)) | (1 << (VerilogParser.TRANIFONE - 108)) | (1 << (VerilogParser.TRANIFZERO - 108)) | (1 << (VerilogParser.TRI - 108)) | (1 << (VerilogParser.TRIAND - 108)) | (1 << (VerilogParser.TRIONE - 108)) | (1 << (VerilogParser.TRIOR - 108)) | (1 << (VerilogParser.TRIREG - 108)) | (1 << (VerilogParser.TRIZERO - 108)) | (1 << (VerilogParser.UWIRE - 108)) | (1 << (VerilogParser.WAND - 108)) | (1 << (VerilogParser.WIRE - 108)) | (1 << (VerilogParser.WOR - 108)) | (1 << (VerilogParser.XNOR - 108)) | (1 << (VerilogParser.XOR - 108)))) !== 0) || _la === VerilogParser.LP || _la === VerilogParser.ESCAPED_IDENTIFIER || _la === VerilogParser.SIMPLE_IDENTIFIER) {
          {
            {
              this.state = 835;
              this.module_item();
            }
          }
          this.state = 840;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 841;
        this.match(VerilogParser.ENDMODULE);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public module_keyword(): Module_keywordContext {
    let _localctx: Module_keywordContext = new Module_keywordContext(this._ctx, this.state);
    this.enterRule(_localctx, 18, VerilogParser.RULE_module_keyword);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 843;
        _la = this._input.LA(1);
        if (!(_la === VerilogParser.MACROMODULE || _la === VerilogParser.MODULE)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public module_parameter_port_list(): Module_parameter_port_listContext {
    let _localctx: Module_parameter_port_listContext = new Module_parameter_port_listContext(this._ctx, this.state);
    this.enterRule(_localctx, 20, VerilogParser.RULE_module_parameter_port_list);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 845;
        this.match(VerilogParser.HA);
        this.state = 846;
        this.match(VerilogParser.LP);
        this.state = 847;
        this.parameter_declaration();
        this.state = 852;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 848;
              this.match(VerilogParser.CO);
              this.state = 849;
              this.parameter_declaration();
            }
          }
          this.state = 854;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 855;
        this.match(VerilogParser.RP);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public list_of_port_declarations(): List_of_port_declarationsContext {
    let _localctx: List_of_port_declarationsContext = new List_of_port_declarationsContext(this._ctx, this.state);
    this.enterRule(_localctx, 22, VerilogParser.RULE_list_of_port_declarations);
    let _la: number;
    try {
      this.state = 888;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 14, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 857;
          this.match(VerilogParser.LP);
          this.state = 858;
          this.port_declaration();
          this.state = 863;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.CO) {
            {
              {
                this.state = 859;
                this.match(VerilogParser.CO);
                this.state = 860;
                this.port_declaration();
              }
            }
            this.state = 865;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 866;
          this.match(VerilogParser.RP);
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 868;
          this.match(VerilogParser.LP);
          this.state = 869;
          this.port();
          this.state = 872;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          do {
            {
              {
                this.state = 870;
                this.match(VerilogParser.CO);
                this.state = 871;
                this.port();
              }
            }
            this.state = 874;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          } while (_la === VerilogParser.CO);
          this.state = 876;
          this.match(VerilogParser.RP);
        }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 878;
          this.match(VerilogParser.LP);
          this.state = 879;
          this.port_implicit();
          this.state = 880;
          this.match(VerilogParser.RP);
        }
          break;

        case 4:
          this.enterOuterAlt(_localctx, 4);
        {
          this.state = 882;
          this.match(VerilogParser.LP);
          this.state = 883;
          this.port_explicit();
          this.state = 884;
          this.match(VerilogParser.RP);
        }
          break;

        case 5:
          this.enterOuterAlt(_localctx, 5);
        {
          this.state = 886;
          this.match(VerilogParser.LP);
          this.state = 887;
          this.match(VerilogParser.RP);
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public port(): PortContext {
    let _localctx: PortContext = new PortContext(this._ctx, this.state);
    this.enterRule(_localctx, 24, VerilogParser.RULE_port);
    let _la: number;
    try {
      this.state = 894;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.CO:
        case VerilogParser.LC:
        case VerilogParser.RP:
        case VerilogParser.ESCAPED_IDENTIFIER:
        case VerilogParser.SIMPLE_IDENTIFIER:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 891;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.LC || _la === VerilogParser.ESCAPED_IDENTIFIER || _la === VerilogParser.SIMPLE_IDENTIFIER) {
            {
              this.state = 890;
              this.port_implicit();
            }
          }

        }
          break;
        case VerilogParser.DT:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 893;
          this.port_explicit();
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public port_implicit(): Port_implicitContext {
    let _localctx: Port_implicitContext = new Port_implicitContext(this._ctx, this.state);
    this.enterRule(_localctx, 26, VerilogParser.RULE_port_implicit);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 896;
        this.port_expression();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public port_explicit(): Port_explicitContext {
    let _localctx: Port_explicitContext = new Port_explicitContext(this._ctx, this.state);
    this.enterRule(_localctx, 28, VerilogParser.RULE_port_explicit);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 898;
        this.match(VerilogParser.DT);
        this.state = 899;
        this.port_identifier();
        this.state = 900;
        this.match(VerilogParser.LP);
        this.state = 902;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.LC || _la === VerilogParser.ESCAPED_IDENTIFIER || _la === VerilogParser.SIMPLE_IDENTIFIER) {
          {
            this.state = 901;
            this.port_expression();
          }
        }

        this.state = 904;
        this.match(VerilogParser.RP);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public port_expression(): Port_expressionContext {
    let _localctx: Port_expressionContext = new Port_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 30, VerilogParser.RULE_port_expression);
    let _la: number;
    try {
      this.state = 918;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.ESCAPED_IDENTIFIER:
        case VerilogParser.SIMPLE_IDENTIFIER:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 906;
          this.port_reference();
        }
          break;
        case VerilogParser.LC:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 907;
          this.match(VerilogParser.LC);
          this.state = 908;
          this.port_reference();
          this.state = 913;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.CO) {
            {
              {
                this.state = 909;
                this.match(VerilogParser.CO);
                this.state = 910;
                this.port_reference();
              }
            }
            this.state = 915;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 916;
          this.match(VerilogParser.RC);
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public port_reference(): Port_referenceContext {
    let _localctx: Port_referenceContext = new Port_referenceContext(this._ctx, this.state);
    this.enterRule(_localctx, 32, VerilogParser.RULE_port_reference);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 920;
        this.port_identifier();
        this.state = 925;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.LB) {
          {
            this.state = 921;
            this.match(VerilogParser.LB);
            this.state = 922;
            this.constant_range_expression();
            this.state = 923;
            this.match(VerilogParser.RB);
          }
        }

      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public port_declaration(): Port_declarationContext {
    let _localctx: Port_declarationContext = new Port_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 34, VerilogParser.RULE_port_declaration);
    let _la: number;
    try {
      this.state = 948;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 24, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 930;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 927;
                this.attribute_instance();
              }
            }
            this.state = 932;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 933;
          this.inout_declaration();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 937;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 934;
                this.attribute_instance();
              }
            }
            this.state = 939;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 940;
          this.input_declaration();
        }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 944;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 941;
                this.attribute_instance();
              }
            }
            this.state = 946;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 947;
          this.output_declaration();
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public module_item(): Module_itemContext {
    let _localctx: Module_itemContext = new Module_itemContext(this._ctx, this.state);
    this.enterRule(_localctx, 36, VerilogParser.RULE_module_item);
    let _la: number;
    try {
      this.state = 972;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 27, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 950;
          this.port_declaration();
          this.state = 951;
          this.match(VerilogParser.SC);
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 953;
          this.module_or_generate_item();
        }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 954;
          this.generate_region();
        }
          break;

        case 4:
          this.enterOuterAlt(_localctx, 4);
        {
          this.state = 955;
          this.specify_block();
        }
          break;

        case 5:
          this.enterOuterAlt(_localctx, 5);
        {
          this.state = 959;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 956;
                this.attribute_instance();
              }
            }
            this.state = 961;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 962;
          this.parameter_declaration();
          this.state = 963;
          this.match(VerilogParser.SC);
        }
          break;

        case 6:
          this.enterOuterAlt(_localctx, 6);
        {
          this.state = 968;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 965;
                this.attribute_instance();
              }
            }
            this.state = 970;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 971;
          this.specparam_declaration();
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public module_or_generate_item(): Module_or_generate_itemContext {
    let _localctx: Module_or_generate_itemContext = new Module_or_generate_itemContext(this._ctx, this.state);
    this.enterRule(_localctx, 38, VerilogParser.RULE_module_or_generate_item);
    let _la: number;
    try {
      this.state = 1053;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 39, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 977;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 974;
                this.attribute_instance();
              }
            }
            this.state = 979;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 980;
          this.module_or_generate_item_declaration();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 984;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 981;
                this.attribute_instance();
              }
            }
            this.state = 986;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 987;
          this.local_parameter_declaration();
          this.state = 988;
          this.match(VerilogParser.SC);
        }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 993;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 990;
                this.attribute_instance();
              }
            }
            this.state = 995;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 996;
          this.parameter_override();
        }
          break;

        case 4:
          this.enterOuterAlt(_localctx, 4);
        {
          this.state = 1000;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 997;
                this.attribute_instance();
              }
            }
            this.state = 1002;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1003;
          this.continuous_assign();
        }
          break;

        case 5:
          this.enterOuterAlt(_localctx, 5);
        {
          this.state = 1007;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 1004;
                this.attribute_instance();
              }
            }
            this.state = 1009;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1010;
          this.gate_instantiation();
        }
          break;

        case 6:
          this.enterOuterAlt(_localctx, 6);
        {
          this.state = 1014;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 1011;
                this.attribute_instance();
              }
            }
            this.state = 1016;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1017;
          this.module_instantiation();
        }
          break;

        case 7:
          this.enterOuterAlt(_localctx, 7);
        {
          this.state = 1021;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 1018;
                this.attribute_instance();
              }
            }
            this.state = 1023;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1024;
          this.udp_instantiation();
        }
          break;

        case 8:
          this.enterOuterAlt(_localctx, 8);
        {
          this.state = 1028;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 1025;
                this.attribute_instance();
              }
            }
            this.state = 1030;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1031;
          this.initial_construct();
        }
          break;

        case 9:
          this.enterOuterAlt(_localctx, 9);
        {
          this.state = 1035;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 1032;
                this.attribute_instance();
              }
            }
            this.state = 1037;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1038;
          this.always_construct();
        }
          break;

        case 10:
          this.enterOuterAlt(_localctx, 10);
        {
          this.state = 1042;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 1039;
                this.attribute_instance();
              }
            }
            this.state = 1044;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1045;
          this.loop_generate_construct();
        }
          break;

        case 11:
          this.enterOuterAlt(_localctx, 11);
        {
          this.state = 1049;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 1046;
                this.attribute_instance();
              }
            }
            this.state = 1051;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1052;
          this.conditional_generate_construct();
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public module_or_generate_item_declaration(): Module_or_generate_item_declarationContext {
    let _localctx: Module_or_generate_item_declarationContext = new Module_or_generate_item_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 40, VerilogParser.RULE_module_or_generate_item_declaration);
    try {
      this.state = 1065;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.SUPPLYONE:
        case VerilogParser.SUPPLYZERO:
        case VerilogParser.TRI:
        case VerilogParser.TRIAND:
        case VerilogParser.TRIONE:
        case VerilogParser.TRIOR:
        case VerilogParser.TRIREG:
        case VerilogParser.TRIZERO:
        case VerilogParser.UWIRE:
        case VerilogParser.WAND:
        case VerilogParser.WIRE:
        case VerilogParser.WOR:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 1055;
          this.net_declaration();
        }
          break;
        case VerilogParser.REG:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 1056;
          this.reg_declaration();
        }
          break;
        case VerilogParser.INTEGER:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 1057;
          this.integer_declaration();
        }
          break;
        case VerilogParser.REAL:
          this.enterOuterAlt(_localctx, 4);
        {
          this.state = 1058;
          this.real_declaration();
        }
          break;
        case VerilogParser.TIME:
          this.enterOuterAlt(_localctx, 5);
        {
          this.state = 1059;
          this.time_declaration();
        }
          break;
        case VerilogParser.REALTIME:
          this.enterOuterAlt(_localctx, 6);
        {
          this.state = 1060;
          this.realtime_declaration();
        }
          break;
        case VerilogParser.EVENT:
          this.enterOuterAlt(_localctx, 7);
        {
          this.state = 1061;
          this.event_declaration();
        }
          break;
        case VerilogParser.GENVAR:
          this.enterOuterAlt(_localctx, 8);
        {
          this.state = 1062;
          this.genvar_declaration();
        }
          break;
        case VerilogParser.TASK:
          this.enterOuterAlt(_localctx, 9);
        {
          this.state = 1063;
          this.task_declaration();
        }
          break;
        case VerilogParser.FUNCTION:
          this.enterOuterAlt(_localctx, 10);
        {
          this.state = 1064;
          this.function_declaration();
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public parameter_override(): Parameter_overrideContext {
    let _localctx: Parameter_overrideContext = new Parameter_overrideContext(this._ctx, this.state);
    this.enterRule(_localctx, 42, VerilogParser.RULE_parameter_override);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1067;
        this.match(VerilogParser.DEFPARAM);
        this.state = 1068;
        this.list_of_defparam_assignments();
        this.state = 1069;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public config_declaration(): Config_declarationContext {
    let _localctx: Config_declarationContext = new Config_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 44, VerilogParser.RULE_config_declaration);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1071;
        this.match(VerilogParser.CONFIG);
        this.state = 1072;
        this.config_identifier();
        this.state = 1073;
        this.match(VerilogParser.SC);
        this.state = 1074;
        this.design_statement();
        this.state = 1078;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CELL || _la === VerilogParser.DEFAULT || _la === VerilogParser.INSTANCE) {
          {
            {
              this.state = 1075;
              this.config_rule_statement();
            }
          }
          this.state = 1080;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 1081;
        this.match(VerilogParser.ENDCONFIG);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public design_statement(): Design_statementContext {
    let _localctx: Design_statementContext = new Design_statementContext(this._ctx, this.state);
    this.enterRule(_localctx, 46, VerilogParser.RULE_design_statement);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1083;
        this.match(VerilogParser.DESIGN);
        this.state = 1087;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.ESCAPED_IDENTIFIER || _la === VerilogParser.SIMPLE_IDENTIFIER) {
          {
            {
              this.state = 1084;
              this.design_statement_item();
            }
          }
          this.state = 1089;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 1090;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public design_statement_item(): Design_statement_itemContext {
    let _localctx: Design_statement_itemContext = new Design_statement_itemContext(this._ctx, this.state);
    this.enterRule(_localctx, 48, VerilogParser.RULE_design_statement_item);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1095;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 43, this._ctx)) {
          case 1: {
            this.state = 1092;
            this.library_identifier();
            this.state = 1093;
            this.match(VerilogParser.DT);
          }
            break;
        }
        this.state = 1097;
        this.cell_identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public config_rule_statement(): Config_rule_statementContext {
    let _localctx: Config_rule_statementContext = new Config_rule_statementContext(this._ctx, this.state);
    this.enterRule(_localctx, 50, VerilogParser.RULE_config_rule_statement);
    try {
      this.state = 1119;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 44, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 1099;
          this.default_clause();
          this.state = 1100;
          this.liblist_clause();
          this.state = 1101;
          this.match(VerilogParser.SC);
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 1103;
          this.inst_clause();
          this.state = 1104;
          this.liblist_clause();
          this.state = 1105;
          this.match(VerilogParser.SC);
        }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 1107;
          this.inst_clause();
          this.state = 1108;
          this.use_clause();
          this.state = 1109;
          this.match(VerilogParser.SC);
        }
          break;

        case 4:
          this.enterOuterAlt(_localctx, 4);
        {
          this.state = 1111;
          this.cell_clause();
          this.state = 1112;
          this.liblist_clause();
          this.state = 1113;
          this.match(VerilogParser.SC);
        }
          break;

        case 5:
          this.enterOuterAlt(_localctx, 5);
        {
          this.state = 1115;
          this.cell_clause();
          this.state = 1116;
          this.use_clause();
          this.state = 1117;
          this.match(VerilogParser.SC);
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public default_clause(): Default_clauseContext {
    let _localctx: Default_clauseContext = new Default_clauseContext(this._ctx, this.state);
    this.enterRule(_localctx, 52, VerilogParser.RULE_default_clause);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1121;
        this.match(VerilogParser.DEFAULT);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public inst_clause(): Inst_clauseContext {
    let _localctx: Inst_clauseContext = new Inst_clauseContext(this._ctx, this.state);
    this.enterRule(_localctx, 54, VerilogParser.RULE_inst_clause);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1123;
        this.match(VerilogParser.INSTANCE);
        this.state = 1124;
        this.inst_name();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public inst_name(): Inst_nameContext {
    let _localctx: Inst_nameContext = new Inst_nameContext(this._ctx, this.state);
    this.enterRule(_localctx, 56, VerilogParser.RULE_inst_name);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1126;
        this.topmodule_identifier();
        this.state = 1131;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.DT) {
          {
            {
              this.state = 1127;
              this.match(VerilogParser.DT);
              this.state = 1128;
              this.instance_identifier();
            }
          }
          this.state = 1133;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public cell_clause(): Cell_clauseContext {
    let _localctx: Cell_clauseContext = new Cell_clauseContext(this._ctx, this.state);
    this.enterRule(_localctx, 58, VerilogParser.RULE_cell_clause);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1134;
        this.match(VerilogParser.CELL);
        this.state = 1138;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 46, this._ctx)) {
          case 1: {
            this.state = 1135;
            this.library_identifier();
            this.state = 1136;
            this.match(VerilogParser.DT);
          }
            break;
        }
        this.state = 1140;
        this.cell_identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public liblist_clause(): Liblist_clauseContext {
    let _localctx: Liblist_clauseContext = new Liblist_clauseContext(this._ctx, this.state);
    this.enterRule(_localctx, 60, VerilogParser.RULE_liblist_clause);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1142;
        this.match(VerilogParser.LIBLIST);
        this.state = 1146;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.ESCAPED_IDENTIFIER || _la === VerilogParser.SIMPLE_IDENTIFIER) {
          {
            {
              this.state = 1143;
              this.library_identifier();
            }
          }
          this.state = 1148;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public use_clause(): Use_clauseContext {
    let _localctx: Use_clauseContext = new Use_clauseContext(this._ctx, this.state);
    this.enterRule(_localctx, 62, VerilogParser.RULE_use_clause);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1149;
        this.match(VerilogParser.USE);
        this.state = 1153;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 48, this._ctx)) {
          case 1: {
            this.state = 1150;
            this.library_identifier();
            this.state = 1151;
            this.match(VerilogParser.DT);
          }
            break;
        }
        this.state = 1155;
        this.cell_identifier();
        this.state = 1158;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.CL) {
          {
            this.state = 1156;
            this.match(VerilogParser.CL);
            this.state = 1157;
            this.match(VerilogParser.CONFIG);
          }
        }

      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public local_parameter_declaration(): Local_parameter_declarationContext {
    let _localctx: Local_parameter_declarationContext = new Local_parameter_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 64, VerilogParser.RULE_local_parameter_declaration);
    let _la: number;
    try {
      this.state = 1172;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 52, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 1160;
          this.match(VerilogParser.LOCALPARAM);
          this.state = 1162;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.SIGNED) {
            {
              this.state = 1161;
              this.match(VerilogParser.SIGNED);
            }
          }

          this.state = 1165;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.LB) {
            {
              this.state = 1164;
              this.range_();
            }
          }

          this.state = 1167;
          this.list_of_param_assignments();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 1168;
          this.match(VerilogParser.LOCALPARAM);
          this.state = 1169;
          this.parameter_type();
          this.state = 1170;
          this.list_of_param_assignments();
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public parameter_declaration(): Parameter_declarationContext {
    let _localctx: Parameter_declarationContext = new Parameter_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 66, VerilogParser.RULE_parameter_declaration);
    let _la: number;
    try {
      this.state = 1186;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 55, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 1174;
          this.match(VerilogParser.PARAMETER);
          this.state = 1176;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.SIGNED) {
            {
              this.state = 1175;
              this.match(VerilogParser.SIGNED);
            }
          }

          this.state = 1179;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.LB) {
            {
              this.state = 1178;
              this.range_();
            }
          }

          this.state = 1181;
          this.list_of_param_assignments();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 1182;
          this.match(VerilogParser.PARAMETER);
          this.state = 1183;
          this.parameter_type();
          this.state = 1184;
          this.list_of_param_assignments();
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public specparam_declaration(): Specparam_declarationContext {
    let _localctx: Specparam_declarationContext = new Specparam_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 68, VerilogParser.RULE_specparam_declaration);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1188;
        this.match(VerilogParser.SPECPARAM);
        this.state = 1190;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.LB) {
          {
            this.state = 1189;
            this.range_();
          }
        }

        this.state = 1192;
        this.list_of_specparam_assignments();
        this.state = 1193;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public parameter_type(): Parameter_typeContext {
    let _localctx: Parameter_typeContext = new Parameter_typeContext(this._ctx, this.state);
    this.enterRule(_localctx, 70, VerilogParser.RULE_parameter_type);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1195;
        _la = this._input.LA(1);
        if (!(_la === VerilogParser.INTEGER || ((((_la - 93)) & ~0x1F) === 0 && ((1 << (_la - 93)) & ((1 << (VerilogParser.REAL - 93)) | (1 << (VerilogParser.REALTIME - 93)) | (1 << (VerilogParser.TIME - 93)))) !== 0))) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public inout_declaration(): Inout_declarationContext {
    let _localctx: Inout_declarationContext = new Inout_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 72, VerilogParser.RULE_inout_declaration);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1197;
        this.match(VerilogParser.INOUT);
        this.state = 1199;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (VerilogParser.SUPPLYONE - 111)) | (1 << (VerilogParser.SUPPLYZERO - 111)) | (1 << (VerilogParser.TRI - 111)) | (1 << (VerilogParser.TRIAND - 111)) | (1 << (VerilogParser.TRIONE - 111)) | (1 << (VerilogParser.TRIOR - 111)) | (1 << (VerilogParser.TRIZERO - 111)) | (1 << (VerilogParser.UWIRE - 111)) | (1 << (VerilogParser.WAND - 111)) | (1 << (VerilogParser.WIRE - 111)) | (1 << (VerilogParser.WOR - 111)))) !== 0)) {
          {
            this.state = 1198;
            this.net_type();
          }
        }

        this.state = 1202;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.SIGNED) {
          {
            this.state = 1201;
            this.match(VerilogParser.SIGNED);
          }
        }

        this.state = 1205;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.LB) {
          {
            this.state = 1204;
            this.range_();
          }
        }

        this.state = 1207;
        this.list_of_port_identifiers();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public input_declaration(): Input_declarationContext {
    let _localctx: Input_declarationContext = new Input_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 74, VerilogParser.RULE_input_declaration);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1209;
        this.match(VerilogParser.INPUT);
        this.state = 1211;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (VerilogParser.SUPPLYONE - 111)) | (1 << (VerilogParser.SUPPLYZERO - 111)) | (1 << (VerilogParser.TRI - 111)) | (1 << (VerilogParser.TRIAND - 111)) | (1 << (VerilogParser.TRIONE - 111)) | (1 << (VerilogParser.TRIOR - 111)) | (1 << (VerilogParser.TRIZERO - 111)) | (1 << (VerilogParser.UWIRE - 111)) | (1 << (VerilogParser.WAND - 111)) | (1 << (VerilogParser.WIRE - 111)) | (1 << (VerilogParser.WOR - 111)))) !== 0)) {
          {
            this.state = 1210;
            this.net_type();
          }
        }

        this.state = 1214;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.SIGNED) {
          {
            this.state = 1213;
            this.match(VerilogParser.SIGNED);
          }
        }

        this.state = 1217;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.LB) {
          {
            this.state = 1216;
            this.range_();
          }
        }

        this.state = 1219;
        this.list_of_port_identifiers();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public output_declaration(): Output_declarationContext {
    let _localctx: Output_declarationContext = new Output_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 76, VerilogParser.RULE_output_declaration);
    let _la: number;
    try {
      this.state = 1245;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 68, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 1221;
          this.match(VerilogParser.OUTPUT);
          this.state = 1223;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (VerilogParser.SUPPLYONE - 111)) | (1 << (VerilogParser.SUPPLYZERO - 111)) | (1 << (VerilogParser.TRI - 111)) | (1 << (VerilogParser.TRIAND - 111)) | (1 << (VerilogParser.TRIONE - 111)) | (1 << (VerilogParser.TRIOR - 111)) | (1 << (VerilogParser.TRIZERO - 111)) | (1 << (VerilogParser.UWIRE - 111)) | (1 << (VerilogParser.WAND - 111)) | (1 << (VerilogParser.WIRE - 111)) | (1 << (VerilogParser.WOR - 111)))) !== 0)) {
            {
              this.state = 1222;
              this.net_type();
            }
          }

          this.state = 1226;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.SIGNED) {
            {
              this.state = 1225;
              this.match(VerilogParser.SIGNED);
            }
          }

          this.state = 1229;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.LB) {
            {
              this.state = 1228;
              this.range_();
            }
          }

          this.state = 1231;
          this.list_of_port_identifiers();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 1232;
          this.match(VerilogParser.OUTPUT);
          this.state = 1233;
          this.match(VerilogParser.REG);
          this.state = 1235;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.SIGNED) {
            {
              this.state = 1234;
              this.match(VerilogParser.SIGNED);
            }
          }

          this.state = 1238;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.LB) {
            {
              this.state = 1237;
              this.range_();
            }
          }

          this.state = 1240;
          this.list_of_variable_port_identifiers();
        }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 1241;
          this.match(VerilogParser.OUTPUT);
          this.state = 1242;
          this.output_variable_type();
          this.state = 1243;
          this.list_of_variable_port_identifiers();
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public event_declaration(): Event_declarationContext {
    let _localctx: Event_declarationContext = new Event_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 78, VerilogParser.RULE_event_declaration);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1247;
        this.match(VerilogParser.EVENT);
        this.state = 1248;
        this.list_of_event_identifiers();
        this.state = 1249;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public integer_declaration(): Integer_declarationContext {
    let _localctx: Integer_declarationContext = new Integer_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 80, VerilogParser.RULE_integer_declaration);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1251;
        this.match(VerilogParser.INTEGER);
        this.state = 1252;
        this.list_of_variable_identifiers();
        this.state = 1253;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public net_declaration(): Net_declarationContext {
    let _localctx: Net_declarationContext = new Net_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 82, VerilogParser.RULE_net_declaration);
    let _la: number;
    try {
      this.state = 1369;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 95, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 1255;
          this.net_type();
          this.state = 1257;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.SIGNED) {
            {
              this.state = 1256;
              this.match(VerilogParser.SIGNED);
            }
          }

          this.state = 1260;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.HA) {
            {
              this.state = 1259;
              this.delay3();
            }
          }

          this.state = 1262;
          this.list_of_net_identifiers();
          this.state = 1263;
          this.match(VerilogParser.SC);
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 1265;
          this.net_type();
          this.state = 1267;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.LP) {
            {
              this.state = 1266;
              this.drive_strength();
            }
          }

          this.state = 1270;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.SIGNED) {
            {
              this.state = 1269;
              this.match(VerilogParser.SIGNED);
            }
          }

          this.state = 1273;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.HA) {
            {
              this.state = 1272;
              this.delay3();
            }
          }

          this.state = 1275;
          this.list_of_net_decl_assignments();
          this.state = 1276;
          this.match(VerilogParser.SC);
        }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 1278;
          this.net_type();
          this.state = 1280;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.SCALARED || _la === VerilogParser.VECTORED) {
            {
              this.state = 1279;
              _la = this._input.LA(1);
              if (!(_la === VerilogParser.SCALARED || _la === VerilogParser.VECTORED)) {
                this._errHandler.recoverInline(this);
              } else {
                if (this._input.LA(1) === Token.EOF) {
                  this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
              }
            }
          }

          this.state = 1283;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.SIGNED) {
            {
              this.state = 1282;
              this.match(VerilogParser.SIGNED);
            }
          }

          this.state = 1285;
          this.range_();
          this.state = 1287;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.HA) {
            {
              this.state = 1286;
              this.delay3();
            }
          }

          this.state = 1289;
          this.list_of_net_identifiers();
          this.state = 1290;
          this.match(VerilogParser.SC);
        }
          break;

        case 4:
          this.enterOuterAlt(_localctx, 4);
        {
          this.state = 1292;
          this.net_type();
          this.state = 1294;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.LP) {
            {
              this.state = 1293;
              this.drive_strength();
            }
          }

          this.state = 1297;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.SCALARED || _la === VerilogParser.VECTORED) {
            {
              this.state = 1296;
              _la = this._input.LA(1);
              if (!(_la === VerilogParser.SCALARED || _la === VerilogParser.VECTORED)) {
                this._errHandler.recoverInline(this);
              } else {
                if (this._input.LA(1) === Token.EOF) {
                  this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
              }
            }
          }

          this.state = 1300;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.SIGNED) {
            {
              this.state = 1299;
              this.match(VerilogParser.SIGNED);
            }
          }

          this.state = 1302;
          this.range_();
          this.state = 1304;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.HA) {
            {
              this.state = 1303;
              this.delay3();
            }
          }

          this.state = 1306;
          this.list_of_net_decl_assignments();
          this.state = 1307;
          this.match(VerilogParser.SC);
        }
          break;

        case 5:
          this.enterOuterAlt(_localctx, 5);
        {
          this.state = 1309;
          this.match(VerilogParser.TRIREG);
          this.state = 1311;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.LP) {
            {
              this.state = 1310;
              this.charge_strength();
            }
          }

          this.state = 1314;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.SIGNED) {
            {
              this.state = 1313;
              this.match(VerilogParser.SIGNED);
            }
          }

          this.state = 1317;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.HA) {
            {
              this.state = 1316;
              this.delay3();
            }
          }

          this.state = 1319;
          this.list_of_net_identifiers();
          this.state = 1320;
          this.match(VerilogParser.SC);
        }
          break;

        case 6:
          this.enterOuterAlt(_localctx, 6);
        {
          this.state = 1322;
          this.match(VerilogParser.TRIREG);
          this.state = 1324;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.LP) {
            {
              this.state = 1323;
              this.drive_strength();
            }
          }

          this.state = 1327;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.SIGNED) {
            {
              this.state = 1326;
              this.match(VerilogParser.SIGNED);
            }
          }

          this.state = 1330;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.HA) {
            {
              this.state = 1329;
              this.delay3();
            }
          }

          this.state = 1332;
          this.list_of_net_decl_assignments();
          this.state = 1333;
          this.match(VerilogParser.SC);
        }
          break;

        case 7:
          this.enterOuterAlt(_localctx, 7);
        {
          this.state = 1335;
          this.match(VerilogParser.TRIREG);
          this.state = 1337;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.LP) {
            {
              this.state = 1336;
              this.charge_strength();
            }
          }

          this.state = 1340;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.SCALARED || _la === VerilogParser.VECTORED) {
            {
              this.state = 1339;
              _la = this._input.LA(1);
              if (!(_la === VerilogParser.SCALARED || _la === VerilogParser.VECTORED)) {
                this._errHandler.recoverInline(this);
              } else {
                if (this._input.LA(1) === Token.EOF) {
                  this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
              }
            }
          }

          this.state = 1343;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.SIGNED) {
            {
              this.state = 1342;
              this.match(VerilogParser.SIGNED);
            }
          }

          this.state = 1345;
          this.range_();
          this.state = 1347;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.HA) {
            {
              this.state = 1346;
              this.delay3();
            }
          }

          this.state = 1349;
          this.list_of_net_identifiers();
          this.state = 1350;
          this.match(VerilogParser.SC);
        }
          break;

        case 8:
          this.enterOuterAlt(_localctx, 8);
        {
          this.state = 1352;
          this.match(VerilogParser.TRIREG);
          this.state = 1354;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.LP) {
            {
              this.state = 1353;
              this.drive_strength();
            }
          }

          this.state = 1357;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.SCALARED || _la === VerilogParser.VECTORED) {
            {
              this.state = 1356;
              _la = this._input.LA(1);
              if (!(_la === VerilogParser.SCALARED || _la === VerilogParser.VECTORED)) {
                this._errHandler.recoverInline(this);
              } else {
                if (this._input.LA(1) === Token.EOF) {
                  this.matchedEOF = true;
                }

                this._errHandler.reportMatch(this);
                this.consume();
              }
            }
          }

          this.state = 1360;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.SIGNED) {
            {
              this.state = 1359;
              this.match(VerilogParser.SIGNED);
            }
          }

          this.state = 1362;
          this.range_();
          this.state = 1364;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.HA) {
            {
              this.state = 1363;
              this.delay3();
            }
          }

          this.state = 1366;
          this.list_of_net_decl_assignments();
          this.state = 1367;
          this.match(VerilogParser.SC);
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public real_declaration(): Real_declarationContext {
    let _localctx: Real_declarationContext = new Real_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 84, VerilogParser.RULE_real_declaration);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1371;
        this.match(VerilogParser.REAL);
        this.state = 1372;
        this.list_of_real_identifiers();
        this.state = 1373;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public realtime_declaration(): Realtime_declarationContext {
    let _localctx: Realtime_declarationContext = new Realtime_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 86, VerilogParser.RULE_realtime_declaration);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1375;
        this.match(VerilogParser.REALTIME);
        this.state = 1376;
        this.list_of_real_identifiers();
        this.state = 1377;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public reg_declaration(): Reg_declarationContext {
    let _localctx: Reg_declarationContext = new Reg_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 88, VerilogParser.RULE_reg_declaration);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1379;
        this.match(VerilogParser.REG);
        this.state = 1381;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.SIGNED) {
          {
            this.state = 1380;
            this.match(VerilogParser.SIGNED);
          }
        }

        this.state = 1384;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.LB) {
          {
            this.state = 1383;
            this.range_();
          }
        }

        this.state = 1386;
        this.list_of_variable_identifiers();
        this.state = 1387;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public time_declaration(): Time_declarationContext {
    let _localctx: Time_declarationContext = new Time_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 90, VerilogParser.RULE_time_declaration);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1389;
        this.match(VerilogParser.TIME);
        this.state = 1390;
        this.list_of_variable_identifiers();
        this.state = 1391;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public net_type(): Net_typeContext {
    let _localctx: Net_typeContext = new Net_typeContext(this._ctx, this.state);
    this.enterRule(_localctx, 92, VerilogParser.RULE_net_type);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1393;
        _la = this._input.LA(1);
        if (!(((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (VerilogParser.SUPPLYONE - 111)) | (1 << (VerilogParser.SUPPLYZERO - 111)) | (1 << (VerilogParser.TRI - 111)) | (1 << (VerilogParser.TRIAND - 111)) | (1 << (VerilogParser.TRIONE - 111)) | (1 << (VerilogParser.TRIOR - 111)) | (1 << (VerilogParser.TRIZERO - 111)) | (1 << (VerilogParser.UWIRE - 111)) | (1 << (VerilogParser.WAND - 111)) | (1 << (VerilogParser.WIRE - 111)) | (1 << (VerilogParser.WOR - 111)))) !== 0))) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public output_variable_type(): Output_variable_typeContext {
    let _localctx: Output_variable_typeContext = new Output_variable_typeContext(this._ctx, this.state);
    this.enterRule(_localctx, 94, VerilogParser.RULE_output_variable_type);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1395;
        _la = this._input.LA(1);
        if (!(_la === VerilogParser.INTEGER || _la === VerilogParser.TIME)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public real_type(): Real_typeContext {
    let _localctx: Real_typeContext = new Real_typeContext(this._ctx, this.state);
    this.enterRule(_localctx, 96, VerilogParser.RULE_real_type);
    let _la: number;
    try {
      this.state = 1408;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 99, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 1397;
          this.real_identifier();
          this.state = 1401;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LB) {
            {
              {
                this.state = 1398;
                this.dimension();
              }
            }
            this.state = 1403;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 1404;
          this.real_identifier();
          this.state = 1405;
          this.match(VerilogParser.EQ);
          this.state = 1406;
          this.constant_expression(0);
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public variable_type(): Variable_typeContext {
    let _localctx: Variable_typeContext = new Variable_typeContext(this._ctx, this.state);
    this.enterRule(_localctx, 98, VerilogParser.RULE_variable_type);
    let _la: number;
    try {
      this.state = 1421;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 101, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 1410;
          this.variable_identifier();
          this.state = 1414;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LB) {
            {
              {
                this.state = 1411;
                this.dimension();
              }
            }
            this.state = 1416;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 1417;
          this.variable_identifier();
          this.state = 1418;
          this.match(VerilogParser.EQ);
          this.state = 1419;
          this.constant_expression(0);
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public drive_strength(): Drive_strengthContext {
    let _localctx: Drive_strengthContext = new Drive_strengthContext(this._ctx, this.state);
    this.enterRule(_localctx, 100, VerilogParser.RULE_drive_strength);
    try {
      this.state = 1459;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 102, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 1423;
          this.match(VerilogParser.LP);
          this.state = 1424;
          this.strength0();
          this.state = 1425;
          this.match(VerilogParser.CO);
          this.state = 1426;
          this.strength1();
          this.state = 1427;
          this.match(VerilogParser.RP);
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 1429;
          this.match(VerilogParser.LP);
          this.state = 1430;
          this.strength1();
          this.state = 1431;
          this.match(VerilogParser.CO);
          this.state = 1432;
          this.strength0();
          this.state = 1433;
          this.match(VerilogParser.RP);
        }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 1435;
          this.match(VerilogParser.LP);
          this.state = 1436;
          this.strength0();
          this.state = 1437;
          this.match(VerilogParser.CO);
          this.state = 1438;
          this.match(VerilogParser.HIGHZONE);
          this.state = 1439;
          this.match(VerilogParser.RP);
        }
          break;

        case 4:
          this.enterOuterAlt(_localctx, 4);
        {
          this.state = 1441;
          this.match(VerilogParser.LP);
          this.state = 1442;
          this.strength1();
          this.state = 1443;
          this.match(VerilogParser.CO);
          this.state = 1444;
          this.match(VerilogParser.HIGHZZERO);
          this.state = 1445;
          this.match(VerilogParser.RP);
        }
          break;

        case 5:
          this.enterOuterAlt(_localctx, 5);
        {
          this.state = 1447;
          this.match(VerilogParser.LP);
          this.state = 1448;
          this.match(VerilogParser.HIGHZZERO);
          this.state = 1449;
          this.match(VerilogParser.CO);
          this.state = 1450;
          this.strength1();
          this.state = 1451;
          this.match(VerilogParser.RP);
        }
          break;

        case 6:
          this.enterOuterAlt(_localctx, 6);
        {
          this.state = 1453;
          this.match(VerilogParser.LP);
          this.state = 1454;
          this.match(VerilogParser.HIGHZONE);
          this.state = 1455;
          this.match(VerilogParser.CO);
          this.state = 1456;
          this.strength0();
          this.state = 1457;
          this.match(VerilogParser.RP);
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public strength0(): Strength0Context {
    let _localctx: Strength0Context = new Strength0Context(this._ctx, this.state);
    this.enterRule(_localctx, 102, VerilogParser.RULE_strength0);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1461;
        _la = this._input.LA(1);
        if (!(((((_la - 89)) & ~0x1F) === 0 && ((1 << (_la - 89)) & ((1 << (VerilogParser.PULLZERO - 89)) | (1 << (VerilogParser.STRONGZERO - 89)) | (1 << (VerilogParser.SUPPLYZERO - 89)))) !== 0) || _la === VerilogParser.WEAKZERO)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public strength1(): Strength1Context {
    let _localctx: Strength1Context = new Strength1Context(this._ctx, this.state);
    this.enterRule(_localctx, 104, VerilogParser.RULE_strength1);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1463;
        _la = this._input.LA(1);
        if (!(((((_la - 87)) & ~0x1F) === 0 && ((1 << (_la - 87)) & ((1 << (VerilogParser.PULLONE - 87)) | (1 << (VerilogParser.STRONGONE - 87)) | (1 << (VerilogParser.SUPPLYONE - 87)))) !== 0) || _la === VerilogParser.WEAKONE)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public charge_strength(): Charge_strengthContext {
    let _localctx: Charge_strengthContext = new Charge_strengthContext(this._ctx, this.state);
    this.enterRule(_localctx, 106, VerilogParser.RULE_charge_strength);
    try {
      this.state = 1474;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 103, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 1465;
          this.match(VerilogParser.LP);
          this.state = 1466;
          this.match(VerilogParser.SMALL);
          this.state = 1467;
          this.match(VerilogParser.RP);
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 1468;
          this.match(VerilogParser.LP);
          this.state = 1469;
          this.match(VerilogParser.MEDIUM);
          this.state = 1470;
          this.match(VerilogParser.RP);
        }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 1471;
          this.match(VerilogParser.LP);
          this.state = 1472;
          this.match(VerilogParser.LARGE);
          this.state = 1473;
          this.match(VerilogParser.RP);
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public delay3(): Delay3Context {
    let _localctx: Delay3Context = new Delay3Context(this._ctx, this.state);
    this.enterRule(_localctx, 108, VerilogParser.RULE_delay3);
    let _la: number;
    try {
      this.state = 1491;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 106, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 1476;
          this.match(VerilogParser.HA);
          this.state = 1477;
          this.delay_value();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 1478;
          this.match(VerilogParser.HA);
          this.state = 1479;
          this.match(VerilogParser.LP);
          this.state = 1480;
          this.mintypmax_expression();
          this.state = 1487;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.CO) {
            {
              this.state = 1481;
              this.match(VerilogParser.CO);
              this.state = 1482;
              this.mintypmax_expression();
              this.state = 1485;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === VerilogParser.CO) {
                {
                  this.state = 1483;
                  this.match(VerilogParser.CO);
                  this.state = 1484;
                  this.mintypmax_expression();
                }
              }

            }
          }

          this.state = 1489;
          this.match(VerilogParser.RP);
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public delay2(): Delay2Context {
    let _localctx: Delay2Context = new Delay2Context(this._ctx, this.state);
    this.enterRule(_localctx, 110, VerilogParser.RULE_delay2);
    let _la: number;
    try {
      this.state = 1504;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 108, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 1493;
          this.match(VerilogParser.HA);
          this.state = 1494;
          this.delay_value();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 1495;
          this.match(VerilogParser.HA);
          this.state = 1496;
          this.match(VerilogParser.LP);
          this.state = 1497;
          this.mintypmax_expression();
          this.state = 1500;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.CO) {
            {
              this.state = 1498;
              this.match(VerilogParser.CO);
              this.state = 1499;
              this.mintypmax_expression();
            }
          }

          this.state = 1502;
          this.match(VerilogParser.RP);
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public delay_value(): Delay_valueContext {
    let _localctx: Delay_valueContext = new Delay_valueContext(this._ctx, this.state);
    this.enterRule(_localctx, 112, VerilogParser.RULE_delay_value);
    try {
      this.state = 1509;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.UNSIGNED_NUMBER:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 1506;
          this.unsigned_number();
        }
          break;
        case VerilogParser.EXPONENTIAL_NUMBER:
        case VerilogParser.FIXED_POINT_NUMBER:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 1507;
          this.real_number();
        }
          break;
        case VerilogParser.ESCAPED_IDENTIFIER:
        case VerilogParser.SIMPLE_IDENTIFIER:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 1508;
          this.identifier();
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public list_of_defparam_assignments(): List_of_defparam_assignmentsContext {
    let _localctx: List_of_defparam_assignmentsContext = new List_of_defparam_assignmentsContext(this._ctx, this.state);
    this.enterRule(_localctx, 114, VerilogParser.RULE_list_of_defparam_assignments);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1511;
        this.defparam_assignment();
        this.state = 1516;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 1512;
              this.match(VerilogParser.CO);
              this.state = 1513;
              this.defparam_assignment();
            }
          }
          this.state = 1518;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public list_of_event_identifiers(): List_of_event_identifiersContext {
    let _localctx: List_of_event_identifiersContext = new List_of_event_identifiersContext(this._ctx, this.state);
    this.enterRule(_localctx, 116, VerilogParser.RULE_list_of_event_identifiers);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1519;
        this.event_id();
        this.state = 1524;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 1520;
              this.match(VerilogParser.CO);
              this.state = 1521;
              this.event_id();
            }
          }
          this.state = 1526;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public event_id(): Event_idContext {
    let _localctx: Event_idContext = new Event_idContext(this._ctx, this.state);
    this.enterRule(_localctx, 118, VerilogParser.RULE_event_id);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1527;
        this.event_identifier();
        this.state = 1531;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.LB) {
          {
            {
              this.state = 1528;
              this.dimension();
            }
          }
          this.state = 1533;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public list_of_net_decl_assignments(): List_of_net_decl_assignmentsContext {
    let _localctx: List_of_net_decl_assignmentsContext = new List_of_net_decl_assignmentsContext(this._ctx, this.state);
    this.enterRule(_localctx, 120, VerilogParser.RULE_list_of_net_decl_assignments);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1534;
        this.net_decl_assignment();
        this.state = 1539;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 1535;
              this.match(VerilogParser.CO);
              this.state = 1536;
              this.net_decl_assignment();
            }
          }
          this.state = 1541;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public list_of_net_identifiers(): List_of_net_identifiersContext {
    let _localctx: List_of_net_identifiersContext = new List_of_net_identifiersContext(this._ctx, this.state);
    this.enterRule(_localctx, 122, VerilogParser.RULE_list_of_net_identifiers);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1542;
        this.net_id();
        this.state = 1547;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 1543;
              this.match(VerilogParser.CO);
              this.state = 1544;
              this.net_id();
            }
          }
          this.state = 1549;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public net_id(): Net_idContext {
    let _localctx: Net_idContext = new Net_idContext(this._ctx, this.state);
    this.enterRule(_localctx, 124, VerilogParser.RULE_net_id);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1550;
        this.net_identifier();
        this.state = 1554;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.LB) {
          {
            {
              this.state = 1551;
              this.dimension();
            }
          }
          this.state = 1556;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public list_of_param_assignments(): List_of_param_assignmentsContext {
    let _localctx: List_of_param_assignmentsContext = new List_of_param_assignmentsContext(this._ctx, this.state);
    this.enterRule(_localctx, 126, VerilogParser.RULE_list_of_param_assignments);
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1557;
        this.param_assignment();
        this.state = 1562;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 116, this._ctx);
        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 1558;
                this.match(VerilogParser.CO);
                this.state = 1559;
                this.param_assignment();
              }
            }
          }
          this.state = 1564;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 116, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public list_of_port_identifiers(): List_of_port_identifiersContext {
    let _localctx: List_of_port_identifiersContext = new List_of_port_identifiersContext(this._ctx, this.state);
    this.enterRule(_localctx, 128, VerilogParser.RULE_list_of_port_identifiers);
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1565;
        this.port_identifier();
        this.state = 1570;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 117, this._ctx);
        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 1566;
                this.match(VerilogParser.CO);
                this.state = 1567;
                this.port_identifier();
              }
            }
          }
          this.state = 1572;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 117, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public list_of_real_identifiers(): List_of_real_identifiersContext {
    let _localctx: List_of_real_identifiersContext = new List_of_real_identifiersContext(this._ctx, this.state);
    this.enterRule(_localctx, 130, VerilogParser.RULE_list_of_real_identifiers);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1573;
        this.real_type();
        this.state = 1578;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 1574;
              this.match(VerilogParser.CO);
              this.state = 1575;
              this.real_type();
            }
          }
          this.state = 1580;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public list_of_specparam_assignments(): List_of_specparam_assignmentsContext {
    let _localctx: List_of_specparam_assignmentsContext = new List_of_specparam_assignmentsContext(this._ctx, this.state);
    this.enterRule(_localctx, 132, VerilogParser.RULE_list_of_specparam_assignments);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1581;
        this.specparam_assignment();
        this.state = 1586;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 1582;
              this.match(VerilogParser.CO);
              this.state = 1583;
              this.specparam_assignment();
            }
          }
          this.state = 1588;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public list_of_variable_identifiers(): List_of_variable_identifiersContext {
    let _localctx: List_of_variable_identifiersContext = new List_of_variable_identifiersContext(this._ctx, this.state);
    this.enterRule(_localctx, 134, VerilogParser.RULE_list_of_variable_identifiers);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1589;
        this.variable_type();
        this.state = 1594;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 1590;
              this.match(VerilogParser.CO);
              this.state = 1591;
              this.variable_type();
            }
          }
          this.state = 1596;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public list_of_variable_port_identifiers(): List_of_variable_port_identifiersContext {
    let _localctx: List_of_variable_port_identifiersContext = new List_of_variable_port_identifiersContext(this._ctx, this.state);
    this.enterRule(_localctx, 136, VerilogParser.RULE_list_of_variable_port_identifiers);
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1597;
        this.var_port_id();
        this.state = 1602;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 121, this._ctx);
        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 1598;
                this.match(VerilogParser.CO);
                this.state = 1599;
                this.var_port_id();
              }
            }
          }
          this.state = 1604;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 121, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public var_port_id(): Var_port_idContext {
    let _localctx: Var_port_idContext = new Var_port_idContext(this._ctx, this.state);
    this.enterRule(_localctx, 138, VerilogParser.RULE_var_port_id);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1605;
        this.port_identifier();
        this.state = 1608;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.EQ) {
          {
            this.state = 1606;
            this.match(VerilogParser.EQ);
            this.state = 1607;
            this.constant_expression(0);
          }
        }

      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public defparam_assignment(): Defparam_assignmentContext {
    let _localctx: Defparam_assignmentContext = new Defparam_assignmentContext(this._ctx, this.state);
    this.enterRule(_localctx, 140, VerilogParser.RULE_defparam_assignment);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1610;
        this.hierarchical_identifier();
        this.state = 1611;
        this.match(VerilogParser.EQ);
        this.state = 1612;
        this.constant_mintypmax_expression();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public net_decl_assignment(): Net_decl_assignmentContext {
    let _localctx: Net_decl_assignmentContext = new Net_decl_assignmentContext(this._ctx, this.state);
    this.enterRule(_localctx, 142, VerilogParser.RULE_net_decl_assignment);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1614;
        this.net_identifier();
        this.state = 1615;
        this.match(VerilogParser.EQ);
        this.state = 1616;
        this.expression(0);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public param_assignment(): Param_assignmentContext {
    let _localctx: Param_assignmentContext = new Param_assignmentContext(this._ctx, this.state);
    this.enterRule(_localctx, 144, VerilogParser.RULE_param_assignment);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1618;
        this.parameter_identifier();
        this.state = 1619;
        this.match(VerilogParser.EQ);
        this.state = 1620;
        this.constant_mintypmax_expression();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public specparam_assignment(): Specparam_assignmentContext {
    let _localctx: Specparam_assignmentContext = new Specparam_assignmentContext(this._ctx, this.state);
    this.enterRule(_localctx, 146, VerilogParser.RULE_specparam_assignment);
    try {
      this.state = 1627;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.ESCAPED_IDENTIFIER:
        case VerilogParser.SIMPLE_IDENTIFIER:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 1622;
          this.specparam_identifier();
          this.state = 1623;
          this.match(VerilogParser.EQ);
          this.state = 1624;
          this.constant_mintypmax_expression();
        }
          break;
        case VerilogParser.PATHPULSEDL:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 1626;
          this.pulse_control_specparam();
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public pulse_control_specparam(): Pulse_control_specparamContext {
    let _localctx: Pulse_control_specparamContext = new Pulse_control_specparamContext(this._ctx, this.state);
    this.enterRule(_localctx, 148, VerilogParser.RULE_pulse_control_specparam);
    let _la: number;
    try {
      this.state = 1652;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 126, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 1629;
          this.match(VerilogParser.PATHPULSEDL);
          this.state = 1630;
          this.match(VerilogParser.EQ);
          this.state = 1631;
          this.match(VerilogParser.LP);
          this.state = 1632;
          this.reject_limit_value();
          this.state = 1635;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.CO) {
            {
              this.state = 1633;
              this.match(VerilogParser.CO);
              this.state = 1634;
              this.error_limit_value();
            }
          }

          this.state = 1637;
          this.match(VerilogParser.RP);
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 1639;
          this.match(VerilogParser.PATHPULSEDL);
          this.state = 1640;
          this.specify_input_terminal_descriptor();
          this.state = 1641;
          this.match(VerilogParser.DL);
          this.state = 1642;
          this.specify_output_terminal_descriptor();
          this.state = 1643;
          this.match(VerilogParser.EQ);
          this.state = 1644;
          this.match(VerilogParser.LP);
          this.state = 1645;
          this.reject_limit_value();
          this.state = 1648;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.CO) {
            {
              this.state = 1646;
              this.match(VerilogParser.CO);
              this.state = 1647;
              this.error_limit_value();
            }
          }

          this.state = 1650;
          this.match(VerilogParser.RP);
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public error_limit_value(): Error_limit_valueContext {
    let _localctx: Error_limit_valueContext = new Error_limit_valueContext(this._ctx, this.state);
    this.enterRule(_localctx, 150, VerilogParser.RULE_error_limit_value);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1654;
        this.limit_value();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public reject_limit_value(): Reject_limit_valueContext {
    let _localctx: Reject_limit_valueContext = new Reject_limit_valueContext(this._ctx, this.state);
    this.enterRule(_localctx, 152, VerilogParser.RULE_reject_limit_value);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1656;
        this.limit_value();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public limit_value(): Limit_valueContext {
    let _localctx: Limit_valueContext = new Limit_valueContext(this._ctx, this.state);
    this.enterRule(_localctx, 154, VerilogParser.RULE_limit_value);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1658;
        this.constant_mintypmax_expression();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public dimension(): DimensionContext {
    let _localctx: DimensionContext = new DimensionContext(this._ctx, this.state);
    this.enterRule(_localctx, 156, VerilogParser.RULE_dimension);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1660;
        this.match(VerilogParser.LB);
        this.state = 1661;
        this.dimension_constant_expression();
        this.state = 1662;
        this.match(VerilogParser.CL);
        this.state = 1663;
        this.dimension_constant_expression();
        this.state = 1664;
        this.match(VerilogParser.RB);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public range_(): Range_Context {
    let _localctx: Range_Context = new Range_Context(this._ctx, this.state);
    this.enterRule(_localctx, 158, VerilogParser.RULE_range_);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1666;
        this.match(VerilogParser.LB);
        this.state = 1667;
        this.msb_constant_expression();
        this.state = 1668;
        this.match(VerilogParser.CL);
        this.state = 1669;
        this.lsb_constant_expression();
        this.state = 1670;
        this.match(VerilogParser.RB);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public function_declaration(): Function_declarationContext {
    let _localctx: Function_declarationContext = new Function_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 160, VerilogParser.RULE_function_declaration);
    let _la: number;
    try {
      let _alt: number;
      this.state = 1710;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 133, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 1672;
          this.match(VerilogParser.FUNCTION);
          this.state = 1674;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.AUTOMATIC) {
            {
              this.state = 1673;
              this.match(VerilogParser.AUTOMATIC);
            }
          }

          this.state = 1677;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.INTEGER || ((((_la - 93)) & ~0x1F) === 0 && ((1 << (_la - 93)) & ((1 << (VerilogParser.REAL - 93)) | (1 << (VerilogParser.REALTIME - 93)) | (1 << (VerilogParser.SIGNED - 93)) | (1 << (VerilogParser.TIME - 93)))) !== 0) || _la === VerilogParser.LB) {
            {
              this.state = 1676;
              this.function_range_or_type();
            }
          }

          this.state = 1679;
          this.function_identifier();
          this.state = 1680;
          this.match(VerilogParser.SC);
          this.state = 1682;
          this._errHandler.sync(this);
          _alt = 1;
          do {
            switch (_alt) {
              case 1: {
                {
                  this.state = 1681;
                  this.function_item_declaration();
                }
              }
                break;
              default:
                throw new NoViableAltException(this);
            }
            this.state = 1684;
            this._errHandler.sync(this);
            _alt = this.interpreter.adaptivePredict(this._input, 129, this._ctx);
          } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
          this.state = 1686;
          this.function_statement();
          this.state = 1687;
          this.match(VerilogParser.ENDFUNCTION);
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 1689;
          this.match(VerilogParser.FUNCTION);
          this.state = 1691;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.AUTOMATIC) {
            {
              this.state = 1690;
              this.match(VerilogParser.AUTOMATIC);
            }
          }

          this.state = 1694;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.INTEGER || ((((_la - 93)) & ~0x1F) === 0 && ((1 << (_la - 93)) & ((1 << (VerilogParser.REAL - 93)) | (1 << (VerilogParser.REALTIME - 93)) | (1 << (VerilogParser.SIGNED - 93)) | (1 << (VerilogParser.TIME - 93)))) !== 0) || _la === VerilogParser.LB) {
            {
              this.state = 1693;
              this.function_range_or_type();
            }
          }

          this.state = 1696;
          this.function_identifier();
          this.state = 1697;
          this.match(VerilogParser.LP);
          this.state = 1698;
          this.function_port_list();
          this.state = 1699;
          this.match(VerilogParser.RP);
          this.state = 1700;
          this.match(VerilogParser.SC);
          this.state = 1704;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 132, this._ctx);
          while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              {
                {
                  this.state = 1701;
                  this.block_item_declaration();
                }
              }
            }
            this.state = 1706;
            this._errHandler.sync(this);
            _alt = this.interpreter.adaptivePredict(this._input, 132, this._ctx);
          }
          this.state = 1707;
          this.function_statement();
          this.state = 1708;
          this.match(VerilogParser.ENDFUNCTION);
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public function_item_declaration(): Function_item_declarationContext {
    let _localctx: Function_item_declarationContext = new Function_item_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 162, VerilogParser.RULE_function_item_declaration);
    let _la: number;
    try {
      this.state = 1722;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 135, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 1712;
          this.block_item_declaration();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 1716;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 1713;
                this.attribute_instance();
              }
            }
            this.state = 1718;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1719;
          this.tf_input_declaration();
          this.state = 1720;
          this.match(VerilogParser.SC);
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public function_port_list(): Function_port_listContext {
    let _localctx: Function_port_listContext = new Function_port_listContext(this._ctx, this.state);
    this.enterRule(_localctx, 164, VerilogParser.RULE_function_port_list);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1724;
        this.func_port_item();
        this.state = 1729;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 1725;
              this.match(VerilogParser.CO);
              this.state = 1726;
              this.func_port_item();
            }
          }
          this.state = 1731;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public func_port_item(): Func_port_itemContext {
    let _localctx: Func_port_itemContext = new Func_port_itemContext(this._ctx, this.state);
    this.enterRule(_localctx, 166, VerilogParser.RULE_func_port_item);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1735;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.LP) {
          {
            {
              this.state = 1732;
              this.attribute_instance();
            }
          }
          this.state = 1737;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 1738;
        this.tf_input_declaration();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public function_range_or_type(): Function_range_or_typeContext {
    let _localctx: Function_range_or_typeContext = new Function_range_or_typeContext(this._ctx, this.state);
    this.enterRule(_localctx, 168, VerilogParser.RULE_function_range_or_type);
    let _la: number;
    try {
      this.state = 1749;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.LB:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 1740;
          this.range_();
        }
          break;
        case VerilogParser.SIGNED:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 1741;
          this.match(VerilogParser.SIGNED);
          this.state = 1743;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.LB) {
            {
              this.state = 1742;
              this.range_();
            }
          }

        }
          break;
        case VerilogParser.INTEGER:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 1745;
          this.match(VerilogParser.INTEGER);
        }
          break;
        case VerilogParser.REAL:
          this.enterOuterAlt(_localctx, 4);
        {
          this.state = 1746;
          this.match(VerilogParser.REAL);
        }
          break;
        case VerilogParser.REALTIME:
          this.enterOuterAlt(_localctx, 5);
        {
          this.state = 1747;
          this.match(VerilogParser.REALTIME);
        }
          break;
        case VerilogParser.TIME:
          this.enterOuterAlt(_localctx, 6);
        {
          this.state = 1748;
          this.match(VerilogParser.TIME);
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public task_declaration(): Task_declarationContext {
    let _localctx: Task_declarationContext = new Task_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 170, VerilogParser.RULE_task_declaration);
    let _la: number;
    try {
      let _alt: number;
      this.state = 1786;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 145, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 1751;
          this.match(VerilogParser.TASK);
          this.state = 1753;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.AUTOMATIC) {
            {
              this.state = 1752;
              this.match(VerilogParser.AUTOMATIC);
            }
          }

          this.state = 1755;
          this.task_identifier();
          this.state = 1756;
          this.match(VerilogParser.SC);
          this.state = 1760;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 141, this._ctx);
          while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              {
                {
                  this.state = 1757;
                  this.task_item_declaration();
                }
              }
            }
            this.state = 1762;
            this._errHandler.sync(this);
            _alt = this.interpreter.adaptivePredict(this._input, 141, this._ctx);
          }
          this.state = 1763;
          this.statement_or_null();
          this.state = 1764;
          this.match(VerilogParser.ENDTASK);
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 1766;
          this.match(VerilogParser.TASK);
          this.state = 1768;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.AUTOMATIC) {
            {
              this.state = 1767;
              this.match(VerilogParser.AUTOMATIC);
            }
          }

          this.state = 1770;
          this.task_identifier();
          this.state = 1771;
          this.match(VerilogParser.LP);
          this.state = 1773;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (((((_la - 58)) & ~0x1F) === 0 && ((1 << (_la - 58)) & ((1 << (VerilogParser.INOUT - 58)) | (1 << (VerilogParser.INPUT - 58)) | (1 << (VerilogParser.OUTPUT - 58)))) !== 0) || _la === VerilogParser.LP) {
            {
              this.state = 1772;
              this.task_port_list();
            }
          }

          this.state = 1775;
          this.match(VerilogParser.RP);
          this.state = 1776;
          this.match(VerilogParser.SC);
          this.state = 1780;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 144, this._ctx);
          while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              {
                {
                  this.state = 1777;
                  this.block_item_declaration();
                }
              }
            }
            this.state = 1782;
            this._errHandler.sync(this);
            _alt = this.interpreter.adaptivePredict(this._input, 144, this._ctx);
          }
          this.state = 1783;
          this.statement_or_null();
          this.state = 1784;
          this.match(VerilogParser.ENDTASK);
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public task_item_declaration(): Task_item_declarationContext {
    let _localctx: Task_item_declarationContext = new Task_item_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 172, VerilogParser.RULE_task_item_declaration);
    let _la: number;
    try {
      this.state = 1816;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 149, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 1788;
          this.block_item_declaration();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 1792;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 1789;
                this.attribute_instance();
              }
            }
            this.state = 1794;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1795;
          this.tf_input_declaration();
          this.state = 1796;
          this.match(VerilogParser.SC);
        }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 1801;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 1798;
                this.attribute_instance();
              }
            }
            this.state = 1803;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1804;
          this.tf_output_declaration();
          this.state = 1805;
          this.match(VerilogParser.SC);
        }
          break;

        case 4:
          this.enterOuterAlt(_localctx, 4);
        {
          this.state = 1810;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 1807;
                this.attribute_instance();
              }
            }
            this.state = 1812;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1813;
          this.tf_inout_declaration();
          this.state = 1814;
          this.match(VerilogParser.SC);
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public task_port_list(): Task_port_listContext {
    let _localctx: Task_port_listContext = new Task_port_listContext(this._ctx, this.state);
    this.enterRule(_localctx, 174, VerilogParser.RULE_task_port_list);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1818;
        this.task_port_item();
        this.state = 1823;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 1819;
              this.match(VerilogParser.CO);
              this.state = 1820;
              this.task_port_item();
            }
          }
          this.state = 1825;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public task_port_item(): Task_port_itemContext {
    let _localctx: Task_port_itemContext = new Task_port_itemContext(this._ctx, this.state);
    this.enterRule(_localctx, 176, VerilogParser.RULE_task_port_item);
    let _la: number;
    try {
      this.state = 1847;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 154, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 1829;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 1826;
                this.attribute_instance();
              }
            }
            this.state = 1831;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1832;
          this.tf_input_declaration();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 1836;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 1833;
                this.attribute_instance();
              }
            }
            this.state = 1838;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1839;
          this.tf_output_declaration();
        }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 1843;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 1840;
                this.attribute_instance();
              }
            }
            this.state = 1845;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1846;
          this.tf_inout_declaration();
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public tf_input_declaration(): Tf_input_declarationContext {
    let _localctx: Tf_input_declarationContext = new Tf_input_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 178, VerilogParser.RULE_tf_input_declaration);
    let _la: number;
    try {
      this.state = 1864;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 158, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 1849;
          this.match(VerilogParser.INPUT);
          this.state = 1851;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.REG) {
            {
              this.state = 1850;
              this.match(VerilogParser.REG);
            }
          }

          this.state = 1854;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.SIGNED) {
            {
              this.state = 1853;
              this.match(VerilogParser.SIGNED);
            }
          }

          this.state = 1857;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.LB) {
            {
              this.state = 1856;
              this.range_();
            }
          }

          this.state = 1859;
          this.list_of_port_identifiers();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 1860;
          this.match(VerilogParser.INPUT);
          this.state = 1861;
          this.task_port_type();
          this.state = 1862;
          this.list_of_port_identifiers();
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public tf_output_declaration(): Tf_output_declarationContext {
    let _localctx: Tf_output_declarationContext = new Tf_output_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 180, VerilogParser.RULE_tf_output_declaration);
    let _la: number;
    try {
      this.state = 1881;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 162, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 1866;
          this.match(VerilogParser.OUTPUT);
          this.state = 1868;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.REG) {
            {
              this.state = 1867;
              this.match(VerilogParser.REG);
            }
          }

          this.state = 1871;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.SIGNED) {
            {
              this.state = 1870;
              this.match(VerilogParser.SIGNED);
            }
          }

          this.state = 1874;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.LB) {
            {
              this.state = 1873;
              this.range_();
            }
          }

          this.state = 1876;
          this.list_of_port_identifiers();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 1877;
          this.match(VerilogParser.OUTPUT);
          this.state = 1878;
          this.task_port_type();
          this.state = 1879;
          this.list_of_port_identifiers();
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public tf_inout_declaration(): Tf_inout_declarationContext {
    let _localctx: Tf_inout_declarationContext = new Tf_inout_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 182, VerilogParser.RULE_tf_inout_declaration);
    let _la: number;
    try {
      this.state = 1898;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 166, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 1883;
          this.match(VerilogParser.INOUT);
          this.state = 1885;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.REG) {
            {
              this.state = 1884;
              this.match(VerilogParser.REG);
            }
          }

          this.state = 1888;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.SIGNED) {
            {
              this.state = 1887;
              this.match(VerilogParser.SIGNED);
            }
          }

          this.state = 1891;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.LB) {
            {
              this.state = 1890;
              this.range_();
            }
          }

          this.state = 1893;
          this.list_of_port_identifiers();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 1894;
          this.match(VerilogParser.INOUT);
          this.state = 1895;
          this.task_port_type();
          this.state = 1896;
          this.list_of_port_identifiers();
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public task_port_type(): Task_port_typeContext {
    let _localctx: Task_port_typeContext = new Task_port_typeContext(this._ctx, this.state);
    this.enterRule(_localctx, 184, VerilogParser.RULE_task_port_type);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1900;
        _la = this._input.LA(1);
        if (!(_la === VerilogParser.INTEGER || ((((_la - 93)) & ~0x1F) === 0 && ((1 << (_la - 93)) & ((1 << (VerilogParser.REAL - 93)) | (1 << (VerilogParser.REALTIME - 93)) | (1 << (VerilogParser.TIME - 93)))) !== 0))) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public block_item_declaration(): Block_item_declarationContext {
    let _localctx: Block_item_declarationContext = new Block_item_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 186, VerilogParser.RULE_block_item_declaration);
    let _la: number;
    try {
      this.state = 1983;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 177, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 1905;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 1902;
                this.attribute_instance();
              }
            }
            this.state = 1907;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1908;
          this.match(VerilogParser.REG);
          this.state = 1910;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.SIGNED) {
            {
              this.state = 1909;
              this.match(VerilogParser.SIGNED);
            }
          }

          this.state = 1913;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.LB) {
            {
              this.state = 1912;
              this.range_();
            }
          }

          this.state = 1915;
          this.list_of_block_variable_identifiers();
          this.state = 1916;
          this.match(VerilogParser.SC);
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 1921;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 1918;
                this.attribute_instance();
              }
            }
            this.state = 1923;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1924;
          this.match(VerilogParser.INTEGER);
          this.state = 1925;
          this.list_of_block_variable_identifiers();
          this.state = 1926;
          this.match(VerilogParser.SC);
        }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 1931;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 1928;
                this.attribute_instance();
              }
            }
            this.state = 1933;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1934;
          this.match(VerilogParser.TIME);
          this.state = 1935;
          this.list_of_block_variable_identifiers();
          this.state = 1936;
          this.match(VerilogParser.SC);
        }
          break;

        case 4:
          this.enterOuterAlt(_localctx, 4);
        {
          this.state = 1941;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 1938;
                this.attribute_instance();
              }
            }
            this.state = 1943;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1944;
          this.match(VerilogParser.REAL);
          this.state = 1945;
          this.list_of_block_real_identifiers();
          this.state = 1946;
          this.match(VerilogParser.SC);
        }
          break;

        case 5:
          this.enterOuterAlt(_localctx, 5);
        {
          this.state = 1951;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 1948;
                this.attribute_instance();
              }
            }
            this.state = 1953;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1954;
          this.match(VerilogParser.REALTIME);
          this.state = 1955;
          this.list_of_block_real_identifiers();
          this.state = 1956;
          this.match(VerilogParser.SC);
        }
          break;

        case 6:
          this.enterOuterAlt(_localctx, 6);
        {
          this.state = 1961;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 1958;
                this.attribute_instance();
              }
            }
            this.state = 1963;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1964;
          this.event_declaration();
        }
          break;

        case 7:
          this.enterOuterAlt(_localctx, 7);
        {
          this.state = 1968;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 1965;
                this.attribute_instance();
              }
            }
            this.state = 1970;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1971;
          this.local_parameter_declaration();
          this.state = 1972;
          this.match(VerilogParser.SC);
        }
          break;

        case 8:
          this.enterOuterAlt(_localctx, 8);
        {
          this.state = 1977;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 1974;
                this.attribute_instance();
              }
            }
            this.state = 1979;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1980;
          this.parameter_declaration();
          this.state = 1981;
          this.match(VerilogParser.SC);
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public list_of_block_variable_identifiers(): List_of_block_variable_identifiersContext {
    let _localctx: List_of_block_variable_identifiersContext = new List_of_block_variable_identifiersContext(this._ctx, this.state);
    this.enterRule(_localctx, 188, VerilogParser.RULE_list_of_block_variable_identifiers);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1985;
        this.block_variable_type();
        this.state = 1990;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 1986;
              this.match(VerilogParser.CO);
              this.state = 1987;
              this.block_variable_type();
            }
          }
          this.state = 1992;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public list_of_block_real_identifiers(): List_of_block_real_identifiersContext {
    let _localctx: List_of_block_real_identifiersContext = new List_of_block_real_identifiersContext(this._ctx, this.state);
    this.enterRule(_localctx, 190, VerilogParser.RULE_list_of_block_real_identifiers);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 1993;
        this.block_real_type();
        this.state = 1998;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 1994;
              this.match(VerilogParser.CO);
              this.state = 1995;
              this.block_real_type();
            }
          }
          this.state = 2000;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public block_variable_type(): Block_variable_typeContext {
    let _localctx: Block_variable_typeContext = new Block_variable_typeContext(this._ctx, this.state);
    this.enterRule(_localctx, 192, VerilogParser.RULE_block_variable_type);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2001;
        this.variable_identifier();
        this.state = 2005;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.LB) {
          {
            {
              this.state = 2002;
              this.dimension();
            }
          }
          this.state = 2007;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public block_real_type(): Block_real_typeContext {
    let _localctx: Block_real_typeContext = new Block_real_typeContext(this._ctx, this.state);
    this.enterRule(_localctx, 194, VerilogParser.RULE_block_real_type);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2008;
        this.real_identifier();
        this.state = 2012;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.LB) {
          {
            {
              this.state = 2009;
              this.dimension();
            }
          }
          this.state = 2014;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public gate_instantiation(): Gate_instantiationContext {
    let _localctx: Gate_instantiationContext = new Gate_instantiationContext(this._ctx, this.state);
    this.enterRule(_localctx, 196, VerilogParser.RULE_gate_instantiation);
    let _la: number;
    try {
      this.state = 2147;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.CMOS:
        case VerilogParser.RCMOS:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 2015;
          this.cmos_switchtype();
          this.state = 2017;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.HA) {
            {
              this.state = 2016;
              this.delay3();
            }
          }

          this.state = 2019;
          this.cmos_switch_instance();
          this.state = 2024;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.CO) {
            {
              {
                this.state = 2020;
                this.match(VerilogParser.CO);
                this.state = 2021;
                this.cmos_switch_instance();
              }
            }
            this.state = 2026;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2027;
          this.match(VerilogParser.SC);
        }
          break;
        case VerilogParser.BUFIFONE:
        case VerilogParser.BUFIFZERO:
        case VerilogParser.NOTIFONE:
        case VerilogParser.NOTIFZERO:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 2029;
          this.enable_gatetype();
          this.state = 2031;
          this._errHandler.sync(this);
          switch (this.interpreter.adaptivePredict(this._input, 184, this._ctx)) {
            case 1: {
              this.state = 2030;
              this.drive_strength();
            }
              break;
          }
          this.state = 2034;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.HA) {
            {
              this.state = 2033;
              this.delay3();
            }
          }

          this.state = 2036;
          this.enable_gate_instance();
          this.state = 2041;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.CO) {
            {
              {
                this.state = 2037;
                this.match(VerilogParser.CO);
                this.state = 2038;
                this.enable_gate_instance();
              }
            }
            this.state = 2043;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2044;
          this.match(VerilogParser.SC);
        }
          break;
        case VerilogParser.NMOS:
        case VerilogParser.PMOS:
        case VerilogParser.RNMOS:
        case VerilogParser.RPMOS:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 2046;
          this.mos_switchtype();
          this.state = 2048;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.HA) {
            {
              this.state = 2047;
              this.delay3();
            }
          }

          this.state = 2050;
          this.mos_switch_instance();
          this.state = 2055;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.CO) {
            {
              {
                this.state = 2051;
                this.match(VerilogParser.CO);
                this.state = 2052;
                this.mos_switch_instance();
              }
            }
            this.state = 2057;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2058;
          this.match(VerilogParser.SC);
        }
          break;
        case VerilogParser.AND:
        case VerilogParser.NAND:
        case VerilogParser.NOR:
        case VerilogParser.OR:
        case VerilogParser.XNOR:
        case VerilogParser.XOR:
          this.enterOuterAlt(_localctx, 4);
        {
          this.state = 2060;
          this.n_input_gatetype();
          this.state = 2062;
          this._errHandler.sync(this);
          switch (this.interpreter.adaptivePredict(this._input, 189, this._ctx)) {
            case 1: {
              this.state = 2061;
              this.drive_strength();
            }
              break;
          }
          this.state = 2065;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.HA) {
            {
              this.state = 2064;
              this.delay2();
            }
          }

          this.state = 2067;
          this.n_input_gate_instance();
          this.state = 2072;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.CO) {
            {
              {
                this.state = 2068;
                this.match(VerilogParser.CO);
                this.state = 2069;
                this.n_input_gate_instance();
              }
            }
            this.state = 2074;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2075;
          this.match(VerilogParser.SC);
        }
          break;
        case VerilogParser.BUF:
        case VerilogParser.NOT:
          this.enterOuterAlt(_localctx, 5);
        {
          this.state = 2077;
          this.n_output_gatetype();
          this.state = 2079;
          this._errHandler.sync(this);
          switch (this.interpreter.adaptivePredict(this._input, 192, this._ctx)) {
            case 1: {
              this.state = 2078;
              this.drive_strength();
            }
              break;
          }
          this.state = 2082;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.HA) {
            {
              this.state = 2081;
              this.delay2();
            }
          }

          this.state = 2084;
          this.n_output_gate_instance();
          this.state = 2089;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.CO) {
            {
              {
                this.state = 2085;
                this.match(VerilogParser.CO);
                this.state = 2086;
                this.n_output_gate_instance();
              }
            }
            this.state = 2091;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2092;
          this.match(VerilogParser.SC);
        }
          break;
        case VerilogParser.RTRANIFONE:
        case VerilogParser.RTRANIFZERO:
        case VerilogParser.TRANIFONE:
        case VerilogParser.TRANIFZERO:
          this.enterOuterAlt(_localctx, 6);
        {
          this.state = 2094;
          this.pass_en_switchtype();
          this.state = 2096;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.HA) {
            {
              this.state = 2095;
              this.delay2();
            }
          }

          this.state = 2098;
          this.pass_enable_switch_instance();
          this.state = 2103;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.CO) {
            {
              {
                this.state = 2099;
                this.match(VerilogParser.CO);
                this.state = 2100;
                this.pass_enable_switch_instance();
              }
            }
            this.state = 2105;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2106;
          this.match(VerilogParser.SC);
        }
          break;
        case VerilogParser.RTRAN:
        case VerilogParser.TRAN:
          this.enterOuterAlt(_localctx, 7);
        {
          this.state = 2108;
          this.pass_switchtype();
          this.state = 2109;
          this.pass_switch_instance();
          this.state = 2114;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.CO) {
            {
              {
                this.state = 2110;
                this.match(VerilogParser.CO);
                this.state = 2111;
                this.pass_switch_instance();
              }
            }
            this.state = 2116;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2117;
          this.match(VerilogParser.SC);
        }
          break;
        case VerilogParser.PULLDOWN:
          this.enterOuterAlt(_localctx, 8);
        {
          this.state = 2119;
          this.match(VerilogParser.PULLDOWN);
          this.state = 2121;
          this._errHandler.sync(this);
          switch (this.interpreter.adaptivePredict(this._input, 198, this._ctx)) {
            case 1: {
              this.state = 2120;
              this.pulldown_strength();
            }
              break;
          }
          this.state = 2123;
          this.pull_gate_instance();
          this.state = 2128;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.CO) {
            {
              {
                this.state = 2124;
                this.match(VerilogParser.CO);
                this.state = 2125;
                this.pull_gate_instance();
              }
            }
            this.state = 2130;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2131;
          this.match(VerilogParser.SC);
        }
          break;
        case VerilogParser.PULLUP:
          this.enterOuterAlt(_localctx, 9);
        {
          this.state = 2133;
          this.match(VerilogParser.PULLUP);
          this.state = 2135;
          this._errHandler.sync(this);
          switch (this.interpreter.adaptivePredict(this._input, 200, this._ctx)) {
            case 1: {
              this.state = 2134;
              this.pullup_strength();
            }
              break;
          }
          this.state = 2137;
          this.pull_gate_instance();
          this.state = 2142;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.CO) {
            {
              {
                this.state = 2138;
                this.match(VerilogParser.CO);
                this.state = 2139;
                this.pull_gate_instance();
              }
            }
            this.state = 2144;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2145;
          this.match(VerilogParser.SC);
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public cmos_switch_instance(): Cmos_switch_instanceContext {
    let _localctx: Cmos_switch_instanceContext = new Cmos_switch_instanceContext(this._ctx, this.state);
    this.enterRule(_localctx, 198, VerilogParser.RULE_cmos_switch_instance);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2150;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.ESCAPED_IDENTIFIER || _la === VerilogParser.SIMPLE_IDENTIFIER) {
          {
            this.state = 2149;
            this.name_of_gate_instance();
          }
        }

        this.state = 2152;
        this.match(VerilogParser.LP);
        this.state = 2153;
        this.output_terminal();
        this.state = 2154;
        this.match(VerilogParser.CO);
        this.state = 2155;
        this.input_terminal();
        this.state = 2156;
        this.match(VerilogParser.CO);
        this.state = 2157;
        this.ncontrol_terminal();
        this.state = 2158;
        this.match(VerilogParser.CO);
        this.state = 2159;
        this.pcontrol_terminal();
        this.state = 2160;
        this.match(VerilogParser.RP);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public enable_gate_instance(): Enable_gate_instanceContext {
    let _localctx: Enable_gate_instanceContext = new Enable_gate_instanceContext(this._ctx, this.state);
    this.enterRule(_localctx, 200, VerilogParser.RULE_enable_gate_instance);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2163;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.ESCAPED_IDENTIFIER || _la === VerilogParser.SIMPLE_IDENTIFIER) {
          {
            this.state = 2162;
            this.name_of_gate_instance();
          }
        }

        this.state = 2165;
        this.match(VerilogParser.LP);
        this.state = 2166;
        this.output_terminal();
        this.state = 2167;
        this.match(VerilogParser.CO);
        this.state = 2168;
        this.input_terminal();
        this.state = 2169;
        this.match(VerilogParser.CO);
        this.state = 2170;
        this.enable_terminal();
        this.state = 2171;
        this.match(VerilogParser.RP);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public mos_switch_instance(): Mos_switch_instanceContext {
    let _localctx: Mos_switch_instanceContext = new Mos_switch_instanceContext(this._ctx, this.state);
    this.enterRule(_localctx, 202, VerilogParser.RULE_mos_switch_instance);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2174;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.ESCAPED_IDENTIFIER || _la === VerilogParser.SIMPLE_IDENTIFIER) {
          {
            this.state = 2173;
            this.name_of_gate_instance();
          }
        }

        this.state = 2176;
        this.match(VerilogParser.LP);
        this.state = 2177;
        this.output_terminal();
        this.state = 2178;
        this.match(VerilogParser.CO);
        this.state = 2179;
        this.input_terminal();
        this.state = 2180;
        this.match(VerilogParser.CO);
        this.state = 2181;
        this.enable_terminal();
        this.state = 2182;
        this.match(VerilogParser.RP);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public n_input_gate_instance(): N_input_gate_instanceContext {
    let _localctx: N_input_gate_instanceContext = new N_input_gate_instanceContext(this._ctx, this.state);
    this.enterRule(_localctx, 204, VerilogParser.RULE_n_input_gate_instance);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2185;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.ESCAPED_IDENTIFIER || _la === VerilogParser.SIMPLE_IDENTIFIER) {
          {
            this.state = 2184;
            this.name_of_gate_instance();
          }
        }

        this.state = 2187;
        this.match(VerilogParser.LP);
        this.state = 2188;
        this.output_terminal();
        this.state = 2189;
        this.match(VerilogParser.CO);
        this.state = 2190;
        this.input_terminal();
        this.state = 2195;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 2191;
              this.match(VerilogParser.CO);
              this.state = 2192;
              this.input_terminal();
            }
          }
          this.state = 2197;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 2198;
        this.match(VerilogParser.RP);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public n_output_gate_instance(): N_output_gate_instanceContext {
    let _localctx: N_output_gate_instanceContext = new N_output_gate_instanceContext(this._ctx, this.state);
    this.enterRule(_localctx, 206, VerilogParser.RULE_n_output_gate_instance);
    let _la: number;
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2201;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.ESCAPED_IDENTIFIER || _la === VerilogParser.SIMPLE_IDENTIFIER) {
          {
            this.state = 2200;
            this.name_of_gate_instance();
          }
        }

        this.state = 2203;
        this.match(VerilogParser.LP);
        this.state = 2204;
        this.output_terminal();
        this.state = 2209;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 209, this._ctx);
        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 2205;
                this.match(VerilogParser.CO);
                this.state = 2206;
                this.output_terminal();
              }
            }
          }
          this.state = 2211;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 209, this._ctx);
        }
        this.state = 2212;
        this.match(VerilogParser.CO);
        this.state = 2213;
        this.input_terminal();
        this.state = 2214;
        this.match(VerilogParser.RP);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public pass_switch_instance(): Pass_switch_instanceContext {
    let _localctx: Pass_switch_instanceContext = new Pass_switch_instanceContext(this._ctx, this.state);
    this.enterRule(_localctx, 208, VerilogParser.RULE_pass_switch_instance);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2217;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.ESCAPED_IDENTIFIER || _la === VerilogParser.SIMPLE_IDENTIFIER) {
          {
            this.state = 2216;
            this.name_of_gate_instance();
          }
        }

        this.state = 2219;
        this.match(VerilogParser.LP);
        this.state = 2220;
        this.inout_terminal();
        this.state = 2221;
        this.match(VerilogParser.CO);
        this.state = 2222;
        this.inout_terminal();
        this.state = 2223;
        this.match(VerilogParser.RP);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public pass_enable_switch_instance(): Pass_enable_switch_instanceContext {
    let _localctx: Pass_enable_switch_instanceContext = new Pass_enable_switch_instanceContext(this._ctx, this.state);
    this.enterRule(_localctx, 210, VerilogParser.RULE_pass_enable_switch_instance);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2226;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.ESCAPED_IDENTIFIER || _la === VerilogParser.SIMPLE_IDENTIFIER) {
          {
            this.state = 2225;
            this.name_of_gate_instance();
          }
        }

        this.state = 2228;
        this.match(VerilogParser.LP);
        this.state = 2229;
        this.inout_terminal();
        this.state = 2230;
        this.match(VerilogParser.CO);
        this.state = 2231;
        this.inout_terminal();
        this.state = 2232;
        this.match(VerilogParser.CO);
        this.state = 2233;
        this.enable_terminal();
        this.state = 2234;
        this.match(VerilogParser.RP);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public pull_gate_instance(): Pull_gate_instanceContext {
    let _localctx: Pull_gate_instanceContext = new Pull_gate_instanceContext(this._ctx, this.state);
    this.enterRule(_localctx, 212, VerilogParser.RULE_pull_gate_instance);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2237;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.ESCAPED_IDENTIFIER || _la === VerilogParser.SIMPLE_IDENTIFIER) {
          {
            this.state = 2236;
            this.name_of_gate_instance();
          }
        }

        this.state = 2239;
        this.match(VerilogParser.LP);
        this.state = 2240;
        this.output_terminal();
        this.state = 2241;
        this.match(VerilogParser.RP);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public name_of_gate_instance(): Name_of_gate_instanceContext {
    let _localctx: Name_of_gate_instanceContext = new Name_of_gate_instanceContext(this._ctx, this.state);
    this.enterRule(_localctx, 214, VerilogParser.RULE_name_of_gate_instance);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2243;
        this.gate_instance_identifier();
        this.state = 2245;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.LB) {
          {
            this.state = 2244;
            this.range_();
          }
        }

      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public pulldown_strength(): Pulldown_strengthContext {
    let _localctx: Pulldown_strengthContext = new Pulldown_strengthContext(this._ctx, this.state);
    this.enterRule(_localctx, 216, VerilogParser.RULE_pulldown_strength);
    try {
      this.state = 2263;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 214, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 2247;
          this.match(VerilogParser.LP);
          this.state = 2248;
          this.strength0();
          this.state = 2249;
          this.match(VerilogParser.CO);
          this.state = 2250;
          this.strength1();
          this.state = 2251;
          this.match(VerilogParser.RP);
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 2253;
          this.match(VerilogParser.LP);
          this.state = 2254;
          this.strength1();
          this.state = 2255;
          this.match(VerilogParser.CO);
          this.state = 2256;
          this.strength0();
          this.state = 2257;
          this.match(VerilogParser.RP);
        }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 2259;
          this.match(VerilogParser.LP);
          this.state = 2260;
          this.strength0();
          this.state = 2261;
          this.match(VerilogParser.RP);
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public pullup_strength(): Pullup_strengthContext {
    let _localctx: Pullup_strengthContext = new Pullup_strengthContext(this._ctx, this.state);
    this.enterRule(_localctx, 218, VerilogParser.RULE_pullup_strength);
    try {
      this.state = 2281;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 215, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 2265;
          this.match(VerilogParser.LP);
          this.state = 2266;
          this.strength0();
          this.state = 2267;
          this.match(VerilogParser.CO);
          this.state = 2268;
          this.strength1();
          this.state = 2269;
          this.match(VerilogParser.RP);
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 2271;
          this.match(VerilogParser.LP);
          this.state = 2272;
          this.strength1();
          this.state = 2273;
          this.match(VerilogParser.CO);
          this.state = 2274;
          this.strength0();
          this.state = 2275;
          this.match(VerilogParser.RP);
        }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 2277;
          this.match(VerilogParser.LP);
          this.state = 2278;
          this.strength1();
          this.state = 2279;
          this.match(VerilogParser.RP);
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public enable_terminal(): Enable_terminalContext {
    let _localctx: Enable_terminalContext = new Enable_terminalContext(this._ctx, this.state);
    this.enterRule(_localctx, 220, VerilogParser.RULE_enable_terminal);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2283;
        this.expression(0);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public inout_terminal(): Inout_terminalContext {
    let _localctx: Inout_terminalContext = new Inout_terminalContext(this._ctx, this.state);
    this.enterRule(_localctx, 222, VerilogParser.RULE_inout_terminal);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2285;
        this.net_lvalue();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public input_terminal(): Input_terminalContext {
    let _localctx: Input_terminalContext = new Input_terminalContext(this._ctx, this.state);
    this.enterRule(_localctx, 224, VerilogParser.RULE_input_terminal);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2287;
        this.expression(0);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public ncontrol_terminal(): Ncontrol_terminalContext {
    let _localctx: Ncontrol_terminalContext = new Ncontrol_terminalContext(this._ctx, this.state);
    this.enterRule(_localctx, 226, VerilogParser.RULE_ncontrol_terminal);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2289;
        this.expression(0);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public output_terminal(): Output_terminalContext {
    let _localctx: Output_terminalContext = new Output_terminalContext(this._ctx, this.state);
    this.enterRule(_localctx, 228, VerilogParser.RULE_output_terminal);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2291;
        this.net_lvalue();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public pcontrol_terminal(): Pcontrol_terminalContext {
    let _localctx: Pcontrol_terminalContext = new Pcontrol_terminalContext(this._ctx, this.state);
    this.enterRule(_localctx, 230, VerilogParser.RULE_pcontrol_terminal);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2293;
        this.expression(0);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public cmos_switchtype(): Cmos_switchtypeContext {
    let _localctx: Cmos_switchtypeContext = new Cmos_switchtypeContext(this._ctx, this.state);
    this.enterRule(_localctx, 232, VerilogParser.RULE_cmos_switchtype);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2295;
        _la = this._input.LA(1);
        if (!(_la === VerilogParser.CMOS || _la === VerilogParser.RCMOS)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public enable_gatetype(): Enable_gatetypeContext {
    let _localctx: Enable_gatetypeContext = new Enable_gatetypeContext(this._ctx, this.state);
    this.enterRule(_localctx, 234, VerilogParser.RULE_enable_gatetype);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2297;
        _la = this._input.LA(1);
        if (!(_la === VerilogParser.BUFIFONE || _la === VerilogParser.BUFIFZERO || _la === VerilogParser.NOTIFONE || _la === VerilogParser.NOTIFZERO)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public mos_switchtype(): Mos_switchtypeContext {
    let _localctx: Mos_switchtypeContext = new Mos_switchtypeContext(this._ctx, this.state);
    this.enterRule(_localctx, 236, VerilogParser.RULE_mos_switchtype);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2299;
        _la = this._input.LA(1);
        if (!(((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (VerilogParser.NMOS - 73)) | (1 << (VerilogParser.PMOS - 73)) | (1 << (VerilogParser.RNMOS - 73)) | (1 << (VerilogParser.RPMOS - 73)))) !== 0))) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public n_input_gatetype(): N_input_gatetypeContext {
    let _localctx: N_input_gatetypeContext = new N_input_gatetypeContext(this._ctx, this.state);
    this.enterRule(_localctx, 238, VerilogParser.RULE_n_input_gatetype);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2301;
        _la = this._input.LA(1);
        if (!(_la === VerilogParser.AND || ((((_la - 71)) & ~0x1F) === 0 && ((1 << (_la - 71)) & ((1 << (VerilogParser.NAND - 71)) | (1 << (VerilogParser.NOR - 71)) | (1 << (VerilogParser.OR - 71)))) !== 0) || _la === VerilogParser.XNOR || _la === VerilogParser.XOR)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public n_output_gatetype(): N_output_gatetypeContext {
    let _localctx: N_output_gatetypeContext = new N_output_gatetypeContext(this._ctx, this.state);
    this.enterRule(_localctx, 240, VerilogParser.RULE_n_output_gatetype);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2303;
        _la = this._input.LA(1);
        if (!(_la === VerilogParser.BUF || _la === VerilogParser.NOT)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public pass_en_switchtype(): Pass_en_switchtypeContext {
    let _localctx: Pass_en_switchtypeContext = new Pass_en_switchtypeContext(this._ctx, this.state);
    this.enterRule(_localctx, 242, VerilogParser.RULE_pass_en_switchtype);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2305;
        _la = this._input.LA(1);
        if (!(((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & ((1 << (VerilogParser.RTRANIFONE - 101)) | (1 << (VerilogParser.RTRANIFZERO - 101)) | (1 << (VerilogParser.TRANIFONE - 101)) | (1 << (VerilogParser.TRANIFZERO - 101)))) !== 0))) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public pass_switchtype(): Pass_switchtypeContext {
    let _localctx: Pass_switchtypeContext = new Pass_switchtypeContext(this._ctx, this.state);
    this.enterRule(_localctx, 244, VerilogParser.RULE_pass_switchtype);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2307;
        _la = this._input.LA(1);
        if (!(_la === VerilogParser.RTRAN || _la === VerilogParser.TRAN)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public module_instantiation(): Module_instantiationContext {
    let _localctx: Module_instantiationContext = new Module_instantiationContext(this._ctx, this.state);
    this.enterRule(_localctx, 246, VerilogParser.RULE_module_instantiation);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2309;
        this.module_identifier();
        this.state = 2311;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.HA) {
          {
            this.state = 2310;
            this.parameter_value_assignment();
          }
        }

        this.state = 2313;
        this.module_instance();
        this.state = 2318;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 2314;
              this.match(VerilogParser.CO);
              this.state = 2315;
              this.module_instance();
            }
          }
          this.state = 2320;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 2321;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public parameter_value_assignment(): Parameter_value_assignmentContext {
    let _localctx: Parameter_value_assignmentContext = new Parameter_value_assignmentContext(this._ctx, this.state);
    this.enterRule(_localctx, 248, VerilogParser.RULE_parameter_value_assignment);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2323;
        this.match(VerilogParser.HA);
        this.state = 2324;
        this.match(VerilogParser.LP);
        this.state = 2325;
        this.list_of_parameter_assignments();
        this.state = 2326;
        this.match(VerilogParser.RP);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public list_of_parameter_assignments(): List_of_parameter_assignmentsContext {
    let _localctx: List_of_parameter_assignmentsContext = new List_of_parameter_assignmentsContext(this._ctx, this.state);
    this.enterRule(_localctx, 250, VerilogParser.RULE_list_of_parameter_assignments);
    let _la: number;
    try {
      this.state = 2344;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.AM:
        case VerilogParser.CA:
        case VerilogParser.CATI:
        case VerilogParser.EM:
        case VerilogParser.LC:
        case VerilogParser.LP:
        case VerilogParser.MI:
        case VerilogParser.PL:
        case VerilogParser.TI:
        case VerilogParser.TIAM:
        case VerilogParser.TICA:
        case VerilogParser.TIVL:
        case VerilogParser.VL:
        case VerilogParser.BINARY_BASE:
        case VerilogParser.DECIMAL_BASE:
        case VerilogParser.ESCAPED_IDENTIFIER:
        case VerilogParser.EXPONENTIAL_NUMBER:
        case VerilogParser.FIXED_POINT_NUMBER:
        case VerilogParser.HEX_BASE:
        case VerilogParser.OCTAL_BASE:
        case VerilogParser.SIMPLE_IDENTIFIER:
        case VerilogParser.STRING:
        case VerilogParser.SYSTEM_TF_IDENTIFIER:
        case VerilogParser.UNSIGNED_NUMBER:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 2328;
          this.ordered_parameter_assignment();
          this.state = 2333;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.CO) {
            {
              {
                this.state = 2329;
                this.match(VerilogParser.CO);
                this.state = 2330;
                this.ordered_parameter_assignment();
              }
            }
            this.state = 2335;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
        }
          break;
        case VerilogParser.DT:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 2336;
          this.named_parameter_assignment();
          this.state = 2341;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.CO) {
            {
              {
                this.state = 2337;
                this.match(VerilogParser.CO);
                this.state = 2338;
                this.named_parameter_assignment();
              }
            }
            this.state = 2343;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public ordered_parameter_assignment(): Ordered_parameter_assignmentContext {
    let _localctx: Ordered_parameter_assignmentContext = new Ordered_parameter_assignmentContext(this._ctx, this.state);
    this.enterRule(_localctx, 252, VerilogParser.RULE_ordered_parameter_assignment);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2346;
        this.expression(0);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public named_parameter_assignment(): Named_parameter_assignmentContext {
    let _localctx: Named_parameter_assignmentContext = new Named_parameter_assignmentContext(this._ctx, this.state);
    this.enterRule(_localctx, 254, VerilogParser.RULE_named_parameter_assignment);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2348;
        this.match(VerilogParser.DT);
        this.state = 2349;
        this.parameter_identifier();
        this.state = 2350;
        this.match(VerilogParser.LP);
        this.state = 2352;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (VerilogParser.AM - 137)) | (1 << (VerilogParser.CA - 137)) | (1 << (VerilogParser.CATI - 137)) | (1 << (VerilogParser.EM - 137)) | (1 << (VerilogParser.LC - 137)) | (1 << (VerilogParser.LP - 137)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (VerilogParser.MI - 171)) | (1 << (VerilogParser.PL - 171)) | (1 << (VerilogParser.TI - 171)) | (1 << (VerilogParser.TIAM - 171)) | (1 << (VerilogParser.TICA - 171)) | (1 << (VerilogParser.TIVL - 171)) | (1 << (VerilogParser.VL - 171)) | (1 << (VerilogParser.BINARY_BASE - 171)) | (1 << (VerilogParser.DECIMAL_BASE - 171)) | (1 << (VerilogParser.ESCAPED_IDENTIFIER - 171)) | (1 << (VerilogParser.EXPONENTIAL_NUMBER - 171)) | (1 << (VerilogParser.FIXED_POINT_NUMBER - 171)) | (1 << (VerilogParser.HEX_BASE - 171)) | (1 << (VerilogParser.OCTAL_BASE - 171)) | (1 << (VerilogParser.SIMPLE_IDENTIFIER - 171)) | (1 << (VerilogParser.STRING - 171)) | (1 << (VerilogParser.SYSTEM_TF_IDENTIFIER - 171)) | (1 << (VerilogParser.UNSIGNED_NUMBER - 171)))) !== 0)) {
          {
            this.state = 2351;
            this.mintypmax_expression();
          }
        }

        this.state = 2354;
        this.match(VerilogParser.RP);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public module_instance(): Module_instanceContext {
    let _localctx: Module_instanceContext = new Module_instanceContext(this._ctx, this.state);
    this.enterRule(_localctx, 256, VerilogParser.RULE_module_instance);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2356;
        this.name_of_module_instance();
        this.state = 2357;
        this.match(VerilogParser.LP);
        this.state = 2358;
        this.list_of_port_connections();
        this.state = 2359;
        this.match(VerilogParser.RP);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public name_of_module_instance(): Name_of_module_instanceContext {
    let _localctx: Name_of_module_instanceContext = new Name_of_module_instanceContext(this._ctx, this.state);
    this.enterRule(_localctx, 258, VerilogParser.RULE_name_of_module_instance);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2361;
        this.module_instance_identifier();
        this.state = 2363;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.LB) {
          {
            this.state = 2362;
            this.range_();
          }
        }

      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public list_of_port_connections(): List_of_port_connectionsContext {
    let _localctx: List_of_port_connectionsContext = new List_of_port_connectionsContext(this._ctx, this.state);
    this.enterRule(_localctx, 260, VerilogParser.RULE_list_of_port_connections);
    let _la: number;
    try {
      this.state = 2381;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 225, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 2365;
          this.ordered_port_connection();
          this.state = 2370;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.CO) {
            {
              {
                this.state = 2366;
                this.match(VerilogParser.CO);
                this.state = 2367;
                this.ordered_port_connection();
              }
            }
            this.state = 2372;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 2373;
          this.named_port_connection();
          this.state = 2378;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.CO) {
            {
              {
                this.state = 2374;
                this.match(VerilogParser.CO);
                this.state = 2375;
                this.named_port_connection();
              }
            }
            this.state = 2380;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public ordered_port_connection(): Ordered_port_connectionContext {
    let _localctx: Ordered_port_connectionContext = new Ordered_port_connectionContext(this._ctx, this.state);
    this.enterRule(_localctx, 262, VerilogParser.RULE_ordered_port_connection);
    let _la: number;
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2386;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 226, this._ctx);
        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 2383;
                this.attribute_instance();
              }
            }
          }
          this.state = 2388;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 226, this._ctx);
        }
        this.state = 2390;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (VerilogParser.AM - 137)) | (1 << (VerilogParser.CA - 137)) | (1 << (VerilogParser.CATI - 137)) | (1 << (VerilogParser.EM - 137)) | (1 << (VerilogParser.LC - 137)) | (1 << (VerilogParser.LP - 137)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (VerilogParser.MI - 171)) | (1 << (VerilogParser.PL - 171)) | (1 << (VerilogParser.TI - 171)) | (1 << (VerilogParser.TIAM - 171)) | (1 << (VerilogParser.TICA - 171)) | (1 << (VerilogParser.TIVL - 171)) | (1 << (VerilogParser.VL - 171)) | (1 << (VerilogParser.BINARY_BASE - 171)) | (1 << (VerilogParser.DECIMAL_BASE - 171)) | (1 << (VerilogParser.ESCAPED_IDENTIFIER - 171)) | (1 << (VerilogParser.EXPONENTIAL_NUMBER - 171)) | (1 << (VerilogParser.FIXED_POINT_NUMBER - 171)) | (1 << (VerilogParser.HEX_BASE - 171)) | (1 << (VerilogParser.OCTAL_BASE - 171)) | (1 << (VerilogParser.SIMPLE_IDENTIFIER - 171)) | (1 << (VerilogParser.STRING - 171)) | (1 << (VerilogParser.SYSTEM_TF_IDENTIFIER - 171)) | (1 << (VerilogParser.UNSIGNED_NUMBER - 171)))) !== 0)) {
          {
            this.state = 2389;
            this.expression(0);
          }
        }

      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public named_port_connection(): Named_port_connectionContext {
    let _localctx: Named_port_connectionContext = new Named_port_connectionContext(this._ctx, this.state);
    this.enterRule(_localctx, 264, VerilogParser.RULE_named_port_connection);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2395;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.LP) {
          {
            {
              this.state = 2392;
              this.attribute_instance();
            }
          }
          this.state = 2397;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 2398;
        this.match(VerilogParser.DT);
        this.state = 2399;
        this.port_identifier();
        this.state = 2400;
        this.match(VerilogParser.LP);
        this.state = 2402;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (VerilogParser.AM - 137)) | (1 << (VerilogParser.CA - 137)) | (1 << (VerilogParser.CATI - 137)) | (1 << (VerilogParser.EM - 137)) | (1 << (VerilogParser.LC - 137)) | (1 << (VerilogParser.LP - 137)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (VerilogParser.MI - 171)) | (1 << (VerilogParser.PL - 171)) | (1 << (VerilogParser.TI - 171)) | (1 << (VerilogParser.TIAM - 171)) | (1 << (VerilogParser.TICA - 171)) | (1 << (VerilogParser.TIVL - 171)) | (1 << (VerilogParser.VL - 171)) | (1 << (VerilogParser.BINARY_BASE - 171)) | (1 << (VerilogParser.DECIMAL_BASE - 171)) | (1 << (VerilogParser.ESCAPED_IDENTIFIER - 171)) | (1 << (VerilogParser.EXPONENTIAL_NUMBER - 171)) | (1 << (VerilogParser.FIXED_POINT_NUMBER - 171)) | (1 << (VerilogParser.HEX_BASE - 171)) | (1 << (VerilogParser.OCTAL_BASE - 171)) | (1 << (VerilogParser.SIMPLE_IDENTIFIER - 171)) | (1 << (VerilogParser.STRING - 171)) | (1 << (VerilogParser.SYSTEM_TF_IDENTIFIER - 171)) | (1 << (VerilogParser.UNSIGNED_NUMBER - 171)))) !== 0)) {
          {
            this.state = 2401;
            this.expression(0);
          }
        }

        this.state = 2404;
        this.match(VerilogParser.RP);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public generate_region(): Generate_regionContext {
    let _localctx: Generate_regionContext = new Generate_regionContext(this._ctx, this.state);
    this.enterRule(_localctx, 266, VerilogParser.RULE_generate_region);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2406;
        this.match(VerilogParser.GENERATE);
        this.state = 2410;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << VerilogParser.ALWAYS) | (1 << VerilogParser.AND) | (1 << VerilogParser.ASSIGN) | (1 << VerilogParser.BUF) | (1 << VerilogParser.BUFIFONE) | (1 << VerilogParser.BUFIFZERO) | (1 << VerilogParser.CASE) | (1 << VerilogParser.CMOS) | (1 << VerilogParser.DEFPARAM))) !== 0) || ((((_la - 44)) & ~0x1F) === 0 && ((1 << (_la - 44)) & ((1 << (VerilogParser.EVENT - 44)) | (1 << (VerilogParser.FOR - 44)) | (1 << (VerilogParser.FUNCTION - 44)) | (1 << (VerilogParser.GENVAR - 44)) | (1 << (VerilogParser.IF - 44)) | (1 << (VerilogParser.INITIAL - 44)) | (1 << (VerilogParser.INTEGER - 44)) | (1 << (VerilogParser.LOCALPARAM - 44)) | (1 << (VerilogParser.NAND - 44)) | (1 << (VerilogParser.NMOS - 44)) | (1 << (VerilogParser.NOR - 44)))) !== 0) || ((((_la - 76)) & ~0x1F) === 0 && ((1 << (_la - 76)) & ((1 << (VerilogParser.NOT - 76)) | (1 << (VerilogParser.NOTIFONE - 76)) | (1 << (VerilogParser.NOTIFZERO - 76)) | (1 << (VerilogParser.OR - 76)) | (1 << (VerilogParser.PMOS - 76)) | (1 << (VerilogParser.PULLDOWN - 76)) | (1 << (VerilogParser.PULLUP - 76)) | (1 << (VerilogParser.RCMOS - 76)) | (1 << (VerilogParser.REAL - 76)) | (1 << (VerilogParser.REALTIME - 76)) | (1 << (VerilogParser.REG - 76)) | (1 << (VerilogParser.RNMOS - 76)) | (1 << (VerilogParser.RPMOS - 76)) | (1 << (VerilogParser.RTRAN - 76)) | (1 << (VerilogParser.RTRANIFONE - 76)) | (1 << (VerilogParser.RTRANIFZERO - 76)))) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (VerilogParser.SUPPLYONE - 111)) | (1 << (VerilogParser.SUPPLYZERO - 111)) | (1 << (VerilogParser.TASK - 111)) | (1 << (VerilogParser.TIME - 111)) | (1 << (VerilogParser.TRAN - 111)) | (1 << (VerilogParser.TRANIFONE - 111)) | (1 << (VerilogParser.TRANIFZERO - 111)) | (1 << (VerilogParser.TRI - 111)) | (1 << (VerilogParser.TRIAND - 111)) | (1 << (VerilogParser.TRIONE - 111)) | (1 << (VerilogParser.TRIOR - 111)) | (1 << (VerilogParser.TRIREG - 111)) | (1 << (VerilogParser.TRIZERO - 111)) | (1 << (VerilogParser.UWIRE - 111)) | (1 << (VerilogParser.WAND - 111)) | (1 << (VerilogParser.WIRE - 111)) | (1 << (VerilogParser.WOR - 111)) | (1 << (VerilogParser.XNOR - 111)) | (1 << (VerilogParser.XOR - 111)))) !== 0) || _la === VerilogParser.LP || _la === VerilogParser.ESCAPED_IDENTIFIER || _la === VerilogParser.SIMPLE_IDENTIFIER) {
          {
            {
              this.state = 2407;
              this.module_or_generate_item();
            }
          }
          this.state = 2412;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 2413;
        this.match(VerilogParser.ENDGENERATE);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public genvar_declaration(): Genvar_declarationContext {
    let _localctx: Genvar_declarationContext = new Genvar_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 268, VerilogParser.RULE_genvar_declaration);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2415;
        this.match(VerilogParser.GENVAR);
        this.state = 2416;
        this.list_of_genvar_identifiers();
        this.state = 2417;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public list_of_genvar_identifiers(): List_of_genvar_identifiersContext {
    let _localctx: List_of_genvar_identifiersContext = new List_of_genvar_identifiersContext(this._ctx, this.state);
    this.enterRule(_localctx, 270, VerilogParser.RULE_list_of_genvar_identifiers);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2419;
        this.genvar_identifier();
        this.state = 2424;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 2420;
              this.match(VerilogParser.CO);
              this.state = 2421;
              this.genvar_identifier();
            }
          }
          this.state = 2426;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public loop_generate_construct(): Loop_generate_constructContext {
    let _localctx: Loop_generate_constructContext = new Loop_generate_constructContext(this._ctx, this.state);
    this.enterRule(_localctx, 272, VerilogParser.RULE_loop_generate_construct);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2427;
        this.match(VerilogParser.FOR);
        this.state = 2428;
        this.match(VerilogParser.LP);
        this.state = 2429;
        this.genvar_initialization();
        this.state = 2430;
        this.match(VerilogParser.SC);
        this.state = 2431;
        this.genvar_expression();
        this.state = 2432;
        this.match(VerilogParser.SC);
        this.state = 2433;
        this.genvar_iteration();
        this.state = 2434;
        this.match(VerilogParser.RP);
        this.state = 2435;
        this.generate_block();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public genvar_initialization(): Genvar_initializationContext {
    let _localctx: Genvar_initializationContext = new Genvar_initializationContext(this._ctx, this.state);
    this.enterRule(_localctx, 274, VerilogParser.RULE_genvar_initialization);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2437;
        this.genvar_identifier();
        this.state = 2438;
        this.match(VerilogParser.EQ);
        this.state = 2439;
        this.constant_expression(0);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public genvar_expression(): Genvar_expressionContext {
    let _localctx: Genvar_expressionContext = new Genvar_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 276, VerilogParser.RULE_genvar_expression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2441;
        this.constant_expression(0);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public genvar_iteration(): Genvar_iterationContext {
    let _localctx: Genvar_iterationContext = new Genvar_iterationContext(this._ctx, this.state);
    this.enterRule(_localctx, 278, VerilogParser.RULE_genvar_iteration);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2443;
        this.genvar_identifier();
        this.state = 2444;
        this.match(VerilogParser.EQ);
        this.state = 2445;
        this.genvar_expression();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public conditional_generate_construct(): Conditional_generate_constructContext {
    let _localctx: Conditional_generate_constructContext = new Conditional_generate_constructContext(this._ctx, this.state);
    this.enterRule(_localctx, 280, VerilogParser.RULE_conditional_generate_construct);
    try {
      this.state = 2449;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.IF:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 2447;
          this.if_generate_construct();
        }
          break;
        case VerilogParser.CASE:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 2448;
          this.case_generate_construct();
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public if_generate_construct(): If_generate_constructContext {
    let _localctx: If_generate_constructContext = new If_generate_constructContext(this._ctx, this.state);
    this.enterRule(_localctx, 282, VerilogParser.RULE_if_generate_construct);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2451;
        this.match(VerilogParser.IF);
        this.state = 2452;
        this.match(VerilogParser.LP);
        this.state = 2453;
        this.constant_expression(0);
        this.state = 2454;
        this.match(VerilogParser.RP);
        this.state = 2455;
        this.generate_block_or_null();
        this.state = 2458;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 233, this._ctx)) {
          case 1: {
            this.state = 2456;
            this.match(VerilogParser.ELSE);
            this.state = 2457;
            this.generate_block_or_null();
          }
            break;
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public case_generate_construct(): Case_generate_constructContext {
    let _localctx: Case_generate_constructContext = new Case_generate_constructContext(this._ctx, this.state);
    this.enterRule(_localctx, 284, VerilogParser.RULE_case_generate_construct);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2460;
        this.match(VerilogParser.CASE);
        this.state = 2461;
        this.match(VerilogParser.LP);
        this.state = 2462;
        this.constant_expression(0);
        this.state = 2463;
        this.match(VerilogParser.RP);
        this.state = 2465;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
          {
            {
              this.state = 2464;
              this.case_generate_item();
            }
          }
          this.state = 2467;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        } while (_la === VerilogParser.DEFAULT || ((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (VerilogParser.AM - 137)) | (1 << (VerilogParser.CA - 137)) | (1 << (VerilogParser.CATI - 137)) | (1 << (VerilogParser.EM - 137)) | (1 << (VerilogParser.LC - 137)) | (1 << (VerilogParser.LP - 137)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (VerilogParser.MI - 171)) | (1 << (VerilogParser.PL - 171)) | (1 << (VerilogParser.TI - 171)) | (1 << (VerilogParser.TIAM - 171)) | (1 << (VerilogParser.TICA - 171)) | (1 << (VerilogParser.TIVL - 171)) | (1 << (VerilogParser.VL - 171)) | (1 << (VerilogParser.BINARY_BASE - 171)) | (1 << (VerilogParser.DECIMAL_BASE - 171)) | (1 << (VerilogParser.ESCAPED_IDENTIFIER - 171)) | (1 << (VerilogParser.EXPONENTIAL_NUMBER - 171)) | (1 << (VerilogParser.FIXED_POINT_NUMBER - 171)) | (1 << (VerilogParser.HEX_BASE - 171)) | (1 << (VerilogParser.OCTAL_BASE - 171)) | (1 << (VerilogParser.SIMPLE_IDENTIFIER - 171)) | (1 << (VerilogParser.STRING - 171)) | (1 << (VerilogParser.SYSTEM_TF_IDENTIFIER - 171)) | (1 << (VerilogParser.UNSIGNED_NUMBER - 171)))) !== 0));
        this.state = 2469;
        this.match(VerilogParser.ENDCASE);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public case_generate_item(): Case_generate_itemContext {
    let _localctx: Case_generate_itemContext = new Case_generate_itemContext(this._ctx, this.state);
    this.enterRule(_localctx, 286, VerilogParser.RULE_case_generate_item);
    let _la: number;
    try {
      this.state = 2487;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.AM:
        case VerilogParser.CA:
        case VerilogParser.CATI:
        case VerilogParser.EM:
        case VerilogParser.LC:
        case VerilogParser.LP:
        case VerilogParser.MI:
        case VerilogParser.PL:
        case VerilogParser.TI:
        case VerilogParser.TIAM:
        case VerilogParser.TICA:
        case VerilogParser.TIVL:
        case VerilogParser.VL:
        case VerilogParser.BINARY_BASE:
        case VerilogParser.DECIMAL_BASE:
        case VerilogParser.ESCAPED_IDENTIFIER:
        case VerilogParser.EXPONENTIAL_NUMBER:
        case VerilogParser.FIXED_POINT_NUMBER:
        case VerilogParser.HEX_BASE:
        case VerilogParser.OCTAL_BASE:
        case VerilogParser.SIMPLE_IDENTIFIER:
        case VerilogParser.STRING:
        case VerilogParser.SYSTEM_TF_IDENTIFIER:
        case VerilogParser.UNSIGNED_NUMBER:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 2471;
          this.constant_expression(0);
          this.state = 2476;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.CO) {
            {
              {
                this.state = 2472;
                this.match(VerilogParser.CO);
                this.state = 2473;
                this.constant_expression(0);
              }
            }
            this.state = 2478;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2479;
          this.match(VerilogParser.CL);
          this.state = 2480;
          this.generate_block_or_null();
        }
          break;
        case VerilogParser.DEFAULT:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 2482;
          this.match(VerilogParser.DEFAULT);
          this.state = 2484;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.CL) {
            {
              this.state = 2483;
              this.match(VerilogParser.CL);
            }
          }

          this.state = 2486;
          this.generate_block_or_null();
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public generate_block(): Generate_blockContext {
    let _localctx: Generate_blockContext = new Generate_blockContext(this._ctx, this.state);
    this.enterRule(_localctx, 288, VerilogParser.RULE_generate_block);
    let _la: number;
    try {
      this.state = 2501;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.ALWAYS:
        case VerilogParser.AND:
        case VerilogParser.ASSIGN:
        case VerilogParser.BUF:
        case VerilogParser.BUFIFONE:
        case VerilogParser.BUFIFZERO:
        case VerilogParser.CASE:
        case VerilogParser.CMOS:
        case VerilogParser.DEFPARAM:
        case VerilogParser.EVENT:
        case VerilogParser.FOR:
        case VerilogParser.FUNCTION:
        case VerilogParser.GENVAR:
        case VerilogParser.IF:
        case VerilogParser.INITIAL:
        case VerilogParser.INTEGER:
        case VerilogParser.LOCALPARAM:
        case VerilogParser.NAND:
        case VerilogParser.NMOS:
        case VerilogParser.NOR:
        case VerilogParser.NOT:
        case VerilogParser.NOTIFONE:
        case VerilogParser.NOTIFZERO:
        case VerilogParser.OR:
        case VerilogParser.PMOS:
        case VerilogParser.PULLDOWN:
        case VerilogParser.PULLUP:
        case VerilogParser.RCMOS:
        case VerilogParser.REAL:
        case VerilogParser.REALTIME:
        case VerilogParser.REG:
        case VerilogParser.RNMOS:
        case VerilogParser.RPMOS:
        case VerilogParser.RTRAN:
        case VerilogParser.RTRANIFONE:
        case VerilogParser.RTRANIFZERO:
        case VerilogParser.SUPPLYONE:
        case VerilogParser.SUPPLYZERO:
        case VerilogParser.TASK:
        case VerilogParser.TIME:
        case VerilogParser.TRAN:
        case VerilogParser.TRANIFONE:
        case VerilogParser.TRANIFZERO:
        case VerilogParser.TRI:
        case VerilogParser.TRIAND:
        case VerilogParser.TRIONE:
        case VerilogParser.TRIOR:
        case VerilogParser.TRIREG:
        case VerilogParser.TRIZERO:
        case VerilogParser.UWIRE:
        case VerilogParser.WAND:
        case VerilogParser.WIRE:
        case VerilogParser.WOR:
        case VerilogParser.XNOR:
        case VerilogParser.XOR:
        case VerilogParser.LP:
        case VerilogParser.ESCAPED_IDENTIFIER:
        case VerilogParser.SIMPLE_IDENTIFIER:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 2489;
          this.module_or_generate_item();
        }
          break;
        case VerilogParser.BEGIN:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 2490;
          this.match(VerilogParser.BEGIN);
          this.state = 2492;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.CL) {
            {
              this.state = 2491;
              this.generate_block_name();
            }
          }

          this.state = 2497;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << VerilogParser.ALWAYS) | (1 << VerilogParser.AND) | (1 << VerilogParser.ASSIGN) | (1 << VerilogParser.BUF) | (1 << VerilogParser.BUFIFONE) | (1 << VerilogParser.BUFIFZERO) | (1 << VerilogParser.CASE) | (1 << VerilogParser.CMOS) | (1 << VerilogParser.DEFPARAM))) !== 0) || ((((_la - 44)) & ~0x1F) === 0 && ((1 << (_la - 44)) & ((1 << (VerilogParser.EVENT - 44)) | (1 << (VerilogParser.FOR - 44)) | (1 << (VerilogParser.FUNCTION - 44)) | (1 << (VerilogParser.GENVAR - 44)) | (1 << (VerilogParser.IF - 44)) | (1 << (VerilogParser.INITIAL - 44)) | (1 << (VerilogParser.INTEGER - 44)) | (1 << (VerilogParser.LOCALPARAM - 44)) | (1 << (VerilogParser.NAND - 44)) | (1 << (VerilogParser.NMOS - 44)) | (1 << (VerilogParser.NOR - 44)))) !== 0) || ((((_la - 76)) & ~0x1F) === 0 && ((1 << (_la - 76)) & ((1 << (VerilogParser.NOT - 76)) | (1 << (VerilogParser.NOTIFONE - 76)) | (1 << (VerilogParser.NOTIFZERO - 76)) | (1 << (VerilogParser.OR - 76)) | (1 << (VerilogParser.PMOS - 76)) | (1 << (VerilogParser.PULLDOWN - 76)) | (1 << (VerilogParser.PULLUP - 76)) | (1 << (VerilogParser.RCMOS - 76)) | (1 << (VerilogParser.REAL - 76)) | (1 << (VerilogParser.REALTIME - 76)) | (1 << (VerilogParser.REG - 76)) | (1 << (VerilogParser.RNMOS - 76)) | (1 << (VerilogParser.RPMOS - 76)) | (1 << (VerilogParser.RTRAN - 76)) | (1 << (VerilogParser.RTRANIFONE - 76)) | (1 << (VerilogParser.RTRANIFZERO - 76)))) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (VerilogParser.SUPPLYONE - 111)) | (1 << (VerilogParser.SUPPLYZERO - 111)) | (1 << (VerilogParser.TASK - 111)) | (1 << (VerilogParser.TIME - 111)) | (1 << (VerilogParser.TRAN - 111)) | (1 << (VerilogParser.TRANIFONE - 111)) | (1 << (VerilogParser.TRANIFZERO - 111)) | (1 << (VerilogParser.TRI - 111)) | (1 << (VerilogParser.TRIAND - 111)) | (1 << (VerilogParser.TRIONE - 111)) | (1 << (VerilogParser.TRIOR - 111)) | (1 << (VerilogParser.TRIREG - 111)) | (1 << (VerilogParser.TRIZERO - 111)) | (1 << (VerilogParser.UWIRE - 111)) | (1 << (VerilogParser.WAND - 111)) | (1 << (VerilogParser.WIRE - 111)) | (1 << (VerilogParser.WOR - 111)) | (1 << (VerilogParser.XNOR - 111)) | (1 << (VerilogParser.XOR - 111)))) !== 0) || _la === VerilogParser.LP || _la === VerilogParser.ESCAPED_IDENTIFIER || _la === VerilogParser.SIMPLE_IDENTIFIER) {
            {
              {
                this.state = 2494;
                this.module_or_generate_item();
              }
            }
            this.state = 2499;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2500;
          this.match(VerilogParser.END);
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public generate_block_name(): Generate_block_nameContext {
    let _localctx: Generate_block_nameContext = new Generate_block_nameContext(this._ctx, this.state);
    this.enterRule(_localctx, 290, VerilogParser.RULE_generate_block_name);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2503;
        this.match(VerilogParser.CL);
        this.state = 2504;
        this.generate_block_identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public generate_block_or_null(): Generate_block_or_nullContext {
    let _localctx: Generate_block_or_nullContext = new Generate_block_or_nullContext(this._ctx, this.state);
    this.enterRule(_localctx, 292, VerilogParser.RULE_generate_block_or_null);
    try {
      this.state = 2508;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.ALWAYS:
        case VerilogParser.AND:
        case VerilogParser.ASSIGN:
        case VerilogParser.BEGIN:
        case VerilogParser.BUF:
        case VerilogParser.BUFIFONE:
        case VerilogParser.BUFIFZERO:
        case VerilogParser.CASE:
        case VerilogParser.CMOS:
        case VerilogParser.DEFPARAM:
        case VerilogParser.EVENT:
        case VerilogParser.FOR:
        case VerilogParser.FUNCTION:
        case VerilogParser.GENVAR:
        case VerilogParser.IF:
        case VerilogParser.INITIAL:
        case VerilogParser.INTEGER:
        case VerilogParser.LOCALPARAM:
        case VerilogParser.NAND:
        case VerilogParser.NMOS:
        case VerilogParser.NOR:
        case VerilogParser.NOT:
        case VerilogParser.NOTIFONE:
        case VerilogParser.NOTIFZERO:
        case VerilogParser.OR:
        case VerilogParser.PMOS:
        case VerilogParser.PULLDOWN:
        case VerilogParser.PULLUP:
        case VerilogParser.RCMOS:
        case VerilogParser.REAL:
        case VerilogParser.REALTIME:
        case VerilogParser.REG:
        case VerilogParser.RNMOS:
        case VerilogParser.RPMOS:
        case VerilogParser.RTRAN:
        case VerilogParser.RTRANIFONE:
        case VerilogParser.RTRANIFZERO:
        case VerilogParser.SUPPLYONE:
        case VerilogParser.SUPPLYZERO:
        case VerilogParser.TASK:
        case VerilogParser.TIME:
        case VerilogParser.TRAN:
        case VerilogParser.TRANIFONE:
        case VerilogParser.TRANIFZERO:
        case VerilogParser.TRI:
        case VerilogParser.TRIAND:
        case VerilogParser.TRIONE:
        case VerilogParser.TRIOR:
        case VerilogParser.TRIREG:
        case VerilogParser.TRIZERO:
        case VerilogParser.UWIRE:
        case VerilogParser.WAND:
        case VerilogParser.WIRE:
        case VerilogParser.WOR:
        case VerilogParser.XNOR:
        case VerilogParser.XOR:
        case VerilogParser.LP:
        case VerilogParser.ESCAPED_IDENTIFIER:
        case VerilogParser.SIMPLE_IDENTIFIER:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 2506;
          this.generate_block();
        }
          break;
        case VerilogParser.SC:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 2507;
          this.match(VerilogParser.SC);
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public udp_declaration(): Udp_declarationContext {
    let _localctx: Udp_declarationContext = new Udp_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 294, VerilogParser.RULE_udp_declaration);
    let _la: number;
    try {
      this.state = 2545;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 245, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 2513;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 2510;
                this.attribute_instance();
              }
            }
            this.state = 2515;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2516;
          this.match(VerilogParser.PRIMITIVE);
          this.state = 2517;
          this.udp_identifier();
          this.state = 2518;
          this.match(VerilogParser.LP);
          this.state = 2519;
          this.udp_port_list();
          this.state = 2520;
          this.match(VerilogParser.RP);
          this.state = 2521;
          this.match(VerilogParser.SC);
          this.state = 2523;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          do {
            {
              {
                this.state = 2522;
                this.udp_port_declaration();
              }
            }
            this.state = 2525;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          } while (_la === VerilogParser.INPUT || _la === VerilogParser.OUTPUT || _la === VerilogParser.REG || _la === VerilogParser.LP);
          this.state = 2527;
          this.udp_body();
          this.state = 2528;
          this.match(VerilogParser.ENDPRIMITIVE);
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 2533;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 2530;
                this.attribute_instance();
              }
            }
            this.state = 2535;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2536;
          this.match(VerilogParser.PRIMITIVE);
          this.state = 2537;
          this.udp_identifier();
          this.state = 2538;
          this.match(VerilogParser.LP);
          this.state = 2539;
          this.udp_declaration_port_list();
          this.state = 2540;
          this.match(VerilogParser.RP);
          this.state = 2541;
          this.match(VerilogParser.SC);
          this.state = 2542;
          this.udp_body();
          this.state = 2543;
          this.match(VerilogParser.ENDPRIMITIVE);
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public udp_port_list(): Udp_port_listContext {
    let _localctx: Udp_port_listContext = new Udp_port_listContext(this._ctx, this.state);
    this.enterRule(_localctx, 296, VerilogParser.RULE_udp_port_list);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2547;
        this.output_port_identifier();
        this.state = 2548;
        this.match(VerilogParser.CO);
        this.state = 2549;
        this.input_port_identifier();
        this.state = 2554;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 2550;
              this.match(VerilogParser.CO);
              this.state = 2551;
              this.input_port_identifier();
            }
          }
          this.state = 2556;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public udp_declaration_port_list(): Udp_declaration_port_listContext {
    let _localctx: Udp_declaration_port_listContext = new Udp_declaration_port_listContext(this._ctx, this.state);
    this.enterRule(_localctx, 298, VerilogParser.RULE_udp_declaration_port_list);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2557;
        this.udp_output_declaration();
        this.state = 2558;
        this.match(VerilogParser.CO);
        this.state = 2559;
        this.udp_input_declaration();
        this.state = 2564;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 2560;
              this.match(VerilogParser.CO);
              this.state = 2561;
              this.udp_input_declaration();
            }
          }
          this.state = 2566;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public udp_port_declaration(): Udp_port_declarationContext {
    let _localctx: Udp_port_declarationContext = new Udp_port_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 300, VerilogParser.RULE_udp_port_declaration);
    try {
      this.state = 2576;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 248, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 2567;
          this.udp_output_declaration();
          this.state = 2568;
          this.match(VerilogParser.SC);
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 2570;
          this.udp_input_declaration();
          this.state = 2571;
          this.match(VerilogParser.SC);
        }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 2573;
          this.udp_reg_declaration();
          this.state = 2574;
          this.match(VerilogParser.SC);
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public udp_output_declaration(): Udp_output_declarationContext {
    let _localctx: Udp_output_declarationContext = new Udp_output_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 302, VerilogParser.RULE_udp_output_declaration);
    let _la: number;
    try {
      this.state = 2599;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 252, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 2581;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 2578;
                this.attribute_instance();
              }
            }
            this.state = 2583;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2584;
          this.match(VerilogParser.OUTPUT);
          this.state = 2585;
          this.port_identifier();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 2589;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 2586;
                this.attribute_instance();
              }
            }
            this.state = 2591;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2592;
          this.match(VerilogParser.OUTPUT);
          this.state = 2593;
          this.match(VerilogParser.REG);
          this.state = 2594;
          this.port_identifier();
          this.state = 2597;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.EQ) {
            {
              this.state = 2595;
              this.match(VerilogParser.EQ);
              this.state = 2596;
              this.constant_expression(0);
            }
          }

        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public udp_input_declaration(): Udp_input_declarationContext {
    let _localctx: Udp_input_declarationContext = new Udp_input_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 304, VerilogParser.RULE_udp_input_declaration);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2604;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.LP) {
          {
            {
              this.state = 2601;
              this.attribute_instance();
            }
          }
          this.state = 2606;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 2607;
        this.match(VerilogParser.INPUT);
        this.state = 2608;
        this.list_of_port_identifiers();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public udp_reg_declaration(): Udp_reg_declarationContext {
    let _localctx: Udp_reg_declarationContext = new Udp_reg_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 306, VerilogParser.RULE_udp_reg_declaration);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2613;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.LP) {
          {
            {
              this.state = 2610;
              this.attribute_instance();
            }
          }
          this.state = 2615;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 2616;
        this.match(VerilogParser.REG);
        this.state = 2617;
        this.variable_identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public udp_body(): Udp_bodyContext {
    let _localctx: Udp_bodyContext = new Udp_bodyContext(this._ctx, this.state);
    this.enterRule(_localctx, 308, VerilogParser.RULE_udp_body);
    try {
      this.state = 2621;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 255, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 2619;
          this.combinational_body();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 2620;
          this.sequential_body();
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public combinational_body(): Combinational_bodyContext {
    let _localctx: Combinational_bodyContext = new Combinational_bodyContext(this._ctx, this.state);
    this.enterRule(_localctx, 310, VerilogParser.RULE_combinational_body);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2623;
        this.match(VerilogParser.TABLE);
        this.state = 2625;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
          {
            {
              this.state = 2624;
              this.combinational_entry();
            }
          }
          this.state = 2627;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        } while (_la === VerilogParser.LEVEL_ONLY_SYMBOL || _la === VerilogParser.OUTPUT_OR_LEVEL_SYMBOL);
        this.state = 2629;
        this.match(VerilogParser.ENDTABLE);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public combinational_entry(): Combinational_entryContext {
    let _localctx: Combinational_entryContext = new Combinational_entryContext(this._ctx, this.state);
    this.enterRule(_localctx, 312, VerilogParser.RULE_combinational_entry);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2631;
        this.level_input_list();
        this.state = 2632;
        this.match(VerilogParser.CL);
        this.state = 2633;
        this.output_symbol();
        this.state = 2634;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public sequential_body(): Sequential_bodyContext {
    let _localctx: Sequential_bodyContext = new Sequential_bodyContext(this._ctx, this.state);
    this.enterRule(_localctx, 314, VerilogParser.RULE_sequential_body);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2637;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.INITIAL) {
          {
            this.state = 2636;
            this.udp_initial_statement();
          }
        }

        this.state = 2639;
        this.match(VerilogParser.TABLE);
        this.state = 2641;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
          {
            {
              this.state = 2640;
              this.sequential_entry();
            }
          }
          this.state = 2643;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        } while (_la === VerilogParser.LP || ((((_la - 209)) & ~0x1F) === 0 && ((1 << (_la - 209)) & ((1 << (VerilogParser.EDGE_SYMBOL - 209)) | (1 << (VerilogParser.LEVEL_ONLY_SYMBOL - 209)) | (1 << (VerilogParser.OUTPUT_OR_LEVEL_SYMBOL - 209)))) !== 0));
        this.state = 2645;
        this.match(VerilogParser.ENDTABLE);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public udp_initial_statement(): Udp_initial_statementContext {
    let _localctx: Udp_initial_statementContext = new Udp_initial_statementContext(this._ctx, this.state);
    this.enterRule(_localctx, 316, VerilogParser.RULE_udp_initial_statement);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2647;
        this.match(VerilogParser.INITIAL);
        this.state = 2648;
        this.output_port_identifier();
        this.state = 2649;
        this.match(VerilogParser.EQ);
        this.state = 2650;
        this.init_val();
        this.state = 2651;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public init_val(): Init_valContext {
    let _localctx: Init_valContext = new Init_valContext(this._ctx, this.state);
    this.enterRule(_localctx, 318, VerilogParser.RULE_init_val);
    try {
      this.state = 2655;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 259, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 2653;
          this.binary_number();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 2654;
          this.unsigned_number();
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public sequential_entry(): Sequential_entryContext {
    let _localctx: Sequential_entryContext = new Sequential_entryContext(this._ctx, this.state);
    this.enterRule(_localctx, 320, VerilogParser.RULE_sequential_entry);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2657;
        this.seq_input_list();
        this.state = 2658;
        this.match(VerilogParser.CL);
        this.state = 2659;
        this.current_state();
        this.state = 2660;
        this.match(VerilogParser.CL);
        this.state = 2661;
        this.next_state();
        this.state = 2662;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public seq_input_list(): Seq_input_listContext {
    let _localctx: Seq_input_listContext = new Seq_input_listContext(this._ctx, this.state);
    this.enterRule(_localctx, 322, VerilogParser.RULE_seq_input_list);
    try {
      this.state = 2666;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 260, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 2664;
          this.level_input_list();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 2665;
          this.edge_input_list();
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public level_input_list(): Level_input_listContext {
    let _localctx: Level_input_listContext = new Level_input_listContext(this._ctx, this.state);
    this.enterRule(_localctx, 324, VerilogParser.RULE_level_input_list);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2669;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
          {
            {
              this.state = 2668;
              this.level_symbol();
            }
          }
          this.state = 2671;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        } while (_la === VerilogParser.LEVEL_ONLY_SYMBOL || _la === VerilogParser.OUTPUT_OR_LEVEL_SYMBOL);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public edge_input_list(): Edge_input_listContext {
    let _localctx: Edge_input_listContext = new Edge_input_listContext(this._ctx, this.state);
    this.enterRule(_localctx, 326, VerilogParser.RULE_edge_input_list);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2676;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.LEVEL_ONLY_SYMBOL || _la === VerilogParser.OUTPUT_OR_LEVEL_SYMBOL) {
          {
            {
              this.state = 2673;
              this.level_symbol();
            }
          }
          this.state = 2678;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 2679;
        this.edge_indicator();
        this.state = 2683;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.LEVEL_ONLY_SYMBOL || _la === VerilogParser.OUTPUT_OR_LEVEL_SYMBOL) {
          {
            {
              this.state = 2680;
              this.level_symbol();
            }
          }
          this.state = 2685;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public edge_indicator(): Edge_indicatorContext {
    let _localctx: Edge_indicatorContext = new Edge_indicatorContext(this._ctx, this.state);
    this.enterRule(_localctx, 328, VerilogParser.RULE_edge_indicator);
    try {
      this.state = 2692;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.LP:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 2686;
          this.match(VerilogParser.LP);
          this.state = 2687;
          this.level_symbol();
          this.state = 2688;
          this.level_symbol();
          this.state = 2689;
          this.match(VerilogParser.RP);
        }
          break;
        case VerilogParser.EDGE_SYMBOL:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 2691;
          this.edge_symbol();
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public current_state(): Current_stateContext {
    let _localctx: Current_stateContext = new Current_stateContext(this._ctx, this.state);
    this.enterRule(_localctx, 330, VerilogParser.RULE_current_state);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2694;
        this.level_symbol();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public next_state(): Next_stateContext {
    let _localctx: Next_stateContext = new Next_stateContext(this._ctx, this.state);
    this.enterRule(_localctx, 332, VerilogParser.RULE_next_state);
    try {
      this.state = 2698;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.OUTPUT_OR_LEVEL_SYMBOL:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 2696;
          this.output_symbol();
        }
          break;
        case VerilogParser.MI:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 2697;
          this.match(VerilogParser.MI);
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public output_symbol(): Output_symbolContext {
    let _localctx: Output_symbolContext = new Output_symbolContext(this._ctx, this.state);
    this.enterRule(_localctx, 334, VerilogParser.RULE_output_symbol);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2700;
        this.match(VerilogParser.OUTPUT_OR_LEVEL_SYMBOL);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public level_symbol(): Level_symbolContext {
    let _localctx: Level_symbolContext = new Level_symbolContext(this._ctx, this.state);
    this.enterRule(_localctx, 336, VerilogParser.RULE_level_symbol);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2702;
        _la = this._input.LA(1);
        if (!(_la === VerilogParser.LEVEL_ONLY_SYMBOL || _la === VerilogParser.OUTPUT_OR_LEVEL_SYMBOL)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public edge_symbol(): Edge_symbolContext {
    let _localctx: Edge_symbolContext = new Edge_symbolContext(this._ctx, this.state);
    this.enterRule(_localctx, 338, VerilogParser.RULE_edge_symbol);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2704;
        this.match(VerilogParser.EDGE_SYMBOL);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public udp_instantiation(): Udp_instantiationContext {
    let _localctx: Udp_instantiationContext = new Udp_instantiationContext(this._ctx, this.state);
    this.enterRule(_localctx, 340, VerilogParser.RULE_udp_instantiation);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2706;
        this.udp_identifier();
        this.state = 2708;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 266, this._ctx)) {
          case 1: {
            this.state = 2707;
            this.drive_strength();
          }
            break;
        }
        this.state = 2711;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.HA) {
          {
            this.state = 2710;
            this.delay2();
          }
        }

        this.state = 2713;
        this.udp_instance();
        this.state = 2718;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 2714;
              this.match(VerilogParser.CO);
              this.state = 2715;
              this.udp_instance();
            }
          }
          this.state = 2720;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 2721;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public udp_instance(): Udp_instanceContext {
    let _localctx: Udp_instanceContext = new Udp_instanceContext(this._ctx, this.state);
    this.enterRule(_localctx, 342, VerilogParser.RULE_udp_instance);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2724;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.ESCAPED_IDENTIFIER || _la === VerilogParser.SIMPLE_IDENTIFIER) {
          {
            this.state = 2723;
            this.name_of_udp_instance();
          }
        }

        this.state = 2726;
        this.match(VerilogParser.LP);
        this.state = 2727;
        this.output_terminal();
        this.state = 2728;
        this.match(VerilogParser.CO);
        this.state = 2729;
        this.input_terminal();
        this.state = 2734;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 2730;
              this.match(VerilogParser.CO);
              this.state = 2731;
              this.input_terminal();
            }
          }
          this.state = 2736;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 2737;
        this.match(VerilogParser.RP);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public name_of_udp_instance(): Name_of_udp_instanceContext {
    let _localctx: Name_of_udp_instanceContext = new Name_of_udp_instanceContext(this._ctx, this.state);
    this.enterRule(_localctx, 344, VerilogParser.RULE_name_of_udp_instance);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2739;
        this.udp_instance_identifier();
        this.state = 2741;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.LB) {
          {
            this.state = 2740;
            this.range_();
          }
        }

      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public continuous_assign(): Continuous_assignContext {
    let _localctx: Continuous_assignContext = new Continuous_assignContext(this._ctx, this.state);
    this.enterRule(_localctx, 346, VerilogParser.RULE_continuous_assign);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2743;
        this.match(VerilogParser.ASSIGN);
        this.state = 2745;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.LP) {
          {
            this.state = 2744;
            this.drive_strength();
          }
        }

        this.state = 2748;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.HA) {
          {
            this.state = 2747;
            this.delay3();
          }
        }

        this.state = 2750;
        this.list_of_net_assignments();
        this.state = 2751;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public list_of_net_assignments(): List_of_net_assignmentsContext {
    let _localctx: List_of_net_assignmentsContext = new List_of_net_assignmentsContext(this._ctx, this.state);
    this.enterRule(_localctx, 348, VerilogParser.RULE_list_of_net_assignments);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2753;
        this.net_assignment();
        this.state = 2758;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 2754;
              this.match(VerilogParser.CO);
              this.state = 2755;
              this.net_assignment();
            }
          }
          this.state = 2760;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public net_assignment(): Net_assignmentContext {
    let _localctx: Net_assignmentContext = new Net_assignmentContext(this._ctx, this.state);
    this.enterRule(_localctx, 350, VerilogParser.RULE_net_assignment);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2761;
        this.net_lvalue();
        this.state = 2762;
        this.match(VerilogParser.EQ);
        this.state = 2763;
        this.expression(0);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public initial_construct(): Initial_constructContext {
    let _localctx: Initial_constructContext = new Initial_constructContext(this._ctx, this.state);
    this.enterRule(_localctx, 352, VerilogParser.RULE_initial_construct);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2765;
        this.match(VerilogParser.INITIAL);
        this.state = 2766;
        this.statement();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public always_construct(): Always_constructContext {
    let _localctx: Always_constructContext = new Always_constructContext(this._ctx, this.state);
    this.enterRule(_localctx, 354, VerilogParser.RULE_always_construct);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2768;
        this.match(VerilogParser.ALWAYS);
        this.state = 2769;
        this.statement();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public blocking_assignment(): Blocking_assignmentContext {
    let _localctx: Blocking_assignmentContext = new Blocking_assignmentContext(this._ctx, this.state);
    this.enterRule(_localctx, 356, VerilogParser.RULE_blocking_assignment);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2771;
        this.variable_lvalue();
        this.state = 2772;
        this.match(VerilogParser.EQ);
        this.state = 2774;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.REPEAT || _la === VerilogParser.AT || _la === VerilogParser.HA) {
          {
            this.state = 2773;
            this.delay_or_event_control();
          }
        }

        this.state = 2776;
        this.expression(0);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public nonblocking_assignment(): Nonblocking_assignmentContext {
    let _localctx: Nonblocking_assignmentContext = new Nonblocking_assignmentContext(this._ctx, this.state);
    this.enterRule(_localctx, 358, VerilogParser.RULE_nonblocking_assignment);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2778;
        this.variable_lvalue();
        this.state = 2779;
        this.match(VerilogParser.LTEQ);
        this.state = 2781;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.REPEAT || _la === VerilogParser.AT || _la === VerilogParser.HA) {
          {
            this.state = 2780;
            this.delay_or_event_control();
          }
        }

        this.state = 2783;
        this.expression(0);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public procedural_continuous_assignments(): Procedural_continuous_assignmentsContext {
    let _localctx: Procedural_continuous_assignmentsContext = new Procedural_continuous_assignmentsContext(this._ctx, this.state);
    this.enterRule(_localctx, 360, VerilogParser.RULE_procedural_continuous_assignments);
    try {
      this.state = 2793;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.ASSIGN:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 2785;
          this.match(VerilogParser.ASSIGN);
          this.state = 2786;
          this.variable_assignment();
        }
          break;
        case VerilogParser.DEASSIGN:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 2787;
          this.match(VerilogParser.DEASSIGN);
          this.state = 2788;
          this.variable_lvalue();
        }
          break;
        case VerilogParser.FORCE:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 2789;
          this.match(VerilogParser.FORCE);
          this.state = 2790;
          this.variable_assignment();
        }
          break;
        case VerilogParser.RELEASE:
          this.enterOuterAlt(_localctx, 4);
        {
          this.state = 2791;
          this.match(VerilogParser.RELEASE);
          this.state = 2792;
          this.variable_lvalue();
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public variable_assignment(): Variable_assignmentContext {
    let _localctx: Variable_assignmentContext = new Variable_assignmentContext(this._ctx, this.state);
    this.enterRule(_localctx, 362, VerilogParser.RULE_variable_assignment);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2795;
        this.variable_lvalue();
        this.state = 2796;
        this.match(VerilogParser.EQ);
        this.state = 2797;
        this.expression(0);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public par_block(): Par_blockContext {
    let _localctx: Par_blockContext = new Par_blockContext(this._ctx, this.state);
    this.enterRule(_localctx, 364, VerilogParser.RULE_par_block);
    let _la: number;
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2799;
        this.match(VerilogParser.FORK);
        this.state = 2807;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.CL) {
          {
            this.state = 2800;
            this.block_name();
            this.state = 2804;
            this._errHandler.sync(this);
            _alt = this.interpreter.adaptivePredict(this._input, 278, this._ctx);
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
              if (_alt === 1) {
                {
                  {
                    this.state = 2801;
                    this.block_item_declaration();
                  }
                }
              }
              this.state = 2806;
              this._errHandler.sync(this);
              _alt = this.interpreter.adaptivePredict(this._input, 278, this._ctx);
            }
          }
        }

        this.state = 2812;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << VerilogParser.ASSIGN) | (1 << VerilogParser.BEGIN) | (1 << VerilogParser.CASE) | (1 << VerilogParser.CASEX) | (1 << VerilogParser.CASEZ) | (1 << VerilogParser.DEASSIGN) | (1 << VerilogParser.DISABLE))) !== 0) || ((((_la - 45)) & ~0x1F) === 0 && ((1 << (_la - 45)) & ((1 << (VerilogParser.FOR - 45)) | (1 << (VerilogParser.FORCE - 45)) | (1 << (VerilogParser.FOREVER - 45)) | (1 << (VerilogParser.FORK - 45)) | (1 << (VerilogParser.IF - 45)))) !== 0) || _la === VerilogParser.RELEASE || _la === VerilogParser.REPEAT || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (VerilogParser.WAIT - 128)) | (1 << (VerilogParser.WHILE - 128)) | (1 << (VerilogParser.AT - 128)))) !== 0) || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (VerilogParser.HA - 163)) | (1 << (VerilogParser.LC - 163)) | (1 << (VerilogParser.LP - 163)) | (1 << (VerilogParser.MIGT - 163)) | (1 << (VerilogParser.ESCAPED_IDENTIFIER - 163)))) !== 0) || _la === VerilogParser.SIMPLE_IDENTIFIER || _la === VerilogParser.SYSTEM_TF_IDENTIFIER) {
          {
            {
              this.state = 2809;
              this.statement();
            }
          }
          this.state = 2814;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 2815;
        this.match(VerilogParser.JOIN);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public block_name(): Block_nameContext {
    let _localctx: Block_nameContext = new Block_nameContext(this._ctx, this.state);
    this.enterRule(_localctx, 366, VerilogParser.RULE_block_name);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2817;
        this.match(VerilogParser.CL);
        this.state = 2818;
        this.block_identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public seq_block(): Seq_blockContext {
    let _localctx: Seq_blockContext = new Seq_blockContext(this._ctx, this.state);
    this.enterRule(_localctx, 368, VerilogParser.RULE_seq_block);
    let _la: number;
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2820;
        this.match(VerilogParser.BEGIN);
        this.state = 2828;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.CL) {
          {
            this.state = 2821;
            this.block_name();
            this.state = 2825;
            this._errHandler.sync(this);
            _alt = this.interpreter.adaptivePredict(this._input, 281, this._ctx);
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
              if (_alt === 1) {
                {
                  {
                    this.state = 2822;
                    this.block_item_declaration();
                  }
                }
              }
              this.state = 2827;
              this._errHandler.sync(this);
              _alt = this.interpreter.adaptivePredict(this._input, 281, this._ctx);
            }
          }
        }

        this.state = 2833;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << VerilogParser.ASSIGN) | (1 << VerilogParser.BEGIN) | (1 << VerilogParser.CASE) | (1 << VerilogParser.CASEX) | (1 << VerilogParser.CASEZ) | (1 << VerilogParser.DEASSIGN) | (1 << VerilogParser.DISABLE))) !== 0) || ((((_la - 45)) & ~0x1F) === 0 && ((1 << (_la - 45)) & ((1 << (VerilogParser.FOR - 45)) | (1 << (VerilogParser.FORCE - 45)) | (1 << (VerilogParser.FOREVER - 45)) | (1 << (VerilogParser.FORK - 45)) | (1 << (VerilogParser.IF - 45)))) !== 0) || _la === VerilogParser.RELEASE || _la === VerilogParser.REPEAT || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (VerilogParser.WAIT - 128)) | (1 << (VerilogParser.WHILE - 128)) | (1 << (VerilogParser.AT - 128)))) !== 0) || ((((_la - 163)) & ~0x1F) === 0 && ((1 << (_la - 163)) & ((1 << (VerilogParser.HA - 163)) | (1 << (VerilogParser.LC - 163)) | (1 << (VerilogParser.LP - 163)) | (1 << (VerilogParser.MIGT - 163)) | (1 << (VerilogParser.ESCAPED_IDENTIFIER - 163)))) !== 0) || _la === VerilogParser.SIMPLE_IDENTIFIER || _la === VerilogParser.SYSTEM_TF_IDENTIFIER) {
          {
            {
              this.state = 2830;
              this.statement();
            }
          }
          this.state = 2835;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 2836;
        this.match(VerilogParser.END);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public statement(): StatementContext {
    let _localctx: StatementContext = new StatementContext(this._ctx, this.state);
    this.enterRule(_localctx, 370, VerilogParser.RULE_statement);
    let _la: number;
    try {
      this.state = 2942;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 298, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 2841;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 2838;
                this.attribute_instance();
              }
            }
            this.state = 2843;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2844;
          this.blocking_assignment();
          this.state = 2845;
          this.match(VerilogParser.SC);
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 2850;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 2847;
                this.attribute_instance();
              }
            }
            this.state = 2852;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2853;
          this.case_statement();
        }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 2857;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 2854;
                this.attribute_instance();
              }
            }
            this.state = 2859;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2860;
          this.conditional_statement();
        }
          break;

        case 4:
          this.enterOuterAlt(_localctx, 4);
        {
          this.state = 2864;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 2861;
                this.attribute_instance();
              }
            }
            this.state = 2866;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2867;
          this.disable_statement();
        }
          break;

        case 5:
          this.enterOuterAlt(_localctx, 5);
        {
          this.state = 2871;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 2868;
                this.attribute_instance();
              }
            }
            this.state = 2873;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2874;
          this.event_trigger();
        }
          break;

        case 6:
          this.enterOuterAlt(_localctx, 6);
        {
          this.state = 2878;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 2875;
                this.attribute_instance();
              }
            }
            this.state = 2880;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2881;
          this.loop_statement();
        }
          break;

        case 7:
          this.enterOuterAlt(_localctx, 7);
        {
          this.state = 2885;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 2882;
                this.attribute_instance();
              }
            }
            this.state = 2887;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2888;
          this.nonblocking_assignment();
          this.state = 2889;
          this.match(VerilogParser.SC);
        }
          break;

        case 8:
          this.enterOuterAlt(_localctx, 8);
        {
          this.state = 2894;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 2891;
                this.attribute_instance();
              }
            }
            this.state = 2896;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2897;
          this.par_block();
        }
          break;

        case 9:
          this.enterOuterAlt(_localctx, 9);
        {
          this.state = 2901;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 2898;
                this.attribute_instance();
              }
            }
            this.state = 2903;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2904;
          this.procedural_continuous_assignments();
          this.state = 2905;
          this.match(VerilogParser.SC);
        }
          break;

        case 10:
          this.enterOuterAlt(_localctx, 10);
        {
          this.state = 2910;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 2907;
                this.attribute_instance();
              }
            }
            this.state = 2912;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2913;
          this.procedural_timing_control_statement();
        }
          break;

        case 11:
          this.enterOuterAlt(_localctx, 11);
        {
          this.state = 2917;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 2914;
                this.attribute_instance();
              }
            }
            this.state = 2919;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2920;
          this.seq_block();
        }
          break;

        case 12:
          this.enterOuterAlt(_localctx, 12);
        {
          this.state = 2924;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 2921;
                this.attribute_instance();
              }
            }
            this.state = 2926;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2927;
          this.system_task_enable();
        }
          break;

        case 13:
          this.enterOuterAlt(_localctx, 13);
        {
          this.state = 2931;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 2928;
                this.attribute_instance();
              }
            }
            this.state = 2933;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2934;
          this.task_enable();
        }
          break;

        case 14:
          this.enterOuterAlt(_localctx, 14);
        {
          this.state = 2938;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 2935;
                this.attribute_instance();
              }
            }
            this.state = 2940;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2941;
          this.wait_statement();
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public statement_or_null(): Statement_or_nullContext {
    let _localctx: Statement_or_nullContext = new Statement_or_nullContext(this._ctx, this.state);
    this.enterRule(_localctx, 372, VerilogParser.RULE_statement_or_null);
    let _la: number;
    try {
      this.state = 2952;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 300, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 2944;
          this.statement();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 2948;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.LP) {
            {
              {
                this.state = 2945;
                this.attribute_instance();
              }
            }
            this.state = 2950;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 2951;
          this.match(VerilogParser.SC);
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public function_statement(): Function_statementContext {
    let _localctx: Function_statementContext = new Function_statementContext(this._ctx, this.state);
    this.enterRule(_localctx, 374, VerilogParser.RULE_function_statement);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2954;
        this.statement();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public delay_control(): Delay_controlContext {
    let _localctx: Delay_controlContext = new Delay_controlContext(this._ctx, this.state);
    this.enterRule(_localctx, 376, VerilogParser.RULE_delay_control);
    try {
      this.state = 2963;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 301, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 2956;
          this.match(VerilogParser.HA);
          this.state = 2957;
          this.delay_value();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 2958;
          this.match(VerilogParser.HA);
          this.state = 2959;
          this.match(VerilogParser.LP);
          this.state = 2960;
          this.mintypmax_expression();
          this.state = 2961;
          this.match(VerilogParser.RP);
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public delay_or_event_control(): Delay_or_event_controlContext {
    let _localctx: Delay_or_event_controlContext = new Delay_or_event_controlContext(this._ctx, this.state);
    this.enterRule(_localctx, 378, VerilogParser.RULE_delay_or_event_control);
    try {
      this.state = 2973;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.HA:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 2965;
          this.delay_control();
        }
          break;
        case VerilogParser.AT:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 2966;
          this.event_control();
        }
          break;
        case VerilogParser.REPEAT:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 2967;
          this.match(VerilogParser.REPEAT);
          this.state = 2968;
          this.match(VerilogParser.LP);
          this.state = 2969;
          this.expression(0);
          this.state = 2970;
          this.match(VerilogParser.RP);
          this.state = 2971;
          this.event_control();
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public disable_statement(): Disable_statementContext {
    let _localctx: Disable_statementContext = new Disable_statementContext(this._ctx, this.state);
    this.enterRule(_localctx, 380, VerilogParser.RULE_disable_statement);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2975;
        this.match(VerilogParser.DISABLE);
        this.state = 2976;
        this.hierarchical_identifier();
        this.state = 2977;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public event_control(): Event_controlContext {
    let _localctx: Event_controlContext = new Event_controlContext(this._ctx, this.state);
    this.enterRule(_localctx, 382, VerilogParser.RULE_event_control);
    try {
      this.state = 2992;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 303, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 2979;
          this.match(VerilogParser.AT);
          this.state = 2980;
          this.hierarchical_identifier();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 2981;
          this.match(VerilogParser.AT);
          this.state = 2982;
          this.match(VerilogParser.LP);
          this.state = 2983;
          this.event_expression(0);
          this.state = 2984;
          this.match(VerilogParser.RP);
        }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 2986;
          this.match(VerilogParser.AT);
          this.state = 2987;
          this.match(VerilogParser.AS);
        }
          break;

        case 4:
          this.enterOuterAlt(_localctx, 4);
        {
          this.state = 2988;
          this.match(VerilogParser.AT);
          this.state = 2989;
          this.match(VerilogParser.LP);
          this.state = 2990;
          this.match(VerilogParser.AS);
          this.state = 2991;
          this.match(VerilogParser.RP);
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public event_trigger(): Event_triggerContext {
    let _localctx: Event_triggerContext = new Event_triggerContext(this._ctx, this.state);
    this.enterRule(_localctx, 384, VerilogParser.RULE_event_trigger);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 2994;
        this.match(VerilogParser.MIGT);
        this.state = 2995;
        this.hierarchical_identifier();
        this.state = 2997;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.LB) {
          {
            this.state = 2996;
            this.bit_select();
          }
        }

        this.state = 2999;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  public event_expression(): Event_expressionContext;
  public event_expression(_p: number): Event_expressionContext;
  // @RuleVersion(0)
  public event_expression(_p?: number): Event_expressionContext {
    if (_p === undefined) {
      _p = 0;
    }

    let _parentctx: ParserRuleContext = this._ctx;
    let _parentState: number = this.state;
    let _localctx: Event_expressionContext = new Event_expressionContext(this._ctx, _parentState);
    let _prevctx: Event_expressionContext = _localctx;
    let _startState: number = 386;
    this.enterRecursionRule(_localctx, 386, VerilogParser.RULE_event_expression, _p);
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3007;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case VerilogParser.AM:
          case VerilogParser.CA:
          case VerilogParser.CATI:
          case VerilogParser.EM:
          case VerilogParser.LC:
          case VerilogParser.LP:
          case VerilogParser.MI:
          case VerilogParser.PL:
          case VerilogParser.TI:
          case VerilogParser.TIAM:
          case VerilogParser.TICA:
          case VerilogParser.TIVL:
          case VerilogParser.VL:
          case VerilogParser.BINARY_BASE:
          case VerilogParser.DECIMAL_BASE:
          case VerilogParser.ESCAPED_IDENTIFIER:
          case VerilogParser.EXPONENTIAL_NUMBER:
          case VerilogParser.FIXED_POINT_NUMBER:
          case VerilogParser.HEX_BASE:
          case VerilogParser.OCTAL_BASE:
          case VerilogParser.SIMPLE_IDENTIFIER:
          case VerilogParser.STRING:
          case VerilogParser.SYSTEM_TF_IDENTIFIER:
          case VerilogParser.UNSIGNED_NUMBER: {
            this.state = 3002;
            this.expression(0);
          }
            break;
          case VerilogParser.POSEDGE: {
            this.state = 3003;
            this.match(VerilogParser.POSEDGE);
            this.state = 3004;
            this.expression(0);
          }
            break;
          case VerilogParser.NEGEDGE: {
            this.state = 3005;
            this.match(VerilogParser.NEGEDGE);
            this.state = 3006;
            this.expression(0);
          }
            break;
          default:
            throw new NoViableAltException(this);
        }
        this._ctx._stop = this._input.tryLT(-1);
        this.state = 3017;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 307, this._ctx);
        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            if (this._parseListeners != null) {
              this.triggerExitRuleEvent();
            }
            _prevctx = _localctx;
            {
              this.state = 3015;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 306, this._ctx)) {
                case 1: {
                  _localctx = new Event_expressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_event_expression);
                  this.state = 3009;
                  if (!(this.precpred(this._ctx, 2))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
                  }
                  this.state = 3010;
                  this.match(VerilogParser.OR);
                  this.state = 3011;
                  this.event_expression(3);
                }
                  break;

                case 2: {
                  _localctx = new Event_expressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_event_expression);
                  this.state = 3012;
                  if (!(this.precpred(this._ctx, 1))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
                  }
                  this.state = 3013;
                  this.match(VerilogParser.CO);
                  this.state = 3014;
                  this.event_expression(2);
                }
                  break;
              }
            }
          }
          this.state = 3019;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 307, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public procedural_timing_control(): Procedural_timing_controlContext {
    let _localctx: Procedural_timing_controlContext = new Procedural_timing_controlContext(this._ctx, this.state);
    this.enterRule(_localctx, 388, VerilogParser.RULE_procedural_timing_control);
    try {
      this.state = 3022;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.HA:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 3020;
          this.delay_control();
        }
          break;
        case VerilogParser.AT:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 3021;
          this.event_control();
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public procedural_timing_control_statement(): Procedural_timing_control_statementContext {
    let _localctx: Procedural_timing_control_statementContext = new Procedural_timing_control_statementContext(this._ctx, this.state);
    this.enterRule(_localctx, 390, VerilogParser.RULE_procedural_timing_control_statement);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3024;
        this.procedural_timing_control();
        this.state = 3025;
        this.statement_or_null();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public wait_statement(): Wait_statementContext {
    let _localctx: Wait_statementContext = new Wait_statementContext(this._ctx, this.state);
    this.enterRule(_localctx, 392, VerilogParser.RULE_wait_statement);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3027;
        this.match(VerilogParser.WAIT);
        this.state = 3028;
        this.match(VerilogParser.LP);
        this.state = 3029;
        this.expression(0);
        this.state = 3030;
        this.match(VerilogParser.RP);
        this.state = 3031;
        this.statement_or_null();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public conditional_statement(): Conditional_statementContext {
    let _localctx: Conditional_statementContext = new Conditional_statementContext(this._ctx, this.state);
    this.enterRule(_localctx, 394, VerilogParser.RULE_conditional_statement);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3033;
        this.match(VerilogParser.IF);
        this.state = 3034;
        this.match(VerilogParser.LP);
        this.state = 3035;
        this.expression(0);
        this.state = 3036;
        this.match(VerilogParser.RP);
        this.state = 3037;
        this.statement_or_null();
        this.state = 3040;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 309, this._ctx)) {
          case 1: {
            this.state = 3038;
            this.match(VerilogParser.ELSE);
            this.state = 3039;
            this.statement_or_null();
          }
            break;
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public case_statement(): Case_statementContext {
    let _localctx: Case_statementContext = new Case_statementContext(this._ctx, this.state);
    this.enterRule(_localctx, 396, VerilogParser.RULE_case_statement);
    let _la: number;
    try {
      this.state = 3075;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.CASE:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 3042;
          this.match(VerilogParser.CASE);
          this.state = 3043;
          this.match(VerilogParser.LP);
          this.state = 3044;
          this.expression(0);
          this.state = 3045;
          this.match(VerilogParser.RP);
          this.state = 3047;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          do {
            {
              {
                this.state = 3046;
                this.case_item();
              }
            }
            this.state = 3049;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          } while (_la === VerilogParser.DEFAULT || ((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (VerilogParser.AM - 137)) | (1 << (VerilogParser.CA - 137)) | (1 << (VerilogParser.CATI - 137)) | (1 << (VerilogParser.EM - 137)) | (1 << (VerilogParser.LC - 137)) | (1 << (VerilogParser.LP - 137)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (VerilogParser.MI - 171)) | (1 << (VerilogParser.PL - 171)) | (1 << (VerilogParser.TI - 171)) | (1 << (VerilogParser.TIAM - 171)) | (1 << (VerilogParser.TICA - 171)) | (1 << (VerilogParser.TIVL - 171)) | (1 << (VerilogParser.VL - 171)) | (1 << (VerilogParser.BINARY_BASE - 171)) | (1 << (VerilogParser.DECIMAL_BASE - 171)) | (1 << (VerilogParser.ESCAPED_IDENTIFIER - 171)) | (1 << (VerilogParser.EXPONENTIAL_NUMBER - 171)) | (1 << (VerilogParser.FIXED_POINT_NUMBER - 171)) | (1 << (VerilogParser.HEX_BASE - 171)) | (1 << (VerilogParser.OCTAL_BASE - 171)) | (1 << (VerilogParser.SIMPLE_IDENTIFIER - 171)) | (1 << (VerilogParser.STRING - 171)) | (1 << (VerilogParser.SYSTEM_TF_IDENTIFIER - 171)) | (1 << (VerilogParser.UNSIGNED_NUMBER - 171)))) !== 0));
          this.state = 3051;
          this.match(VerilogParser.ENDCASE);
        }
          break;
        case VerilogParser.CASEZ:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 3053;
          this.match(VerilogParser.CASEZ);
          this.state = 3054;
          this.match(VerilogParser.LP);
          this.state = 3055;
          this.expression(0);
          this.state = 3056;
          this.match(VerilogParser.RP);
          this.state = 3058;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          do {
            {
              {
                this.state = 3057;
                this.case_item();
              }
            }
            this.state = 3060;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          } while (_la === VerilogParser.DEFAULT || ((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (VerilogParser.AM - 137)) | (1 << (VerilogParser.CA - 137)) | (1 << (VerilogParser.CATI - 137)) | (1 << (VerilogParser.EM - 137)) | (1 << (VerilogParser.LC - 137)) | (1 << (VerilogParser.LP - 137)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (VerilogParser.MI - 171)) | (1 << (VerilogParser.PL - 171)) | (1 << (VerilogParser.TI - 171)) | (1 << (VerilogParser.TIAM - 171)) | (1 << (VerilogParser.TICA - 171)) | (1 << (VerilogParser.TIVL - 171)) | (1 << (VerilogParser.VL - 171)) | (1 << (VerilogParser.BINARY_BASE - 171)) | (1 << (VerilogParser.DECIMAL_BASE - 171)) | (1 << (VerilogParser.ESCAPED_IDENTIFIER - 171)) | (1 << (VerilogParser.EXPONENTIAL_NUMBER - 171)) | (1 << (VerilogParser.FIXED_POINT_NUMBER - 171)) | (1 << (VerilogParser.HEX_BASE - 171)) | (1 << (VerilogParser.OCTAL_BASE - 171)) | (1 << (VerilogParser.SIMPLE_IDENTIFIER - 171)) | (1 << (VerilogParser.STRING - 171)) | (1 << (VerilogParser.SYSTEM_TF_IDENTIFIER - 171)) | (1 << (VerilogParser.UNSIGNED_NUMBER - 171)))) !== 0));
          this.state = 3062;
          this.match(VerilogParser.ENDCASE);
        }
          break;
        case VerilogParser.CASEX:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 3064;
          this.match(VerilogParser.CASEX);
          this.state = 3065;
          this.match(VerilogParser.LP);
          this.state = 3066;
          this.expression(0);
          this.state = 3067;
          this.match(VerilogParser.RP);
          this.state = 3069;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          do {
            {
              {
                this.state = 3068;
                this.case_item();
              }
            }
            this.state = 3071;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          } while (_la === VerilogParser.DEFAULT || ((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (VerilogParser.AM - 137)) | (1 << (VerilogParser.CA - 137)) | (1 << (VerilogParser.CATI - 137)) | (1 << (VerilogParser.EM - 137)) | (1 << (VerilogParser.LC - 137)) | (1 << (VerilogParser.LP - 137)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (VerilogParser.MI - 171)) | (1 << (VerilogParser.PL - 171)) | (1 << (VerilogParser.TI - 171)) | (1 << (VerilogParser.TIAM - 171)) | (1 << (VerilogParser.TICA - 171)) | (1 << (VerilogParser.TIVL - 171)) | (1 << (VerilogParser.VL - 171)) | (1 << (VerilogParser.BINARY_BASE - 171)) | (1 << (VerilogParser.DECIMAL_BASE - 171)) | (1 << (VerilogParser.ESCAPED_IDENTIFIER - 171)) | (1 << (VerilogParser.EXPONENTIAL_NUMBER - 171)) | (1 << (VerilogParser.FIXED_POINT_NUMBER - 171)) | (1 << (VerilogParser.HEX_BASE - 171)) | (1 << (VerilogParser.OCTAL_BASE - 171)) | (1 << (VerilogParser.SIMPLE_IDENTIFIER - 171)) | (1 << (VerilogParser.STRING - 171)) | (1 << (VerilogParser.SYSTEM_TF_IDENTIFIER - 171)) | (1 << (VerilogParser.UNSIGNED_NUMBER - 171)))) !== 0));
          this.state = 3073;
          this.match(VerilogParser.ENDCASE);
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public case_item(): Case_itemContext {
    let _localctx: Case_itemContext = new Case_itemContext(this._ctx, this.state);
    this.enterRule(_localctx, 398, VerilogParser.RULE_case_item);
    let _la: number;
    try {
      this.state = 3093;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.AM:
        case VerilogParser.CA:
        case VerilogParser.CATI:
        case VerilogParser.EM:
        case VerilogParser.LC:
        case VerilogParser.LP:
        case VerilogParser.MI:
        case VerilogParser.PL:
        case VerilogParser.TI:
        case VerilogParser.TIAM:
        case VerilogParser.TICA:
        case VerilogParser.TIVL:
        case VerilogParser.VL:
        case VerilogParser.BINARY_BASE:
        case VerilogParser.DECIMAL_BASE:
        case VerilogParser.ESCAPED_IDENTIFIER:
        case VerilogParser.EXPONENTIAL_NUMBER:
        case VerilogParser.FIXED_POINT_NUMBER:
        case VerilogParser.HEX_BASE:
        case VerilogParser.OCTAL_BASE:
        case VerilogParser.SIMPLE_IDENTIFIER:
        case VerilogParser.STRING:
        case VerilogParser.SYSTEM_TF_IDENTIFIER:
        case VerilogParser.UNSIGNED_NUMBER:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 3077;
          this.expression(0);
          this.state = 3082;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.CO) {
            {
              {
                this.state = 3078;
                this.match(VerilogParser.CO);
                this.state = 3079;
                this.expression(0);
              }
            }
            this.state = 3084;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 3085;
          this.match(VerilogParser.CL);
          this.state = 3086;
          this.statement_or_null();
        }
          break;
        case VerilogParser.DEFAULT:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 3088;
          this.match(VerilogParser.DEFAULT);
          this.state = 3090;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.CL) {
            {
              this.state = 3089;
              this.match(VerilogParser.CL);
            }
          }

          this.state = 3092;
          this.statement_or_null();
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public loop_statement(): Loop_statementContext {
    let _localctx: Loop_statementContext = new Loop_statementContext(this._ctx, this.state);
    this.enterRule(_localctx, 400, VerilogParser.RULE_loop_statement);
    try {
      this.state = 3119;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.FOREVER:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 3095;
          this.match(VerilogParser.FOREVER);
          this.state = 3096;
          this.statement();
        }
          break;
        case VerilogParser.REPEAT:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 3097;
          this.match(VerilogParser.REPEAT);
          this.state = 3098;
          this.match(VerilogParser.LP);
          this.state = 3099;
          this.expression(0);
          this.state = 3100;
          this.match(VerilogParser.RP);
          this.state = 3101;
          this.statement();
        }
          break;
        case VerilogParser.WHILE:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 3103;
          this.match(VerilogParser.WHILE);
          this.state = 3104;
          this.match(VerilogParser.LP);
          this.state = 3105;
          this.expression(0);
          this.state = 3106;
          this.match(VerilogParser.RP);
          this.state = 3107;
          this.statement();
        }
          break;
        case VerilogParser.FOR:
          this.enterOuterAlt(_localctx, 4);
        {
          this.state = 3109;
          this.match(VerilogParser.FOR);
          this.state = 3110;
          this.match(VerilogParser.LP);
          this.state = 3111;
          this.variable_assignment();
          this.state = 3112;
          this.match(VerilogParser.SC);
          this.state = 3113;
          this.expression(0);
          this.state = 3114;
          this.match(VerilogParser.SC);
          this.state = 3115;
          this.variable_assignment();
          this.state = 3116;
          this.match(VerilogParser.RP);
          this.state = 3117;
          this.statement();
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public system_task_enable(): System_task_enableContext {
    let _localctx: System_task_enableContext = new System_task_enableContext(this._ctx, this.state);
    this.enterRule(_localctx, 402, VerilogParser.RULE_system_task_enable);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3121;
        this.system_task_identifier();
        this.state = 3123;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.LP) {
          {
            this.state = 3122;
            this.sys_task_en_port_list();
          }
        }

        this.state = 3125;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public sys_task_en_port_list(): Sys_task_en_port_listContext {
    let _localctx: Sys_task_en_port_listContext = new Sys_task_en_port_listContext(this._ctx, this.state);
    this.enterRule(_localctx, 404, VerilogParser.RULE_sys_task_en_port_list);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3127;
        this.match(VerilogParser.LP);
        this.state = 3128;
        this.sys_task_en_port_item();
        this.state = 3133;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 3129;
              this.match(VerilogParser.CO);
              this.state = 3130;
              this.sys_task_en_port_item();
            }
          }
          this.state = 3135;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 3136;
        this.match(VerilogParser.RP);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public sys_task_en_port_item(): Sys_task_en_port_itemContext {
    let _localctx: Sys_task_en_port_itemContext = new Sys_task_en_port_itemContext(this._ctx, this.state);
    this.enterRule(_localctx, 406, VerilogParser.RULE_sys_task_en_port_item);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3139;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (VerilogParser.AM - 137)) | (1 << (VerilogParser.CA - 137)) | (1 << (VerilogParser.CATI - 137)) | (1 << (VerilogParser.EM - 137)) | (1 << (VerilogParser.LC - 137)) | (1 << (VerilogParser.LP - 137)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (VerilogParser.MI - 171)) | (1 << (VerilogParser.PL - 171)) | (1 << (VerilogParser.TI - 171)) | (1 << (VerilogParser.TIAM - 171)) | (1 << (VerilogParser.TICA - 171)) | (1 << (VerilogParser.TIVL - 171)) | (1 << (VerilogParser.VL - 171)) | (1 << (VerilogParser.BINARY_BASE - 171)) | (1 << (VerilogParser.DECIMAL_BASE - 171)) | (1 << (VerilogParser.ESCAPED_IDENTIFIER - 171)) | (1 << (VerilogParser.EXPONENTIAL_NUMBER - 171)) | (1 << (VerilogParser.FIXED_POINT_NUMBER - 171)) | (1 << (VerilogParser.HEX_BASE - 171)) | (1 << (VerilogParser.OCTAL_BASE - 171)) | (1 << (VerilogParser.SIMPLE_IDENTIFIER - 171)) | (1 << (VerilogParser.STRING - 171)) | (1 << (VerilogParser.SYSTEM_TF_IDENTIFIER - 171)) | (1 << (VerilogParser.UNSIGNED_NUMBER - 171)))) !== 0)) {
          {
            this.state = 3138;
            this.expression(0);
          }
        }

      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public task_enable(): Task_enableContext {
    let _localctx: Task_enableContext = new Task_enableContext(this._ctx, this.state);
    this.enterRule(_localctx, 408, VerilogParser.RULE_task_enable);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3141;
        this.hierarchical_identifier();
        this.state = 3143;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.LP) {
          {
            this.state = 3142;
            this.task_en_port_list();
          }
        }

        this.state = 3145;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public task_en_port_list(): Task_en_port_listContext {
    let _localctx: Task_en_port_listContext = new Task_en_port_listContext(this._ctx, this.state);
    this.enterRule(_localctx, 410, VerilogParser.RULE_task_en_port_list);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3147;
        this.match(VerilogParser.LP);
        this.state = 3148;
        this.expression(0);
        this.state = 3153;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 3149;
              this.match(VerilogParser.CO);
              this.state = 3150;
              this.expression(0);
            }
          }
          this.state = 3155;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 3156;
        this.match(VerilogParser.RP);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public specify_block(): Specify_blockContext {
    let _localctx: Specify_blockContext = new Specify_blockContext(this._ctx, this.state);
    this.enterRule(_localctx, 412, VerilogParser.RULE_specify_block);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3158;
        this.match(VerilogParser.SPECIFY);
        this.state = 3162;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << VerilogParser.DLFULLSKEW) | (1 << VerilogParser.DLHOLD) | (1 << VerilogParser.DLNOCHANGE) | (1 << VerilogParser.DLPERIOD) | (1 << VerilogParser.DLRECOVERY) | (1 << VerilogParser.DLRECREM) | (1 << VerilogParser.DLREMOVAL) | (1 << VerilogParser.DLSETUP) | (1 << VerilogParser.DLSETUPHOLD) | (1 << VerilogParser.DLSKEW) | (1 << VerilogParser.DLTIMESKEW) | (1 << VerilogParser.DLWIDTH))) !== 0) || ((((_la - 54)) & ~0x1F) === 0 && ((1 << (_la - 54)) & ((1 << (VerilogParser.IF - 54)) | (1 << (VerilogParser.IFNONE - 54)) | (1 << (VerilogParser.NOSHOWCANCELLED - 54)))) !== 0) || ((((_la - 90)) & ~0x1F) === 0 && ((1 << (_la - 90)) & ((1 << (VerilogParser.PULSESTYLE_ONDETECT - 90)) | (1 << (VerilogParser.PULSESTYLE_ONEVENT - 90)) | (1 << (VerilogParser.SHOWCANCELLED - 90)) | (1 << (VerilogParser.SPECPARAM - 90)))) !== 0) || _la === VerilogParser.LP) {
          {
            {
              this.state = 3159;
              this.specify_item();
            }
          }
          this.state = 3164;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 3165;
        this.match(VerilogParser.ENDSPECIFY);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public specify_item(): Specify_itemContext {
    let _localctx: Specify_itemContext = new Specify_itemContext(this._ctx, this.state);
    this.enterRule(_localctx, 414, VerilogParser.RULE_specify_item);
    try {
      this.state = 3172;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.SPECPARAM:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 3167;
          this.specparam_declaration();
        }
          break;
        case VerilogParser.PULSESTYLE_ONDETECT:
        case VerilogParser.PULSESTYLE_ONEVENT:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 3168;
          this.pulsestyle_declaration();
        }
          break;
        case VerilogParser.NOSHOWCANCELLED:
        case VerilogParser.SHOWCANCELLED:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 3169;
          this.showcancelled_declaration();
        }
          break;
        case VerilogParser.IF:
        case VerilogParser.IFNONE:
        case VerilogParser.LP:
          this.enterOuterAlt(_localctx, 4);
        {
          this.state = 3170;
          this.path_declaration();
        }
          break;
        case VerilogParser.DLFULLSKEW:
        case VerilogParser.DLHOLD:
        case VerilogParser.DLNOCHANGE:
        case VerilogParser.DLPERIOD:
        case VerilogParser.DLRECOVERY:
        case VerilogParser.DLRECREM:
        case VerilogParser.DLREMOVAL:
        case VerilogParser.DLSETUP:
        case VerilogParser.DLSETUPHOLD:
        case VerilogParser.DLSKEW:
        case VerilogParser.DLTIMESKEW:
        case VerilogParser.DLWIDTH:
          this.enterOuterAlt(_localctx, 5);
        {
          this.state = 3171;
          this.system_timing_check();
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public pulsestyle_declaration(): Pulsestyle_declarationContext {
    let _localctx: Pulsestyle_declarationContext = new Pulsestyle_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 416, VerilogParser.RULE_pulsestyle_declaration);
    try {
      this.state = 3182;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.PULSESTYLE_ONEVENT:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 3174;
          this.match(VerilogParser.PULSESTYLE_ONEVENT);
          this.state = 3175;
          this.list_of_path_outputs();
          this.state = 3176;
          this.match(VerilogParser.SC);
        }
          break;
        case VerilogParser.PULSESTYLE_ONDETECT:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 3178;
          this.match(VerilogParser.PULSESTYLE_ONDETECT);
          this.state = 3179;
          this.list_of_path_outputs();
          this.state = 3180;
          this.match(VerilogParser.SC);
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public showcancelled_declaration(): Showcancelled_declarationContext {
    let _localctx: Showcancelled_declarationContext = new Showcancelled_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 418, VerilogParser.RULE_showcancelled_declaration);
    try {
      this.state = 3192;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.SHOWCANCELLED:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 3184;
          this.match(VerilogParser.SHOWCANCELLED);
          this.state = 3185;
          this.list_of_path_outputs();
          this.state = 3186;
          this.match(VerilogParser.SC);
        }
          break;
        case VerilogParser.NOSHOWCANCELLED:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 3188;
          this.match(VerilogParser.NOSHOWCANCELLED);
          this.state = 3189;
          this.list_of_path_outputs();
          this.state = 3190;
          this.match(VerilogParser.SC);
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public path_declaration(): Path_declarationContext {
    let _localctx: Path_declarationContext = new Path_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 420, VerilogParser.RULE_path_declaration);
    try {
      this.state = 3203;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 327, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 3194;
          this.simple_path_declaration();
          this.state = 3195;
          this.match(VerilogParser.SC);
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 3197;
          this.edge_sensitive_path_declaration();
          this.state = 3198;
          this.match(VerilogParser.SC);
        }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 3200;
          this.state_dependent_path_declaration();
          this.state = 3201;
          this.match(VerilogParser.SC);
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public simple_path_declaration(): Simple_path_declarationContext {
    let _localctx: Simple_path_declarationContext = new Simple_path_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 422, VerilogParser.RULE_simple_path_declaration);
    try {
      this.state = 3213;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 328, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 3205;
          this.parallel_path_description();
          this.state = 3206;
          this.match(VerilogParser.EQ);
          this.state = 3207;
          this.path_delay_value();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 3209;
          this.full_path_description();
          this.state = 3210;
          this.match(VerilogParser.EQ);
          this.state = 3211;
          this.path_delay_value();
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public parallel_path_description(): Parallel_path_descriptionContext {
    let _localctx: Parallel_path_descriptionContext = new Parallel_path_descriptionContext(this._ctx, this.state);
    this.enterRule(_localctx, 424, VerilogParser.RULE_parallel_path_description);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3215;
        this.match(VerilogParser.LP);
        this.state = 3216;
        this.specify_input_terminal_descriptor();
        this.state = 3218;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.MI || _la === VerilogParser.PL) {
          {
            this.state = 3217;
            this.polarity_operator();
          }
        }

        this.state = 3220;
        this.match(VerilogParser.EQGT);
        this.state = 3221;
        this.specify_output_terminal_descriptor();
        this.state = 3222;
        this.match(VerilogParser.RP);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public full_path_description(): Full_path_descriptionContext {
    let _localctx: Full_path_descriptionContext = new Full_path_descriptionContext(this._ctx, this.state);
    this.enterRule(_localctx, 426, VerilogParser.RULE_full_path_description);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3224;
        this.match(VerilogParser.LP);
        this.state = 3225;
        this.list_of_path_inputs();
        this.state = 3227;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.MI || _la === VerilogParser.PL) {
          {
            this.state = 3226;
            this.polarity_operator();
          }
        }

        this.state = 3229;
        this.match(VerilogParser.ASGT);
        this.state = 3230;
        this.list_of_path_outputs();
        this.state = 3231;
        this.match(VerilogParser.RP);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public list_of_path_inputs(): List_of_path_inputsContext {
    let _localctx: List_of_path_inputsContext = new List_of_path_inputsContext(this._ctx, this.state);
    this.enterRule(_localctx, 428, VerilogParser.RULE_list_of_path_inputs);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3233;
        this.specify_input_terminal_descriptor();
        this.state = 3238;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 3234;
              this.match(VerilogParser.CO);
              this.state = 3235;
              this.specify_input_terminal_descriptor();
            }
          }
          this.state = 3240;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public list_of_path_outputs(): List_of_path_outputsContext {
    let _localctx: List_of_path_outputsContext = new List_of_path_outputsContext(this._ctx, this.state);
    this.enterRule(_localctx, 430, VerilogParser.RULE_list_of_path_outputs);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3241;
        this.specify_output_terminal_descriptor();
        this.state = 3246;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 3242;
              this.match(VerilogParser.CO);
              this.state = 3243;
              this.specify_output_terminal_descriptor();
            }
          }
          this.state = 3248;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public specify_input_terminal_descriptor(): Specify_input_terminal_descriptorContext {
    let _localctx: Specify_input_terminal_descriptorContext = new Specify_input_terminal_descriptorContext(this._ctx, this.state);
    this.enterRule(_localctx, 432, VerilogParser.RULE_specify_input_terminal_descriptor);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3249;
        this.input_identifier();
        this.state = 3254;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.LB) {
          {
            this.state = 3250;
            this.match(VerilogParser.LB);
            this.state = 3251;
            this.constant_range_expression();
            this.state = 3252;
            this.match(VerilogParser.RB);
          }
        }

      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public specify_output_terminal_descriptor(): Specify_output_terminal_descriptorContext {
    let _localctx: Specify_output_terminal_descriptorContext = new Specify_output_terminal_descriptorContext(this._ctx, this.state);
    this.enterRule(_localctx, 434, VerilogParser.RULE_specify_output_terminal_descriptor);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3256;
        this.output_identifier();
        this.state = 3261;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.LB) {
          {
            this.state = 3257;
            this.match(VerilogParser.LB);
            this.state = 3258;
            this.constant_range_expression();
            this.state = 3259;
            this.match(VerilogParser.RB);
          }
        }

      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public input_identifier(): Input_identifierContext {
    let _localctx: Input_identifierContext = new Input_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 436, VerilogParser.RULE_input_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3263;
        this.port_identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public output_identifier(): Output_identifierContext {
    let _localctx: Output_identifierContext = new Output_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 438, VerilogParser.RULE_output_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3265;
        this.port_identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public path_delay_value(): Path_delay_valueContext {
    let _localctx: Path_delay_valueContext = new Path_delay_valueContext(this._ctx, this.state);
    this.enterRule(_localctx, 440, VerilogParser.RULE_path_delay_value);
    try {
      this.state = 3272;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 335, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 3267;
          this.list_of_path_delay_expressions();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 3268;
          this.match(VerilogParser.LP);
          this.state = 3269;
          this.list_of_path_delay_expressions();
          this.state = 3270;
          this.match(VerilogParser.RP);
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public list_of_path_delay_expressions(): List_of_path_delay_expressionsContext {
    let _localctx: List_of_path_delay_expressionsContext = new List_of_path_delay_expressionsContext(this._ctx, this.state);
    this.enterRule(_localctx, 442, VerilogParser.RULE_list_of_path_delay_expressions);
    let _la: number;
    try {
      this.state = 3308;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 338, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 3274;
          this.t_path_delay_expression();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 3275;
          this.trise_path_delay_expression();
          this.state = 3276;
          this.match(VerilogParser.CO);
          this.state = 3277;
          this.tfall_path_delay_expression();
          this.state = 3280;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.CO) {
            {
              this.state = 3278;
              this.match(VerilogParser.CO);
              this.state = 3279;
              this.tz_path_delay_expression();
            }
          }

        }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 3282;
          this.t01_path_delay_expression();
          this.state = 3283;
          this.match(VerilogParser.CO);
          this.state = 3284;
          this.t10_path_delay_expression();
          this.state = 3285;
          this.match(VerilogParser.CO);
          this.state = 3286;
          this.t0z_path_delay_expression();
          this.state = 3287;
          this.match(VerilogParser.CO);
          this.state = 3288;
          this.tz1_path_delay_expression();
          this.state = 3289;
          this.match(VerilogParser.CO);
          this.state = 3290;
          this.t1z_path_delay_expression();
          this.state = 3291;
          this.match(VerilogParser.CO);
          this.state = 3292;
          this.tz0_path_delay_expression();
          this.state = 3306;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.CO) {
            {
              this.state = 3293;
              this.match(VerilogParser.CO);
              this.state = 3294;
              this.t0x_path_delay_expression();
              this.state = 3295;
              this.match(VerilogParser.CO);
              this.state = 3296;
              this.tx1_path_delay_expression();
              this.state = 3297;
              this.match(VerilogParser.CO);
              this.state = 3298;
              this.t1x_path_delay_expression();
              this.state = 3299;
              this.match(VerilogParser.CO);
              this.state = 3300;
              this.tx0_path_delay_expression();
              this.state = 3301;
              this.match(VerilogParser.CO);
              this.state = 3302;
              this.txz_path_delay_expression();
              this.state = 3303;
              this.match(VerilogParser.CO);
              this.state = 3304;
              this.tzx_path_delay_expression();
            }
          }

        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public t_path_delay_expression(): T_path_delay_expressionContext {
    let _localctx: T_path_delay_expressionContext = new T_path_delay_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 444, VerilogParser.RULE_t_path_delay_expression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3310;
        this.path_delay_expression();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public trise_path_delay_expression(): Trise_path_delay_expressionContext {
    let _localctx: Trise_path_delay_expressionContext = new Trise_path_delay_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 446, VerilogParser.RULE_trise_path_delay_expression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3312;
        this.path_delay_expression();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public tfall_path_delay_expression(): Tfall_path_delay_expressionContext {
    let _localctx: Tfall_path_delay_expressionContext = new Tfall_path_delay_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 448, VerilogParser.RULE_tfall_path_delay_expression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3314;
        this.path_delay_expression();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public tz_path_delay_expression(): Tz_path_delay_expressionContext {
    let _localctx: Tz_path_delay_expressionContext = new Tz_path_delay_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 450, VerilogParser.RULE_tz_path_delay_expression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3316;
        this.path_delay_expression();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public t01_path_delay_expression(): T01_path_delay_expressionContext {
    let _localctx: T01_path_delay_expressionContext = new T01_path_delay_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 452, VerilogParser.RULE_t01_path_delay_expression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3318;
        this.path_delay_expression();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public t10_path_delay_expression(): T10_path_delay_expressionContext {
    let _localctx: T10_path_delay_expressionContext = new T10_path_delay_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 454, VerilogParser.RULE_t10_path_delay_expression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3320;
        this.path_delay_expression();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public t0z_path_delay_expression(): T0z_path_delay_expressionContext {
    let _localctx: T0z_path_delay_expressionContext = new T0z_path_delay_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 456, VerilogParser.RULE_t0z_path_delay_expression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3322;
        this.path_delay_expression();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public tz1_path_delay_expression(): Tz1_path_delay_expressionContext {
    let _localctx: Tz1_path_delay_expressionContext = new Tz1_path_delay_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 458, VerilogParser.RULE_tz1_path_delay_expression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3324;
        this.path_delay_expression();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public t1z_path_delay_expression(): T1z_path_delay_expressionContext {
    let _localctx: T1z_path_delay_expressionContext = new T1z_path_delay_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 460, VerilogParser.RULE_t1z_path_delay_expression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3326;
        this.path_delay_expression();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public tz0_path_delay_expression(): Tz0_path_delay_expressionContext {
    let _localctx: Tz0_path_delay_expressionContext = new Tz0_path_delay_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 462, VerilogParser.RULE_tz0_path_delay_expression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3328;
        this.path_delay_expression();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public t0x_path_delay_expression(): T0x_path_delay_expressionContext {
    let _localctx: T0x_path_delay_expressionContext = new T0x_path_delay_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 464, VerilogParser.RULE_t0x_path_delay_expression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3330;
        this.path_delay_expression();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public tx1_path_delay_expression(): Tx1_path_delay_expressionContext {
    let _localctx: Tx1_path_delay_expressionContext = new Tx1_path_delay_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 466, VerilogParser.RULE_tx1_path_delay_expression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3332;
        this.path_delay_expression();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public t1x_path_delay_expression(): T1x_path_delay_expressionContext {
    let _localctx: T1x_path_delay_expressionContext = new T1x_path_delay_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 468, VerilogParser.RULE_t1x_path_delay_expression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3334;
        this.path_delay_expression();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public tx0_path_delay_expression(): Tx0_path_delay_expressionContext {
    let _localctx: Tx0_path_delay_expressionContext = new Tx0_path_delay_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 470, VerilogParser.RULE_tx0_path_delay_expression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3336;
        this.path_delay_expression();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public txz_path_delay_expression(): Txz_path_delay_expressionContext {
    let _localctx: Txz_path_delay_expressionContext = new Txz_path_delay_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 472, VerilogParser.RULE_txz_path_delay_expression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3338;
        this.path_delay_expression();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public tzx_path_delay_expression(): Tzx_path_delay_expressionContext {
    let _localctx: Tzx_path_delay_expressionContext = new Tzx_path_delay_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 474, VerilogParser.RULE_tzx_path_delay_expression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3340;
        this.path_delay_expression();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public path_delay_expression(): Path_delay_expressionContext {
    let _localctx: Path_delay_expressionContext = new Path_delay_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 476, VerilogParser.RULE_path_delay_expression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3342;
        this.constant_mintypmax_expression();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public edge_sensitive_path_declaration(): Edge_sensitive_path_declarationContext {
    let _localctx: Edge_sensitive_path_declarationContext = new Edge_sensitive_path_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 478, VerilogParser.RULE_edge_sensitive_path_declaration);
    try {
      this.state = 3352;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 339, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 3344;
          this.parallel_edge_sensitive_path_description();
          this.state = 3345;
          this.match(VerilogParser.EQ);
          this.state = 3346;
          this.path_delay_value();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 3348;
          this.full_edge_sensitive_path_description();
          this.state = 3349;
          this.match(VerilogParser.EQ);
          this.state = 3350;
          this.path_delay_value();
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public parallel_edge_sensitive_path_description(): Parallel_edge_sensitive_path_descriptionContext {
    let _localctx: Parallel_edge_sensitive_path_descriptionContext = new Parallel_edge_sensitive_path_descriptionContext(this._ctx, this.state);
    this.enterRule(_localctx, 480, VerilogParser.RULE_parallel_edge_sensitive_path_description);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3354;
        this.match(VerilogParser.LP);
        this.state = 3356;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.NEGEDGE || _la === VerilogParser.POSEDGE) {
          {
            this.state = 3355;
            this.edge_identifier();
          }
        }

        this.state = 3358;
        this.specify_input_terminal_descriptor();
        this.state = 3359;
        this.match(VerilogParser.EQGT);
        this.state = 3360;
        this.match(VerilogParser.LP);
        this.state = 3361;
        this.specify_output_terminal_descriptor();
        this.state = 3363;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.MI || _la === VerilogParser.PL) {
          {
            this.state = 3362;
            this.polarity_operator();
          }
        }

        this.state = 3365;
        this.match(VerilogParser.CL);
        this.state = 3366;
        this.data_source_expression();
        this.state = 3367;
        this.match(VerilogParser.RP);
        this.state = 3368;
        this.match(VerilogParser.RP);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public full_edge_sensitive_path_description(): Full_edge_sensitive_path_descriptionContext {
    let _localctx: Full_edge_sensitive_path_descriptionContext = new Full_edge_sensitive_path_descriptionContext(this._ctx, this.state);
    this.enterRule(_localctx, 482, VerilogParser.RULE_full_edge_sensitive_path_description);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3370;
        this.match(VerilogParser.LP);
        this.state = 3372;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.NEGEDGE || _la === VerilogParser.POSEDGE) {
          {
            this.state = 3371;
            this.edge_identifier();
          }
        }

        this.state = 3374;
        this.list_of_path_inputs();
        this.state = 3375;
        this.match(VerilogParser.ASGT);
        this.state = 3376;
        this.match(VerilogParser.LP);
        this.state = 3377;
        this.list_of_path_outputs();
        this.state = 3379;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.MI || _la === VerilogParser.PL) {
          {
            this.state = 3378;
            this.polarity_operator();
          }
        }

        this.state = 3381;
        this.match(VerilogParser.CL);
        this.state = 3382;
        this.data_source_expression();
        this.state = 3383;
        this.match(VerilogParser.RP);
        this.state = 3384;
        this.match(VerilogParser.RP);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public data_source_expression(): Data_source_expressionContext {
    let _localctx: Data_source_expressionContext = new Data_source_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 484, VerilogParser.RULE_data_source_expression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3386;
        this.expression(0);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public edge_identifier(): Edge_identifierContext {
    let _localctx: Edge_identifierContext = new Edge_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 486, VerilogParser.RULE_edge_identifier);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3388;
        _la = this._input.LA(1);
        if (!(_la === VerilogParser.NEGEDGE || _la === VerilogParser.POSEDGE)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public state_dependent_path_declaration(): State_dependent_path_declarationContext {
    let _localctx: State_dependent_path_declarationContext = new State_dependent_path_declarationContext(this._ctx, this.state);
    this.enterRule(_localctx, 488, VerilogParser.RULE_state_dependent_path_declaration);
    try {
      this.state = 3404;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 344, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 3390;
          this.match(VerilogParser.IF);
          this.state = 3391;
          this.match(VerilogParser.LP);
          this.state = 3392;
          this.module_path_expression(0);
          this.state = 3393;
          this.match(VerilogParser.RP);
          this.state = 3394;
          this.simple_path_declaration();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 3396;
          this.match(VerilogParser.IF);
          this.state = 3397;
          this.match(VerilogParser.LP);
          this.state = 3398;
          this.module_path_expression(0);
          this.state = 3399;
          this.match(VerilogParser.RP);
          this.state = 3400;
          this.edge_sensitive_path_declaration();
        }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 3402;
          this.match(VerilogParser.IFNONE);
          this.state = 3403;
          this.simple_path_declaration();
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public polarity_operator(): Polarity_operatorContext {
    let _localctx: Polarity_operatorContext = new Polarity_operatorContext(this._ctx, this.state);
    this.enterRule(_localctx, 490, VerilogParser.RULE_polarity_operator);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3406;
        _la = this._input.LA(1);
        if (!(_la === VerilogParser.MI || _la === VerilogParser.PL)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public system_timing_check(): System_timing_checkContext {
    let _localctx: System_timing_checkContext = new System_timing_checkContext(this._ctx, this.state);
    this.enterRule(_localctx, 492, VerilogParser.RULE_system_timing_check);
    try {
      this.state = 3420;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.DLSETUP:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 3408;
          this.setup_timing_check();
        }
          break;
        case VerilogParser.DLHOLD:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 3409;
          this.hold_timing_check();
        }
          break;
        case VerilogParser.DLSETUPHOLD:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 3410;
          this.setuphold_timing_check();
        }
          break;
        case VerilogParser.DLRECOVERY:
          this.enterOuterAlt(_localctx, 4);
        {
          this.state = 3411;
          this.recovery_timing_check();
        }
          break;
        case VerilogParser.DLREMOVAL:
          this.enterOuterAlt(_localctx, 5);
        {
          this.state = 3412;
          this.removal_timing_check();
        }
          break;
        case VerilogParser.DLRECREM:
          this.enterOuterAlt(_localctx, 6);
        {
          this.state = 3413;
          this.recrem_timing_check();
        }
          break;
        case VerilogParser.DLSKEW:
          this.enterOuterAlt(_localctx, 7);
        {
          this.state = 3414;
          this.skew_timing_check();
        }
          break;
        case VerilogParser.DLTIMESKEW:
          this.enterOuterAlt(_localctx, 8);
        {
          this.state = 3415;
          this.timeskew_timing_check();
        }
          break;
        case VerilogParser.DLFULLSKEW:
          this.enterOuterAlt(_localctx, 9);
        {
          this.state = 3416;
          this.fullskew_timing_check();
        }
          break;
        case VerilogParser.DLPERIOD:
          this.enterOuterAlt(_localctx, 10);
        {
          this.state = 3417;
          this.period_timing_check();
        }
          break;
        case VerilogParser.DLWIDTH:
          this.enterOuterAlt(_localctx, 11);
        {
          this.state = 3418;
          this.width_timing_check();
        }
          break;
        case VerilogParser.DLNOCHANGE:
          this.enterOuterAlt(_localctx, 12);
        {
          this.state = 3419;
          this.nochange_timing_check();
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public setup_timing_check(): Setup_timing_checkContext {
    let _localctx: Setup_timing_checkContext = new Setup_timing_checkContext(this._ctx, this.state);
    this.enterRule(_localctx, 494, VerilogParser.RULE_setup_timing_check);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3422;
        this.match(VerilogParser.DLSETUP);
        this.state = 3423;
        this.match(VerilogParser.LP);
        this.state = 3424;
        this.data_event();
        this.state = 3425;
        this.match(VerilogParser.CO);
        this.state = 3426;
        this.reference_event();
        this.state = 3427;
        this.match(VerilogParser.CO);
        this.state = 3428;
        this.timing_check_limit();
        this.state = 3430;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.CO) {
          {
            this.state = 3429;
            this.notifier_opt();
          }
        }

        this.state = 3432;
        this.match(VerilogParser.RP);
        this.state = 3433;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public notifier_opt(): Notifier_optContext {
    let _localctx: Notifier_optContext = new Notifier_optContext(this._ctx, this.state);
    this.enterRule(_localctx, 496, VerilogParser.RULE_notifier_opt);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3435;
        this.match(VerilogParser.CO);
        this.state = 3437;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.ESCAPED_IDENTIFIER || _la === VerilogParser.SIMPLE_IDENTIFIER) {
          {
            this.state = 3436;
            this.notifier();
          }
        }

      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public hold_timing_check(): Hold_timing_checkContext {
    let _localctx: Hold_timing_checkContext = new Hold_timing_checkContext(this._ctx, this.state);
    this.enterRule(_localctx, 498, VerilogParser.RULE_hold_timing_check);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3439;
        this.match(VerilogParser.DLHOLD);
        this.state = 3440;
        this.match(VerilogParser.LP);
        this.state = 3441;
        this.reference_event();
        this.state = 3442;
        this.match(VerilogParser.CO);
        this.state = 3443;
        this.data_event();
        this.state = 3444;
        this.match(VerilogParser.CO);
        this.state = 3445;
        this.timing_check_limit();
        this.state = 3447;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.CO) {
          {
            this.state = 3446;
            this.notifier_opt();
          }
        }

        this.state = 3449;
        this.match(VerilogParser.RP);
        this.state = 3450;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public setuphold_timing_check(): Setuphold_timing_checkContext {
    let _localctx: Setuphold_timing_checkContext = new Setuphold_timing_checkContext(this._ctx, this.state);
    this.enterRule(_localctx, 500, VerilogParser.RULE_setuphold_timing_check);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3452;
        this.match(VerilogParser.DLSETUPHOLD);
        this.state = 3453;
        this.match(VerilogParser.LP);
        this.state = 3454;
        this.reference_event();
        this.state = 3455;
        this.match(VerilogParser.CO);
        this.state = 3456;
        this.data_event();
        this.state = 3457;
        this.match(VerilogParser.CO);
        this.state = 3458;
        this.timing_check_limit();
        this.state = 3459;
        this.match(VerilogParser.CO);
        this.state = 3460;
        this.timing_check_limit();
        this.state = 3462;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.CO) {
          {
            this.state = 3461;
            this.timing_check_opt();
          }
        }

        this.state = 3464;
        this.match(VerilogParser.RP);
        this.state = 3465;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public timing_check_opt(): Timing_check_optContext {
    let _localctx: Timing_check_optContext = new Timing_check_optContext(this._ctx, this.state);
    this.enterRule(_localctx, 502, VerilogParser.RULE_timing_check_opt);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3467;
        this.match(VerilogParser.CO);
        this.state = 3469;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.ESCAPED_IDENTIFIER || _la === VerilogParser.SIMPLE_IDENTIFIER) {
          {
            this.state = 3468;
            this.notifier();
          }
        }

        this.state = 3472;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.CO) {
          {
            this.state = 3471;
            this.stamptime_cond_opt();
          }
        }

      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public stamptime_cond_opt(): Stamptime_cond_optContext {
    let _localctx: Stamptime_cond_optContext = new Stamptime_cond_optContext(this._ctx, this.state);
    this.enterRule(_localctx, 504, VerilogParser.RULE_stamptime_cond_opt);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3474;
        this.match(VerilogParser.CO);
        this.state = 3476;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (VerilogParser.AM - 137)) | (1 << (VerilogParser.CA - 137)) | (1 << (VerilogParser.CATI - 137)) | (1 << (VerilogParser.EM - 137)) | (1 << (VerilogParser.LC - 137)) | (1 << (VerilogParser.LP - 137)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (VerilogParser.MI - 171)) | (1 << (VerilogParser.PL - 171)) | (1 << (VerilogParser.TI - 171)) | (1 << (VerilogParser.TIAM - 171)) | (1 << (VerilogParser.TICA - 171)) | (1 << (VerilogParser.TIVL - 171)) | (1 << (VerilogParser.VL - 171)) | (1 << (VerilogParser.BINARY_BASE - 171)) | (1 << (VerilogParser.DECIMAL_BASE - 171)) | (1 << (VerilogParser.ESCAPED_IDENTIFIER - 171)) | (1 << (VerilogParser.EXPONENTIAL_NUMBER - 171)) | (1 << (VerilogParser.FIXED_POINT_NUMBER - 171)) | (1 << (VerilogParser.HEX_BASE - 171)) | (1 << (VerilogParser.OCTAL_BASE - 171)) | (1 << (VerilogParser.SIMPLE_IDENTIFIER - 171)) | (1 << (VerilogParser.STRING - 171)) | (1 << (VerilogParser.SYSTEM_TF_IDENTIFIER - 171)) | (1 << (VerilogParser.UNSIGNED_NUMBER - 171)))) !== 0)) {
          {
            this.state = 3475;
            this.stamptime_condition();
          }
        }

        this.state = 3479;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.CO) {
          {
            this.state = 3478;
            this.checktime_cond_opt();
          }
        }

      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public checktime_cond_opt(): Checktime_cond_optContext {
    let _localctx: Checktime_cond_optContext = new Checktime_cond_optContext(this._ctx, this.state);
    this.enterRule(_localctx, 506, VerilogParser.RULE_checktime_cond_opt);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3481;
        this.match(VerilogParser.CO);
        this.state = 3483;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (VerilogParser.AM - 137)) | (1 << (VerilogParser.CA - 137)) | (1 << (VerilogParser.CATI - 137)) | (1 << (VerilogParser.EM - 137)) | (1 << (VerilogParser.LC - 137)) | (1 << (VerilogParser.LP - 137)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (VerilogParser.MI - 171)) | (1 << (VerilogParser.PL - 171)) | (1 << (VerilogParser.TI - 171)) | (1 << (VerilogParser.TIAM - 171)) | (1 << (VerilogParser.TICA - 171)) | (1 << (VerilogParser.TIVL - 171)) | (1 << (VerilogParser.VL - 171)) | (1 << (VerilogParser.BINARY_BASE - 171)) | (1 << (VerilogParser.DECIMAL_BASE - 171)) | (1 << (VerilogParser.ESCAPED_IDENTIFIER - 171)) | (1 << (VerilogParser.EXPONENTIAL_NUMBER - 171)) | (1 << (VerilogParser.FIXED_POINT_NUMBER - 171)) | (1 << (VerilogParser.HEX_BASE - 171)) | (1 << (VerilogParser.OCTAL_BASE - 171)) | (1 << (VerilogParser.SIMPLE_IDENTIFIER - 171)) | (1 << (VerilogParser.STRING - 171)) | (1 << (VerilogParser.SYSTEM_TF_IDENTIFIER - 171)) | (1 << (VerilogParser.UNSIGNED_NUMBER - 171)))) !== 0)) {
          {
            this.state = 3482;
            this.checktime_condition();
          }
        }

        this.state = 3486;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.CO) {
          {
            this.state = 3485;
            this.delayed_ref_opt();
          }
        }

      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public delayed_ref_opt(): Delayed_ref_optContext {
    let _localctx: Delayed_ref_optContext = new Delayed_ref_optContext(this._ctx, this.state);
    this.enterRule(_localctx, 508, VerilogParser.RULE_delayed_ref_opt);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3488;
        this.match(VerilogParser.CO);
        this.state = 3490;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.ESCAPED_IDENTIFIER || _la === VerilogParser.SIMPLE_IDENTIFIER) {
          {
            this.state = 3489;
            this.delayed_reference();
          }
        }

        this.state = 3493;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.CO) {
          {
            this.state = 3492;
            this.delayed_data_opt();
          }
        }

      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public delayed_data_opt(): Delayed_data_optContext {
    let _localctx: Delayed_data_optContext = new Delayed_data_optContext(this._ctx, this.state);
    this.enterRule(_localctx, 510, VerilogParser.RULE_delayed_data_opt);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3495;
        this.match(VerilogParser.CO);
        this.state = 3497;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.ESCAPED_IDENTIFIER || _la === VerilogParser.SIMPLE_IDENTIFIER) {
          {
            this.state = 3496;
            this.delayed_data();
          }
        }

      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public recovery_timing_check(): Recovery_timing_checkContext {
    let _localctx: Recovery_timing_checkContext = new Recovery_timing_checkContext(this._ctx, this.state);
    this.enterRule(_localctx, 512, VerilogParser.RULE_recovery_timing_check);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3499;
        this.match(VerilogParser.DLRECOVERY);
        this.state = 3500;
        this.match(VerilogParser.LP);
        this.state = 3501;
        this.reference_event();
        this.state = 3502;
        this.match(VerilogParser.CO);
        this.state = 3503;
        this.data_event();
        this.state = 3504;
        this.match(VerilogParser.CO);
        this.state = 3505;
        this.timing_check_limit();
        this.state = 3507;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.CO) {
          {
            this.state = 3506;
            this.notifier_opt();
          }
        }

        this.state = 3509;
        this.match(VerilogParser.RP);
        this.state = 3510;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public removal_timing_check(): Removal_timing_checkContext {
    let _localctx: Removal_timing_checkContext = new Removal_timing_checkContext(this._ctx, this.state);
    this.enterRule(_localctx, 514, VerilogParser.RULE_removal_timing_check);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3512;
        this.match(VerilogParser.DLREMOVAL);
        this.state = 3513;
        this.match(VerilogParser.LP);
        this.state = 3514;
        this.reference_event();
        this.state = 3515;
        this.match(VerilogParser.CO);
        this.state = 3516;
        this.data_event();
        this.state = 3517;
        this.match(VerilogParser.CO);
        this.state = 3518;
        this.timing_check_limit();
        this.state = 3520;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.CO) {
          {
            this.state = 3519;
            this.notifier_opt();
          }
        }

        this.state = 3522;
        this.match(VerilogParser.RP);
        this.state = 3523;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public recrem_timing_check(): Recrem_timing_checkContext {
    let _localctx: Recrem_timing_checkContext = new Recrem_timing_checkContext(this._ctx, this.state);
    this.enterRule(_localctx, 516, VerilogParser.RULE_recrem_timing_check);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3525;
        this.match(VerilogParser.DLRECREM);
        this.state = 3526;
        this.match(VerilogParser.LP);
        this.state = 3527;
        this.reference_event();
        this.state = 3528;
        this.match(VerilogParser.CO);
        this.state = 3529;
        this.data_event();
        this.state = 3530;
        this.match(VerilogParser.CO);
        this.state = 3531;
        this.timing_check_limit();
        this.state = 3532;
        this.match(VerilogParser.CO);
        this.state = 3533;
        this.timing_check_limit();
        this.state = 3535;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.CO) {
          {
            this.state = 3534;
            this.timing_check_opt();
          }
        }

        this.state = 3537;
        this.match(VerilogParser.RP);
        this.state = 3538;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public skew_timing_check(): Skew_timing_checkContext {
    let _localctx: Skew_timing_checkContext = new Skew_timing_checkContext(this._ctx, this.state);
    this.enterRule(_localctx, 518, VerilogParser.RULE_skew_timing_check);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3540;
        this.match(VerilogParser.DLSKEW);
        this.state = 3541;
        this.match(VerilogParser.LP);
        this.state = 3542;
        this.reference_event();
        this.state = 3543;
        this.match(VerilogParser.CO);
        this.state = 3544;
        this.data_event();
        this.state = 3545;
        this.match(VerilogParser.CO);
        this.state = 3546;
        this.timing_check_limit();
        this.state = 3548;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.CO) {
          {
            this.state = 3547;
            this.notifier_opt();
          }
        }

        this.state = 3550;
        this.match(VerilogParser.RP);
        this.state = 3551;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public timeskew_timing_check(): Timeskew_timing_checkContext {
    let _localctx: Timeskew_timing_checkContext = new Timeskew_timing_checkContext(this._ctx, this.state);
    this.enterRule(_localctx, 520, VerilogParser.RULE_timeskew_timing_check);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3553;
        this.match(VerilogParser.DLTIMESKEW);
        this.state = 3554;
        this.match(VerilogParser.LP);
        this.state = 3555;
        this.reference_event();
        this.state = 3556;
        this.match(VerilogParser.CO);
        this.state = 3557;
        this.data_event();
        this.state = 3558;
        this.match(VerilogParser.CO);
        this.state = 3559;
        this.timing_check_limit();
        this.state = 3561;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.CO) {
          {
            this.state = 3560;
            this.skew_timing_check_opt();
          }
        }

        this.state = 3563;
        this.match(VerilogParser.RP);
        this.state = 3564;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public skew_timing_check_opt(): Skew_timing_check_optContext {
    let _localctx: Skew_timing_check_optContext = new Skew_timing_check_optContext(this._ctx, this.state);
    this.enterRule(_localctx, 522, VerilogParser.RULE_skew_timing_check_opt);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3566;
        this.match(VerilogParser.CO);
        this.state = 3568;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.ESCAPED_IDENTIFIER || _la === VerilogParser.SIMPLE_IDENTIFIER) {
          {
            this.state = 3567;
            this.notifier();
          }
        }

        this.state = 3571;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.CO) {
          {
            this.state = 3570;
            this.event_based_flag_opt();
          }
        }

      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public event_based_flag_opt(): Event_based_flag_optContext {
    let _localctx: Event_based_flag_optContext = new Event_based_flag_optContext(this._ctx, this.state);
    this.enterRule(_localctx, 524, VerilogParser.RULE_event_based_flag_opt);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3573;
        this.match(VerilogParser.CO);
        this.state = 3575;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (VerilogParser.AM - 137)) | (1 << (VerilogParser.CA - 137)) | (1 << (VerilogParser.CATI - 137)) | (1 << (VerilogParser.EM - 137)) | (1 << (VerilogParser.LC - 137)) | (1 << (VerilogParser.LP - 137)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (VerilogParser.MI - 171)) | (1 << (VerilogParser.PL - 171)) | (1 << (VerilogParser.TI - 171)) | (1 << (VerilogParser.TIAM - 171)) | (1 << (VerilogParser.TICA - 171)) | (1 << (VerilogParser.TIVL - 171)) | (1 << (VerilogParser.VL - 171)) | (1 << (VerilogParser.BINARY_BASE - 171)) | (1 << (VerilogParser.DECIMAL_BASE - 171)) | (1 << (VerilogParser.ESCAPED_IDENTIFIER - 171)) | (1 << (VerilogParser.EXPONENTIAL_NUMBER - 171)) | (1 << (VerilogParser.FIXED_POINT_NUMBER - 171)) | (1 << (VerilogParser.HEX_BASE - 171)) | (1 << (VerilogParser.OCTAL_BASE - 171)) | (1 << (VerilogParser.SIMPLE_IDENTIFIER - 171)) | (1 << (VerilogParser.STRING - 171)) | (1 << (VerilogParser.SYSTEM_TF_IDENTIFIER - 171)) | (1 << (VerilogParser.UNSIGNED_NUMBER - 171)))) !== 0)) {
          {
            this.state = 3574;
            this.event_based_flag();
          }
        }

        this.state = 3578;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.CO) {
          {
            this.state = 3577;
            this.remain_active_flag_opt();
          }
        }

      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public remain_active_flag_opt(): Remain_active_flag_optContext {
    let _localctx: Remain_active_flag_optContext = new Remain_active_flag_optContext(this._ctx, this.state);
    this.enterRule(_localctx, 526, VerilogParser.RULE_remain_active_flag_opt);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3580;
        this.match(VerilogParser.CO);
        this.state = 3582;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (VerilogParser.AM - 137)) | (1 << (VerilogParser.CA - 137)) | (1 << (VerilogParser.CATI - 137)) | (1 << (VerilogParser.EM - 137)) | (1 << (VerilogParser.LC - 137)) | (1 << (VerilogParser.LP - 137)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (VerilogParser.MI - 171)) | (1 << (VerilogParser.PL - 171)) | (1 << (VerilogParser.TI - 171)) | (1 << (VerilogParser.TIAM - 171)) | (1 << (VerilogParser.TICA - 171)) | (1 << (VerilogParser.TIVL - 171)) | (1 << (VerilogParser.VL - 171)) | (1 << (VerilogParser.BINARY_BASE - 171)) | (1 << (VerilogParser.DECIMAL_BASE - 171)) | (1 << (VerilogParser.ESCAPED_IDENTIFIER - 171)) | (1 << (VerilogParser.EXPONENTIAL_NUMBER - 171)) | (1 << (VerilogParser.FIXED_POINT_NUMBER - 171)) | (1 << (VerilogParser.HEX_BASE - 171)) | (1 << (VerilogParser.OCTAL_BASE - 171)) | (1 << (VerilogParser.SIMPLE_IDENTIFIER - 171)) | (1 << (VerilogParser.STRING - 171)) | (1 << (VerilogParser.SYSTEM_TF_IDENTIFIER - 171)) | (1 << (VerilogParser.UNSIGNED_NUMBER - 171)))) !== 0)) {
          {
            this.state = 3581;
            this.remain_active_flag();
          }
        }

      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public fullskew_timing_check(): Fullskew_timing_checkContext {
    let _localctx: Fullskew_timing_checkContext = new Fullskew_timing_checkContext(this._ctx, this.state);
    this.enterRule(_localctx, 528, VerilogParser.RULE_fullskew_timing_check);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3584;
        this.match(VerilogParser.DLFULLSKEW);
        this.state = 3585;
        this.match(VerilogParser.LP);
        this.state = 3586;
        this.reference_event();
        this.state = 3587;
        this.match(VerilogParser.CO);
        this.state = 3588;
        this.data_event();
        this.state = 3589;
        this.match(VerilogParser.CO);
        this.state = 3590;
        this.timing_check_limit();
        this.state = 3591;
        this.match(VerilogParser.CO);
        this.state = 3592;
        this.timing_check_limit();
        this.state = 3594;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.CO) {
          {
            this.state = 3593;
            this.skew_timing_check_opt();
          }
        }

        this.state = 3596;
        this.match(VerilogParser.RP);
        this.state = 3597;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public period_timing_check(): Period_timing_checkContext {
    let _localctx: Period_timing_checkContext = new Period_timing_checkContext(this._ctx, this.state);
    this.enterRule(_localctx, 530, VerilogParser.RULE_period_timing_check);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3599;
        this.match(VerilogParser.DLPERIOD);
        this.state = 3600;
        this.match(VerilogParser.LP);
        this.state = 3601;
        this.controlled_reference_event();
        this.state = 3602;
        this.match(VerilogParser.CO);
        this.state = 3603;
        this.timing_check_limit();
        this.state = 3605;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.CO) {
          {
            this.state = 3604;
            this.notifier_opt();
          }
        }

        this.state = 3607;
        this.match(VerilogParser.RP);
        this.state = 3608;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public width_timing_check(): Width_timing_checkContext {
    let _localctx: Width_timing_checkContext = new Width_timing_checkContext(this._ctx, this.state);
    this.enterRule(_localctx, 532, VerilogParser.RULE_width_timing_check);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3610;
        this.match(VerilogParser.DLWIDTH);
        this.state = 3611;
        this.match(VerilogParser.LP);
        this.state = 3612;
        this.controlled_reference_event();
        this.state = 3613;
        this.match(VerilogParser.CO);
        this.state = 3614;
        this.timing_check_limit();
        this.state = 3616;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.CO) {
          {
            this.state = 3615;
            this.threshold_opt();
          }
        }

        this.state = 3618;
        this.match(VerilogParser.RP);
        this.state = 3619;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public threshold_opt(): Threshold_optContext {
    let _localctx: Threshold_optContext = new Threshold_optContext(this._ctx, this.state);
    this.enterRule(_localctx, 534, VerilogParser.RULE_threshold_opt);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3621;
        this.match(VerilogParser.CO);
        this.state = 3622;
        this.threshold();
        this.state = 3625;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.CO) {
          {
            this.state = 3623;
            this.match(VerilogParser.CO);
            this.state = 3624;
            this.notifier();
          }
        }

      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public nochange_timing_check(): Nochange_timing_checkContext {
    let _localctx: Nochange_timing_checkContext = new Nochange_timing_checkContext(this._ctx, this.state);
    this.enterRule(_localctx, 536, VerilogParser.RULE_nochange_timing_check);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3627;
        this.match(VerilogParser.DLNOCHANGE);
        this.state = 3628;
        this.match(VerilogParser.LP);
        this.state = 3629;
        this.reference_event();
        this.state = 3630;
        this.match(VerilogParser.CO);
        this.state = 3631;
        this.data_event();
        this.state = 3632;
        this.match(VerilogParser.CO);
        this.state = 3633;
        this.start_edge_offset();
        this.state = 3634;
        this.match(VerilogParser.CO);
        this.state = 3635;
        this.end_edge_offset();
        this.state = 3637;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.CO) {
          {
            this.state = 3636;
            this.notifier_opt();
          }
        }

        this.state = 3639;
        this.match(VerilogParser.RP);
        this.state = 3640;
        this.match(VerilogParser.SC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public checktime_condition(): Checktime_conditionContext {
    let _localctx: Checktime_conditionContext = new Checktime_conditionContext(this._ctx, this.state);
    this.enterRule(_localctx, 538, VerilogParser.RULE_checktime_condition);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3642;
        this.mintypmax_expression();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public controlled_reference_event(): Controlled_reference_eventContext {
    let _localctx: Controlled_reference_eventContext = new Controlled_reference_eventContext(this._ctx, this.state);
    this.enterRule(_localctx, 540, VerilogParser.RULE_controlled_reference_event);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3644;
        this.controlled_timing_check_event();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public data_event(): Data_eventContext {
    let _localctx: Data_eventContext = new Data_eventContext(this._ctx, this.state);
    this.enterRule(_localctx, 542, VerilogParser.RULE_data_event);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3646;
        this.timing_check_event();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public delayed_data(): Delayed_dataContext {
    let _localctx: Delayed_dataContext = new Delayed_dataContext(this._ctx, this.state);
    this.enterRule(_localctx, 544, VerilogParser.RULE_delayed_data);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3648;
        this.terminal_identifier();
        this.state = 3653;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.LB) {
          {
            this.state = 3649;
            this.match(VerilogParser.LB);
            this.state = 3650;
            this.constant_mintypmax_expression();
            this.state = 3651;
            this.match(VerilogParser.RB);
          }
        }

      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public delayed_reference(): Delayed_referenceContext {
    let _localctx: Delayed_referenceContext = new Delayed_referenceContext(this._ctx, this.state);
    this.enterRule(_localctx, 546, VerilogParser.RULE_delayed_reference);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3655;
        this.terminal_identifier();
        this.state = 3660;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.LB) {
          {
            this.state = 3656;
            this.match(VerilogParser.LB);
            this.state = 3657;
            this.constant_mintypmax_expression();
            this.state = 3658;
            this.match(VerilogParser.RB);
          }
        }

      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public end_edge_offset(): End_edge_offsetContext {
    let _localctx: End_edge_offsetContext = new End_edge_offsetContext(this._ctx, this.state);
    this.enterRule(_localctx, 548, VerilogParser.RULE_end_edge_offset);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3662;
        this.mintypmax_expression();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public event_based_flag(): Event_based_flagContext {
    let _localctx: Event_based_flagContext = new Event_based_flagContext(this._ctx, this.state);
    this.enterRule(_localctx, 550, VerilogParser.RULE_event_based_flag);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3664;
        this.constant_expression(0);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public notifier(): NotifierContext {
    let _localctx: NotifierContext = new NotifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 552, VerilogParser.RULE_notifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3666;
        this.variable_identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public reference_event(): Reference_eventContext {
    let _localctx: Reference_eventContext = new Reference_eventContext(this._ctx, this.state);
    this.enterRule(_localctx, 554, VerilogParser.RULE_reference_event);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3668;
        this.timing_check_event();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public remain_active_flag(): Remain_active_flagContext {
    let _localctx: Remain_active_flagContext = new Remain_active_flagContext(this._ctx, this.state);
    this.enterRule(_localctx, 556, VerilogParser.RULE_remain_active_flag);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3670;
        this.constant_expression(0);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public stamptime_condition(): Stamptime_conditionContext {
    let _localctx: Stamptime_conditionContext = new Stamptime_conditionContext(this._ctx, this.state);
    this.enterRule(_localctx, 558, VerilogParser.RULE_stamptime_condition);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3672;
        this.mintypmax_expression();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public start_edge_offset(): Start_edge_offsetContext {
    let _localctx: Start_edge_offsetContext = new Start_edge_offsetContext(this._ctx, this.state);
    this.enterRule(_localctx, 560, VerilogParser.RULE_start_edge_offset);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3674;
        this.mintypmax_expression();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public threshold(): ThresholdContext {
    let _localctx: ThresholdContext = new ThresholdContext(this._ctx, this.state);
    this.enterRule(_localctx, 562, VerilogParser.RULE_threshold);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3676;
        this.constant_expression(0);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public timing_check_limit(): Timing_check_limitContext {
    let _localctx: Timing_check_limitContext = new Timing_check_limitContext(this._ctx, this.state);
    this.enterRule(_localctx, 564, VerilogParser.RULE_timing_check_limit);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3678;
        this.expression(0);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public timing_check_event(): Timing_check_eventContext {
    let _localctx: Timing_check_eventContext = new Timing_check_eventContext(this._ctx, this.state);
    this.enterRule(_localctx, 566, VerilogParser.RULE_timing_check_event);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3681;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.EDGE || _la === VerilogParser.NEGEDGE || _la === VerilogParser.POSEDGE) {
          {
            this.state = 3680;
            this.timing_check_event_control();
          }
        }

        this.state = 3683;
        this.specify_terminal_descriptor();
        this.state = 3686;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.AMAMAM) {
          {
            this.state = 3684;
            this.match(VerilogParser.AMAMAM);
            this.state = 3685;
            this.timing_check_condition();
          }
        }

      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public controlled_timing_check_event(): Controlled_timing_check_eventContext {
    let _localctx: Controlled_timing_check_eventContext = new Controlled_timing_check_eventContext(this._ctx, this.state);
    this.enterRule(_localctx, 568, VerilogParser.RULE_controlled_timing_check_event);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3688;
        this.timing_check_event_control();
        this.state = 3689;
        this.specify_terminal_descriptor();
        this.state = 3692;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.AMAMAM) {
          {
            this.state = 3690;
            this.match(VerilogParser.AMAMAM);
            this.state = 3691;
            this.timing_check_condition();
          }
        }

      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public timing_check_event_control(): Timing_check_event_controlContext {
    let _localctx: Timing_check_event_controlContext = new Timing_check_event_controlContext(this._ctx, this.state);
    this.enterRule(_localctx, 570, VerilogParser.RULE_timing_check_event_control);
    try {
      this.state = 3697;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.POSEDGE:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 3694;
          this.match(VerilogParser.POSEDGE);
        }
          break;
        case VerilogParser.NEGEDGE:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 3695;
          this.match(VerilogParser.NEGEDGE);
        }
          break;
        case VerilogParser.EDGE:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 3696;
          this.edge_control_specifier();
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public specify_terminal_descriptor(): Specify_terminal_descriptorContext {
    let _localctx: Specify_terminal_descriptorContext = new Specify_terminal_descriptorContext(this._ctx, this.state);
    this.enterRule(_localctx, 572, VerilogParser.RULE_specify_terminal_descriptor);
    try {
      this.state = 3701;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 380, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 3699;
          this.specify_input_terminal_descriptor();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 3700;
          this.specify_output_terminal_descriptor();
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public edge_control_specifier(): Edge_control_specifierContext {
    let _localctx: Edge_control_specifierContext = new Edge_control_specifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 574, VerilogParser.RULE_edge_control_specifier);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3703;
        this.match(VerilogParser.EDGE);
        this.state = 3704;
        this.match(VerilogParser.LB);
        this.state = 3705;
        this.edge_descriptor();
        this.state = 3710;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 3706;
              this.match(VerilogParser.CO);
              this.state = 3707;
              this.edge_descriptor();
            }
          }
          this.state = 3712;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 3713;
        this.match(VerilogParser.RB);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public edge_descriptor(): Edge_descriptorContext {
    let _localctx: Edge_descriptorContext = new Edge_descriptorContext(this._ctx, this.state);
    this.enterRule(_localctx, 576, VerilogParser.RULE_edge_descriptor);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3715;
        this.match(VerilogParser.EDGE_DESCRIPTOR);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public timing_check_condition(): Timing_check_conditionContext {
    let _localctx: Timing_check_conditionContext = new Timing_check_conditionContext(this._ctx, this.state);
    this.enterRule(_localctx, 578, VerilogParser.RULE_timing_check_condition);
    try {
      this.state = 3722;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 382, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 3717;
          this.scalar_timing_check_condition();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 3718;
          this.match(VerilogParser.LP);
          this.state = 3719;
          this.scalar_timing_check_condition();
          this.state = 3720;
          this.match(VerilogParser.RP);
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public scalar_timing_check_condition(): Scalar_timing_check_conditionContext {
    let _localctx: Scalar_timing_check_conditionContext = new Scalar_timing_check_conditionContext(this._ctx, this.state);
    this.enterRule(_localctx, 580, VerilogParser.RULE_scalar_timing_check_condition);
    try {
      this.state = 3743;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 383, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 3724;
          this.expression(0);
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 3725;
          this.match(VerilogParser.TI);
          this.state = 3726;
          this.expression(0);
        }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 3727;
          this.expression(0);
          this.state = 3728;
          this.match(VerilogParser.EQEQ);
          this.state = 3729;
          this.scalar_constant();
        }
          break;

        case 4:
          this.enterOuterAlt(_localctx, 4);
        {
          this.state = 3731;
          this.expression(0);
          this.state = 3732;
          this.match(VerilogParser.EQEQEQ);
          this.state = 3733;
          this.scalar_constant();
        }
          break;

        case 5:
          this.enterOuterAlt(_localctx, 5);
        {
          this.state = 3735;
          this.expression(0);
          this.state = 3736;
          this.match(VerilogParser.EMEQ);
          this.state = 3737;
          this.scalar_constant();
        }
          break;

        case 6:
          this.enterOuterAlt(_localctx, 6);
        {
          this.state = 3739;
          this.expression(0);
          this.state = 3740;
          this.match(VerilogParser.EMEQEQ);
          this.state = 3741;
          this.scalar_constant();
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public scalar_constant(): Scalar_constantContext {
    let _localctx: Scalar_constantContext = new Scalar_constantContext(this._ctx, this.state);
    this.enterRule(_localctx, 582, VerilogParser.RULE_scalar_constant);
    try {
      this.state = 3747;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 384, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 3745;
          this.binary_number();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 3746;
          this.unsigned_number();
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public concatenation(): ConcatenationContext {
    let _localctx: ConcatenationContext = new ConcatenationContext(this._ctx, this.state);
    this.enterRule(_localctx, 584, VerilogParser.RULE_concatenation);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3749;
        this.match(VerilogParser.LC);
        this.state = 3750;
        this.expression(0);
        this.state = 3755;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 3751;
              this.match(VerilogParser.CO);
              this.state = 3752;
              this.expression(0);
            }
          }
          this.state = 3757;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 3758;
        this.match(VerilogParser.RC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public constant_concatenation(): Constant_concatenationContext {
    let _localctx: Constant_concatenationContext = new Constant_concatenationContext(this._ctx, this.state);
    this.enterRule(_localctx, 586, VerilogParser.RULE_constant_concatenation);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3760;
        this.match(VerilogParser.LC);
        this.state = 3761;
        this.constant_expression(0);
        this.state = 3766;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 3762;
              this.match(VerilogParser.CO);
              this.state = 3763;
              this.constant_expression(0);
            }
          }
          this.state = 3768;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 3769;
        this.match(VerilogParser.RC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public constant_multiple_concatenation(): Constant_multiple_concatenationContext {
    let _localctx: Constant_multiple_concatenationContext = new Constant_multiple_concatenationContext(this._ctx, this.state);
    this.enterRule(_localctx, 588, VerilogParser.RULE_constant_multiple_concatenation);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3771;
        this.match(VerilogParser.LC);
        this.state = 3772;
        this.constant_expression(0);
        this.state = 3773;
        this.constant_concatenation();
        this.state = 3774;
        this.match(VerilogParser.RC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public module_path_concatenation(): Module_path_concatenationContext {
    let _localctx: Module_path_concatenationContext = new Module_path_concatenationContext(this._ctx, this.state);
    this.enterRule(_localctx, 590, VerilogParser.RULE_module_path_concatenation);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3776;
        this.match(VerilogParser.LC);
        this.state = 3777;
        this.module_path_expression(0);
        this.state = 3782;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 3778;
              this.match(VerilogParser.CO);
              this.state = 3779;
              this.module_path_expression(0);
            }
          }
          this.state = 3784;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 3785;
        this.match(VerilogParser.RC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public module_path_multiple_concatenation(): Module_path_multiple_concatenationContext {
    let _localctx: Module_path_multiple_concatenationContext = new Module_path_multiple_concatenationContext(this._ctx, this.state);
    this.enterRule(_localctx, 592, VerilogParser.RULE_module_path_multiple_concatenation);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3787;
        this.match(VerilogParser.LC);
        this.state = 3788;
        this.constant_expression(0);
        this.state = 3789;
        this.module_path_concatenation();
        this.state = 3790;
        this.match(VerilogParser.RC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public multiple_concatenation(): Multiple_concatenationContext {
    let _localctx: Multiple_concatenationContext = new Multiple_concatenationContext(this._ctx, this.state);
    this.enterRule(_localctx, 594, VerilogParser.RULE_multiple_concatenation);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3792;
        this.match(VerilogParser.LC);
        this.state = 3793;
        this.constant_expression(0);
        this.state = 3794;
        this.concatenation();
        this.state = 3795;
        this.match(VerilogParser.RC);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public constant_function_call(): Constant_function_callContext {
    let _localctx: Constant_function_callContext = new Constant_function_callContext(this._ctx, this.state);
    this.enterRule(_localctx, 596, VerilogParser.RULE_constant_function_call);
    let _la: number;
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3797;
        this.function_identifier();
        this.state = 3801;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 388, this._ctx);
        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 3798;
                this.attribute_instance();
              }
            }
          }
          this.state = 3803;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 388, this._ctx);
        }
        this.state = 3804;
        this.match(VerilogParser.LP);
        this.state = 3805;
        this.constant_expression(0);
        this.state = 3810;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 3806;
              this.match(VerilogParser.CO);
              this.state = 3807;
              this.constant_expression(0);
            }
          }
          this.state = 3812;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 3813;
        this.match(VerilogParser.RP);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public constant_system_function_call(): Constant_system_function_callContext {
    let _localctx: Constant_system_function_callContext = new Constant_system_function_callContext(this._ctx, this.state);
    this.enterRule(_localctx, 598, VerilogParser.RULE_constant_system_function_call);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3815;
        this.system_function_identifier();
        this.state = 3816;
        this.match(VerilogParser.LP);
        this.state = 3817;
        this.constant_expression(0);
        this.state = 3822;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 3818;
              this.match(VerilogParser.CO);
              this.state = 3819;
              this.constant_expression(0);
            }
          }
          this.state = 3824;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 3825;
        this.match(VerilogParser.RP);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public function_call(): Function_callContext {
    let _localctx: Function_callContext = new Function_callContext(this._ctx, this.state);
    this.enterRule(_localctx, 600, VerilogParser.RULE_function_call);
    let _la: number;
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3827;
        this.hierarchical_identifier();
        this.state = 3831;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 391, this._ctx);
        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 3828;
                this.attribute_instance();
              }
            }
          }
          this.state = 3833;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 391, this._ctx);
        }
        this.state = 3834;
        this.match(VerilogParser.LP);
        this.state = 3835;
        this.expression(0);
        this.state = 3840;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 3836;
              this.match(VerilogParser.CO);
              this.state = 3837;
              this.expression(0);
            }
          }
          this.state = 3842;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 3843;
        this.match(VerilogParser.RP);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public system_function_call(): System_function_callContext {
    let _localctx: System_function_callContext = new System_function_callContext(this._ctx, this.state);
    this.enterRule(_localctx, 602, VerilogParser.RULE_system_function_call);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3845;
        this.system_function_identifier();
        this.state = 3847;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 393, this._ctx)) {
          case 1: {
            this.state = 3846;
            this.sys_func_call_port_list();
          }
            break;
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public sys_func_call_port_list(): Sys_func_call_port_listContext {
    let _localctx: Sys_func_call_port_listContext = new Sys_func_call_port_listContext(this._ctx, this.state);
    this.enterRule(_localctx, 604, VerilogParser.RULE_sys_func_call_port_list);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3849;
        this.match(VerilogParser.LP);
        this.state = 3850;
        this.expression(0);
        this.state = 3855;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 3851;
              this.match(VerilogParser.CO);
              this.state = 3852;
              this.expression(0);
            }
          }
          this.state = 3857;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 3858;
        this.match(VerilogParser.RP);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public base_expression(): Base_expressionContext {
    let _localctx: Base_expressionContext = new Base_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 606, VerilogParser.RULE_base_expression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3860;
        this.expression(0);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public constant_base_expression(): Constant_base_expressionContext {
    let _localctx: Constant_base_expressionContext = new Constant_base_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 608, VerilogParser.RULE_constant_base_expression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3862;
        this.constant_expression(0);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  public constant_expression(): Constant_expressionContext;
  public constant_expression(_p: number): Constant_expressionContext;
  // @RuleVersion(0)
  public constant_expression(_p?: number): Constant_expressionContext {
    if (_p === undefined) {
      _p = 0;
    }

    let _parentctx: ParserRuleContext = this._ctx;
    let _parentState: number = this.state;
    let _localctx: Constant_expressionContext = new Constant_expressionContext(this._ctx, _parentState);
    let _prevctx: Constant_expressionContext = _localctx;
    let _startState: number = 610;
    this.enterRecursionRule(_localctx, 610, VerilogParser.RULE_constant_expression, _p);
    let _la: number;
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3875;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case VerilogParser.LC:
          case VerilogParser.LP:
          case VerilogParser.BINARY_BASE:
          case VerilogParser.DECIMAL_BASE:
          case VerilogParser.ESCAPED_IDENTIFIER:
          case VerilogParser.EXPONENTIAL_NUMBER:
          case VerilogParser.FIXED_POINT_NUMBER:
          case VerilogParser.HEX_BASE:
          case VerilogParser.OCTAL_BASE:
          case VerilogParser.SIMPLE_IDENTIFIER:
          case VerilogParser.STRING:
          case VerilogParser.SYSTEM_TF_IDENTIFIER:
          case VerilogParser.UNSIGNED_NUMBER: {
            this.state = 3865;
            this.constant_primary();
          }
            break;
          case VerilogParser.AM:
          case VerilogParser.CA:
          case VerilogParser.CATI:
          case VerilogParser.EM:
          case VerilogParser.MI:
          case VerilogParser.PL:
          case VerilogParser.TI:
          case VerilogParser.TIAM:
          case VerilogParser.TICA:
          case VerilogParser.TIVL:
          case VerilogParser.VL: {
            this.state = 3866;
            this.unary_operator();
            this.state = 3870;
            this._errHandler.sync(this);
            _alt = this.interpreter.adaptivePredict(this._input, 395, this._ctx);
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
              if (_alt === 1) {
                {
                  {
                    this.state = 3867;
                    this.attribute_instance();
                  }
                }
              }
              this.state = 3872;
              this._errHandler.sync(this);
              _alt = this.interpreter.adaptivePredict(this._input, 395, this._ctx);
            }
            this.state = 3873;
            this.constant_primary();
          }
            break;
          default:
            throw new NoViableAltException(this);
        }
        this._ctx._stop = this._input.tryLT(-1);
        this.state = 3990;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 410, this._ctx);
        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            if (this._parseListeners != null) {
              this.triggerExitRuleEvent();
            }
            _prevctx = _localctx;
            {
              this.state = 3988;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 409, this._ctx)) {
                case 1: {
                  _localctx = new Constant_expressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_constant_expression);
                  this.state = 3877;
                  if (!(this.precpred(this._ctx, 12))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 12)");
                  }
                  this.state = 3878;
                  this.match(VerilogParser.ASAS);
                  this.state = 3882;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 397, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 3879;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 3884;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 397, this._ctx);
                  }
                  this.state = 3885;
                  this.constant_expression(13);
                }
                  break;

                case 2: {
                  _localctx = new Constant_expressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_constant_expression);
                  this.state = 3886;
                  if (!(this.precpred(this._ctx, 11))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 11)");
                  }
                  this.state = 3887;
                  _la = this._input.LA(1);
                  if (!(_la === VerilogParser.AS || _la === VerilogParser.MO || _la === VerilogParser.SL)) {
                    this._errHandler.recoverInline(this);
                  } else {
                    if (this._input.LA(1) === Token.EOF) {
                      this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                  }
                  this.state = 3891;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 398, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 3888;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 3893;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 398, this._ctx);
                  }
                  this.state = 3894;
                  this.constant_expression(12);
                }
                  break;

                case 3: {
                  _localctx = new Constant_expressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_constant_expression);
                  this.state = 3895;
                  if (!(this.precpred(this._ctx, 10))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 10)");
                  }
                  this.state = 3896;
                  _la = this._input.LA(1);
                  if (!(_la === VerilogParser.MI || _la === VerilogParser.PL)) {
                    this._errHandler.recoverInline(this);
                  } else {
                    if (this._input.LA(1) === Token.EOF) {
                      this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                  }
                  this.state = 3900;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 399, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 3897;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 3902;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 399, this._ctx);
                  }
                  this.state = 3903;
                  this.constant_expression(11);
                }
                  break;

                case 4: {
                  _localctx = new Constant_expressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_constant_expression);
                  this.state = 3904;
                  if (!(this.precpred(this._ctx, 9))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 9)");
                  }
                  this.state = 3905;
                  _la = this._input.LA(1);
                  if (!(((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (VerilogParser.GTGT - 161)) | (1 << (VerilogParser.GTGTGT - 161)) | (1 << (VerilogParser.LTLT - 161)) | (1 << (VerilogParser.LTLTLT - 161)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                  } else {
                    if (this._input.LA(1) === Token.EOF) {
                      this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                  }
                  this.state = 3909;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 400, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 3906;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 3911;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 400, this._ctx);
                  }
                  this.state = 3912;
                  this.constant_expression(10);
                }
                  break;

                case 5: {
                  _localctx = new Constant_expressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_constant_expression);
                  this.state = 3913;
                  if (!(this.precpred(this._ctx, 8))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 8)");
                  }
                  this.state = 3914;
                  _la = this._input.LA(1);
                  if (!(((((_la - 159)) & ~0x1F) === 0 && ((1 << (_la - 159)) & ((1 << (VerilogParser.GT - 159)) | (1 << (VerilogParser.GTEQ - 159)) | (1 << (VerilogParser.LT - 159)) | (1 << (VerilogParser.LTEQ - 159)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                  } else {
                    if (this._input.LA(1) === Token.EOF) {
                      this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                  }
                  this.state = 3918;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 401, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 3915;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 3920;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 401, this._ctx);
                  }
                  this.state = 3921;
                  this.constant_expression(9);
                }
                  break;

                case 6: {
                  _localctx = new Constant_expressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_constant_expression);
                  this.state = 3922;
                  if (!(this.precpred(this._ctx, 7))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 7)");
                  }
                  this.state = 3923;
                  _la = this._input.LA(1);
                  if (!(((((_la - 152)) & ~0x1F) === 0 && ((1 << (_la - 152)) & ((1 << (VerilogParser.EMEQ - 152)) | (1 << (VerilogParser.EMEQEQ - 152)) | (1 << (VerilogParser.EQEQ - 152)) | (1 << (VerilogParser.EQEQEQ - 152)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                  } else {
                    if (this._input.LA(1) === Token.EOF) {
                      this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                  }
                  this.state = 3927;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 402, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 3924;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 3929;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 402, this._ctx);
                  }
                  this.state = 3930;
                  this.constant_expression(8);
                }
                  break;

                case 7: {
                  _localctx = new Constant_expressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_constant_expression);
                  this.state = 3931;
                  if (!(this.precpred(this._ctx, 6))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 6)");
                  }
                  this.state = 3932;
                  this.match(VerilogParser.AM);
                  this.state = 3936;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 403, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 3933;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 3938;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 403, this._ctx);
                  }
                  this.state = 3939;
                  this.constant_expression(7);
                }
                  break;

                case 8: {
                  _localctx = new Constant_expressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_constant_expression);
                  this.state = 3940;
                  if (!(this.precpred(this._ctx, 5))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 5)");
                  }
                  this.state = 3941;
                  _la = this._input.LA(1);
                  if (!(_la === VerilogParser.CA || _la === VerilogParser.CATI || _la === VerilogParser.TICA)) {
                    this._errHandler.recoverInline(this);
                  } else {
                    if (this._input.LA(1) === Token.EOF) {
                      this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                  }
                  this.state = 3945;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 404, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 3942;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 3947;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 404, this._ctx);
                  }
                  this.state = 3948;
                  this.constant_expression(6);
                }
                  break;

                case 9: {
                  _localctx = new Constant_expressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_constant_expression);
                  this.state = 3949;
                  if (!(this.precpred(this._ctx, 4))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 4)");
                  }
                  this.state = 3950;
                  this.match(VerilogParser.VL);
                  this.state = 3954;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 405, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 3951;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 3956;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 405, this._ctx);
                  }
                  this.state = 3957;
                  this.constant_expression(5);
                }
                  break;

                case 10: {
                  _localctx = new Constant_expressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_constant_expression);
                  this.state = 3958;
                  if (!(this.precpred(this._ctx, 3))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
                  }
                  this.state = 3959;
                  this.match(VerilogParser.AMAM);
                  this.state = 3963;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 406, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 3960;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 3965;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 406, this._ctx);
                  }
                  this.state = 3966;
                  this.constant_expression(4);
                }
                  break;

                case 11: {
                  _localctx = new Constant_expressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_constant_expression);
                  this.state = 3967;
                  if (!(this.precpred(this._ctx, 2))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
                  }
                  this.state = 3968;
                  this.match(VerilogParser.VLVL);
                  this.state = 3972;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 407, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 3969;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 3974;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 407, this._ctx);
                  }
                  this.state = 3975;
                  this.constant_expression(3);
                }
                  break;

                case 12: {
                  _localctx = new Constant_expressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_constant_expression);
                  this.state = 3976;
                  if (!(this.precpred(this._ctx, 1))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
                  }
                  this.state = 3977;
                  this.match(VerilogParser.QM);
                  this.state = 3981;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 408, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 3978;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 3983;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 408, this._ctx);
                  }
                  this.state = 3984;
                  this.constant_expression(0);
                  this.state = 3985;
                  this.match(VerilogParser.CL);
                  this.state = 3986;
                  this.constant_expression(1);
                }
                  break;
              }
            }
          }
          this.state = 3992;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 410, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public constant_mintypmax_expression(): Constant_mintypmax_expressionContext {
    let _localctx: Constant_mintypmax_expressionContext = new Constant_mintypmax_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 612, VerilogParser.RULE_constant_mintypmax_expression);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 3993;
        this.constant_expression(0);
        this.state = 3999;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.CL) {
          {
            this.state = 3994;
            this.match(VerilogParser.CL);
            this.state = 3995;
            this.constant_expression(0);
            this.state = 3996;
            this.match(VerilogParser.CL);
            this.state = 3997;
            this.constant_expression(0);
          }
        }

      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public constant_range_expression(): Constant_range_expressionContext {
    let _localctx: Constant_range_expressionContext = new Constant_range_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 614, VerilogParser.RULE_constant_range_expression);
    try {
      this.state = 4014;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 412, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 4001;
          this.constant_expression(0);
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 4002;
          this.msb_constant_expression();
          this.state = 4003;
          this.match(VerilogParser.CL);
          this.state = 4004;
          this.lsb_constant_expression();
        }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 4006;
          this.constant_base_expression();
          this.state = 4007;
          this.match(VerilogParser.PLCL);
          this.state = 4008;
          this.width_constant_expression();
        }
          break;

        case 4:
          this.enterOuterAlt(_localctx, 4);
        {
          this.state = 4010;
          this.constant_base_expression();
          this.state = 4011;
          this.match(VerilogParser.MICL);
          this.state = 4012;
          this.width_constant_expression();
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public dimension_constant_expression(): Dimension_constant_expressionContext {
    let _localctx: Dimension_constant_expressionContext = new Dimension_constant_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 616, VerilogParser.RULE_dimension_constant_expression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4016;
        this.constant_expression(0);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  public expression(): ExpressionContext;
  public expression(_p: number): ExpressionContext;
  // @RuleVersion(0)
  public expression(_p?: number): ExpressionContext {
    if (_p === undefined) {
      _p = 0;
    }

    let _parentctx: ParserRuleContext = this._ctx;
    let _parentState: number = this.state;
    let _localctx: ExpressionContext = new ExpressionContext(this._ctx, _parentState);
    let _prevctx: ExpressionContext = _localctx;
    let _startState: number = 618;
    this.enterRecursionRule(_localctx, 618, VerilogParser.RULE_expression, _p);
    let _la: number;
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4029;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case VerilogParser.LC:
          case VerilogParser.LP:
          case VerilogParser.BINARY_BASE:
          case VerilogParser.DECIMAL_BASE:
          case VerilogParser.ESCAPED_IDENTIFIER:
          case VerilogParser.EXPONENTIAL_NUMBER:
          case VerilogParser.FIXED_POINT_NUMBER:
          case VerilogParser.HEX_BASE:
          case VerilogParser.OCTAL_BASE:
          case VerilogParser.SIMPLE_IDENTIFIER:
          case VerilogParser.STRING:
          case VerilogParser.SYSTEM_TF_IDENTIFIER:
          case VerilogParser.UNSIGNED_NUMBER: {
            this.state = 4019;
            this.primary();
          }
            break;
          case VerilogParser.AM:
          case VerilogParser.CA:
          case VerilogParser.CATI:
          case VerilogParser.EM:
          case VerilogParser.MI:
          case VerilogParser.PL:
          case VerilogParser.TI:
          case VerilogParser.TIAM:
          case VerilogParser.TICA:
          case VerilogParser.TIVL:
          case VerilogParser.VL: {
            this.state = 4020;
            this.unary_operator();
            this.state = 4024;
            this._errHandler.sync(this);
            _alt = this.interpreter.adaptivePredict(this._input, 413, this._ctx);
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
              if (_alt === 1) {
                {
                  {
                    this.state = 4021;
                    this.attribute_instance();
                  }
                }
              }
              this.state = 4026;
              this._errHandler.sync(this);
              _alt = this.interpreter.adaptivePredict(this._input, 413, this._ctx);
            }
            this.state = 4027;
            this.primary();
          }
            break;
          default:
            throw new NoViableAltException(this);
        }
        this._ctx._stop = this._input.tryLT(-1);
        this.state = 4144;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 428, this._ctx);
        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            if (this._parseListeners != null) {
              this.triggerExitRuleEvent();
            }
            _prevctx = _localctx;
            {
              this.state = 4142;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 427, this._ctx)) {
                case 1: {
                  _localctx = new ExpressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_expression);
                  this.state = 4031;
                  if (!(this.precpred(this._ctx, 12))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 12)");
                  }
                  this.state = 4032;
                  this.match(VerilogParser.ASAS);
                  this.state = 4036;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 415, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 4033;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 4038;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 415, this._ctx);
                  }
                  this.state = 4039;
                  this.expression(13);
                }
                  break;

                case 2: {
                  _localctx = new ExpressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_expression);
                  this.state = 4040;
                  if (!(this.precpred(this._ctx, 11))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 11)");
                  }
                  this.state = 4041;
                  _la = this._input.LA(1);
                  if (!(_la === VerilogParser.AS || _la === VerilogParser.MO || _la === VerilogParser.SL)) {
                    this._errHandler.recoverInline(this);
                  } else {
                    if (this._input.LA(1) === Token.EOF) {
                      this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                  }
                  this.state = 4045;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 416, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 4042;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 4047;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 416, this._ctx);
                  }
                  this.state = 4048;
                  this.expression(12);
                }
                  break;

                case 3: {
                  _localctx = new ExpressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_expression);
                  this.state = 4049;
                  if (!(this.precpred(this._ctx, 10))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 10)");
                  }
                  this.state = 4050;
                  _la = this._input.LA(1);
                  if (!(_la === VerilogParser.MI || _la === VerilogParser.PL)) {
                    this._errHandler.recoverInline(this);
                  } else {
                    if (this._input.LA(1) === Token.EOF) {
                      this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                  }
                  this.state = 4054;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 417, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 4051;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 4056;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 417, this._ctx);
                  }
                  this.state = 4057;
                  this.expression(11);
                }
                  break;

                case 4: {
                  _localctx = new ExpressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_expression);
                  this.state = 4058;
                  if (!(this.precpred(this._ctx, 9))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 9)");
                  }
                  this.state = 4059;
                  _la = this._input.LA(1);
                  if (!(((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (VerilogParser.GTGT - 161)) | (1 << (VerilogParser.GTGTGT - 161)) | (1 << (VerilogParser.LTLT - 161)) | (1 << (VerilogParser.LTLTLT - 161)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                  } else {
                    if (this._input.LA(1) === Token.EOF) {
                      this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                  }
                  this.state = 4063;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 418, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 4060;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 4065;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 418, this._ctx);
                  }
                  this.state = 4066;
                  this.expression(10);
                }
                  break;

                case 5: {
                  _localctx = new ExpressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_expression);
                  this.state = 4067;
                  if (!(this.precpred(this._ctx, 8))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 8)");
                  }
                  this.state = 4068;
                  _la = this._input.LA(1);
                  if (!(((((_la - 159)) & ~0x1F) === 0 && ((1 << (_la - 159)) & ((1 << (VerilogParser.GT - 159)) | (1 << (VerilogParser.GTEQ - 159)) | (1 << (VerilogParser.LT - 159)) | (1 << (VerilogParser.LTEQ - 159)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                  } else {
                    if (this._input.LA(1) === Token.EOF) {
                      this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                  }
                  this.state = 4072;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 419, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 4069;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 4074;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 419, this._ctx);
                  }
                  this.state = 4075;
                  this.expression(9);
                }
                  break;

                case 6: {
                  _localctx = new ExpressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_expression);
                  this.state = 4076;
                  if (!(this.precpred(this._ctx, 7))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 7)");
                  }
                  this.state = 4077;
                  _la = this._input.LA(1);
                  if (!(((((_la - 152)) & ~0x1F) === 0 && ((1 << (_la - 152)) & ((1 << (VerilogParser.EMEQ - 152)) | (1 << (VerilogParser.EMEQEQ - 152)) | (1 << (VerilogParser.EQEQ - 152)) | (1 << (VerilogParser.EQEQEQ - 152)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                  } else {
                    if (this._input.LA(1) === Token.EOF) {
                      this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                  }
                  this.state = 4081;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 420, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 4078;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 4083;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 420, this._ctx);
                  }
                  this.state = 4084;
                  this.expression(8);
                }
                  break;

                case 7: {
                  _localctx = new ExpressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_expression);
                  this.state = 4085;
                  if (!(this.precpred(this._ctx, 6))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 6)");
                  }
                  this.state = 4086;
                  this.match(VerilogParser.AM);
                  this.state = 4090;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 421, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 4087;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 4092;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 421, this._ctx);
                  }
                  this.state = 4093;
                  this.expression(7);
                }
                  break;

                case 8: {
                  _localctx = new ExpressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_expression);
                  this.state = 4094;
                  if (!(this.precpred(this._ctx, 5))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 5)");
                  }
                  this.state = 4095;
                  _la = this._input.LA(1);
                  if (!(_la === VerilogParser.CA || _la === VerilogParser.CATI || _la === VerilogParser.TICA)) {
                    this._errHandler.recoverInline(this);
                  } else {
                    if (this._input.LA(1) === Token.EOF) {
                      this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                  }
                  this.state = 4099;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 422, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 4096;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 4101;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 422, this._ctx);
                  }
                  this.state = 4102;
                  this.expression(6);
                }
                  break;

                case 9: {
                  _localctx = new ExpressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_expression);
                  this.state = 4103;
                  if (!(this.precpred(this._ctx, 4))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 4)");
                  }
                  this.state = 4104;
                  this.match(VerilogParser.VL);
                  this.state = 4108;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 423, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 4105;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 4110;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 423, this._ctx);
                  }
                  this.state = 4111;
                  this.expression(5);
                }
                  break;

                case 10: {
                  _localctx = new ExpressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_expression);
                  this.state = 4112;
                  if (!(this.precpred(this._ctx, 3))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
                  }
                  this.state = 4113;
                  this.match(VerilogParser.AMAM);
                  this.state = 4117;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 424, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 4114;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 4119;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 424, this._ctx);
                  }
                  this.state = 4120;
                  this.expression(4);
                }
                  break;

                case 11: {
                  _localctx = new ExpressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_expression);
                  this.state = 4121;
                  if (!(this.precpred(this._ctx, 2))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
                  }
                  this.state = 4122;
                  this.match(VerilogParser.VLVL);
                  this.state = 4126;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 425, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 4123;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 4128;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 425, this._ctx);
                  }
                  this.state = 4129;
                  this.expression(3);
                }
                  break;

                case 12: {
                  _localctx = new ExpressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_expression);
                  this.state = 4130;
                  if (!(this.precpred(this._ctx, 1))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
                  }
                  this.state = 4131;
                  this.match(VerilogParser.QM);
                  this.state = 4135;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 426, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 4132;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 4137;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 426, this._ctx);
                  }
                  this.state = 4138;
                  this.expression(0);
                  this.state = 4139;
                  this.match(VerilogParser.CL);
                  this.state = 4140;
                  this.expression(1);
                }
                  break;
              }
            }
          }
          this.state = 4146;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 428, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public lsb_constant_expression(): Lsb_constant_expressionContext {
    let _localctx: Lsb_constant_expressionContext = new Lsb_constant_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 620, VerilogParser.RULE_lsb_constant_expression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4147;
        this.constant_expression(0);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public mintypmax_expression(): Mintypmax_expressionContext {
    let _localctx: Mintypmax_expressionContext = new Mintypmax_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 622, VerilogParser.RULE_mintypmax_expression);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4149;
        this.expression(0);
        this.state = 4155;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.CL) {
          {
            this.state = 4150;
            this.match(VerilogParser.CL);
            this.state = 4151;
            this.expression(0);
            this.state = 4152;
            this.match(VerilogParser.CL);
            this.state = 4153;
            this.expression(0);
          }
        }

      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  public module_path_expression(): Module_path_expressionContext;
  public module_path_expression(_p: number): Module_path_expressionContext;
  // @RuleVersion(0)
  public module_path_expression(_p?: number): Module_path_expressionContext {
    if (_p === undefined) {
      _p = 0;
    }

    let _parentctx: ParserRuleContext = this._ctx;
    let _parentState: number = this.state;
    let _localctx: Module_path_expressionContext = new Module_path_expressionContext(this._ctx, _parentState);
    let _prevctx: Module_path_expressionContext = _localctx;
    let _startState: number = 624;
    this.enterRecursionRule(_localctx, 624, VerilogParser.RULE_module_path_expression, _p);
    let _la: number;
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4168;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case VerilogParser.LC:
          case VerilogParser.LP:
          case VerilogParser.BINARY_BASE:
          case VerilogParser.DECIMAL_BASE:
          case VerilogParser.ESCAPED_IDENTIFIER:
          case VerilogParser.EXPONENTIAL_NUMBER:
          case VerilogParser.FIXED_POINT_NUMBER:
          case VerilogParser.HEX_BASE:
          case VerilogParser.OCTAL_BASE:
          case VerilogParser.SIMPLE_IDENTIFIER:
          case VerilogParser.SYSTEM_TF_IDENTIFIER:
          case VerilogParser.UNSIGNED_NUMBER: {
            this.state = 4158;
            this.module_path_primary();
          }
            break;
          case VerilogParser.AM:
          case VerilogParser.CA:
          case VerilogParser.CATI:
          case VerilogParser.EM:
          case VerilogParser.TI:
          case VerilogParser.TIAM:
          case VerilogParser.TICA:
          case VerilogParser.TIVL:
          case VerilogParser.VL: {
            this.state = 4159;
            this.unary_module_path_operator();
            this.state = 4163;
            this._errHandler.sync(this);
            _alt = this.interpreter.adaptivePredict(this._input, 430, this._ctx);
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
              if (_alt === 1) {
                {
                  {
                    this.state = 4160;
                    this.attribute_instance();
                  }
                }
              }
              this.state = 4165;
              this._errHandler.sync(this);
              _alt = this.interpreter.adaptivePredict(this._input, 430, this._ctx);
            }
            this.state = 4166;
            this.module_path_primary();
          }
            break;
          default:
            throw new NoViableAltException(this);
        }
        this._ctx._stop = this._input.tryLT(-1);
        this.state = 4238;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 440, this._ctx);
        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            if (this._parseListeners != null) {
              this.triggerExitRuleEvent();
            }
            _prevctx = _localctx;
            {
              this.state = 4236;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 439, this._ctx)) {
                case 1: {
                  _localctx = new Module_path_expressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_module_path_expression);
                  this.state = 4170;
                  if (!(this.precpred(this._ctx, 7))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 7)");
                  }
                  this.state = 4171;
                  _la = this._input.LA(1);
                  if (!(_la === VerilogParser.EMEQ || _la === VerilogParser.EQEQ)) {
                    this._errHandler.recoverInline(this);
                  } else {
                    if (this._input.LA(1) === Token.EOF) {
                      this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                  }
                  this.state = 4175;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 432, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 4172;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 4177;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 432, this._ctx);
                  }
                  this.state = 4178;
                  this.module_path_expression(8);
                }
                  break;

                case 2: {
                  _localctx = new Module_path_expressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_module_path_expression);
                  this.state = 4179;
                  if (!(this.precpred(this._ctx, 6))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 6)");
                  }
                  this.state = 4180;
                  this.match(VerilogParser.AM);
                  this.state = 4184;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 433, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 4181;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 4186;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 433, this._ctx);
                  }
                  this.state = 4187;
                  this.module_path_expression(7);
                }
                  break;

                case 3: {
                  _localctx = new Module_path_expressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_module_path_expression);
                  this.state = 4188;
                  if (!(this.precpred(this._ctx, 5))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 5)");
                  }
                  this.state = 4189;
                  _la = this._input.LA(1);
                  if (!(_la === VerilogParser.CA || _la === VerilogParser.CATI || _la === VerilogParser.TICA)) {
                    this._errHandler.recoverInline(this);
                  } else {
                    if (this._input.LA(1) === Token.EOF) {
                      this.matchedEOF = true;
                    }

                    this._errHandler.reportMatch(this);
                    this.consume();
                  }
                  this.state = 4193;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 434, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 4190;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 4195;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 434, this._ctx);
                  }
                  this.state = 4196;
                  this.module_path_expression(6);
                }
                  break;

                case 4: {
                  _localctx = new Module_path_expressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_module_path_expression);
                  this.state = 4197;
                  if (!(this.precpred(this._ctx, 4))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 4)");
                  }
                  this.state = 4198;
                  this.match(VerilogParser.VL);
                  this.state = 4202;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 435, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 4199;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 4204;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 435, this._ctx);
                  }
                  this.state = 4205;
                  this.module_path_expression(5);
                }
                  break;

                case 5: {
                  _localctx = new Module_path_expressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_module_path_expression);
                  this.state = 4206;
                  if (!(this.precpred(this._ctx, 3))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
                  }
                  this.state = 4207;
                  this.match(VerilogParser.AMAM);
                  this.state = 4211;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 436, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 4208;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 4213;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 436, this._ctx);
                  }
                  this.state = 4214;
                  this.module_path_expression(4);
                }
                  break;

                case 6: {
                  _localctx = new Module_path_expressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_module_path_expression);
                  this.state = 4215;
                  if (!(this.precpred(this._ctx, 2))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
                  }
                  this.state = 4216;
                  this.match(VerilogParser.VLVL);
                  this.state = 4220;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 437, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 4217;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 4222;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 437, this._ctx);
                  }
                  this.state = 4223;
                  this.module_path_expression(3);
                }
                  break;

                case 7: {
                  _localctx = new Module_path_expressionContext(_parentctx, _parentState);
                  this.pushNewRecursionContext(_localctx, _startState, VerilogParser.RULE_module_path_expression);
                  this.state = 4224;
                  if (!(this.precpred(this._ctx, 1))) {
                    throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
                  }
                  this.state = 4225;
                  this.match(VerilogParser.QM);
                  this.state = 4229;
                  this._errHandler.sync(this);
                  _alt = this.interpreter.adaptivePredict(this._input, 438, this._ctx);
                  while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 4226;
                          this.attribute_instance();
                        }
                      }
                    }
                    this.state = 4231;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 438, this._ctx);
                  }
                  this.state = 4232;
                  this.module_path_expression(0);
                  this.state = 4233;
                  this.match(VerilogParser.CL);
                  this.state = 4234;
                  this.module_path_expression(1);
                }
                  break;
              }
            }
          }
          this.state = 4240;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 440, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public module_path_mintypmax_expression(): Module_path_mintypmax_expressionContext {
    let _localctx: Module_path_mintypmax_expressionContext = new Module_path_mintypmax_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 626, VerilogParser.RULE_module_path_mintypmax_expression);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4241;
        this.module_path_expression(0);
        this.state = 4247;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.CL) {
          {
            this.state = 4242;
            this.match(VerilogParser.CL);
            this.state = 4243;
            this.module_path_expression(0);
            this.state = 4244;
            this.match(VerilogParser.CL);
            this.state = 4245;
            this.module_path_expression(0);
          }
        }

      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public msb_constant_expression(): Msb_constant_expressionContext {
    let _localctx: Msb_constant_expressionContext = new Msb_constant_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 628, VerilogParser.RULE_msb_constant_expression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4249;
        this.constant_expression(0);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public range_expression(): Range_expressionContext {
    let _localctx: Range_expressionContext = new Range_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 630, VerilogParser.RULE_range_expression);
    try {
      this.state = 4264;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 442, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 4251;
          this.expression(0);
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 4252;
          this.msb_constant_expression();
          this.state = 4253;
          this.match(VerilogParser.CL);
          this.state = 4254;
          this.lsb_constant_expression();
        }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 4256;
          this.base_expression();
          this.state = 4257;
          this.match(VerilogParser.PLCL);
          this.state = 4258;
          this.width_constant_expression();
        }
          break;

        case 4:
          this.enterOuterAlt(_localctx, 4);
        {
          this.state = 4260;
          this.base_expression();
          this.state = 4261;
          this.match(VerilogParser.MICL);
          this.state = 4262;
          this.width_constant_expression();
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public width_constant_expression(): Width_constant_expressionContext {
    let _localctx: Width_constant_expressionContext = new Width_constant_expressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 632, VerilogParser.RULE_width_constant_expression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4266;
        this.constant_expression(0);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public constant_primary(): Constant_primaryContext {
    let _localctx: Constant_primaryContext = new Constant_primaryContext(this._ctx, this.state);
    this.enterRule(_localctx, 634, VerilogParser.RULE_constant_primary);
    try {
      this.state = 4285;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 444, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 4268;
          this.number();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 4269;
          this.identifier();
          this.state = 4274;
          this._errHandler.sync(this);
          switch (this.interpreter.adaptivePredict(this._input, 443, this._ctx)) {
            case 1: {
              this.state = 4270;
              this.match(VerilogParser.LB);
              this.state = 4271;
              this.constant_range_expression();
              this.state = 4272;
              this.match(VerilogParser.RB);
            }
              break;
          }
        }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 4276;
          this.constant_concatenation();
        }
          break;

        case 4:
          this.enterOuterAlt(_localctx, 4);
        {
          this.state = 4277;
          this.constant_multiple_concatenation();
        }
          break;

        case 5:
          this.enterOuterAlt(_localctx, 5);
        {
          this.state = 4278;
          this.constant_function_call();
        }
          break;

        case 6:
          this.enterOuterAlt(_localctx, 6);
        {
          this.state = 4279;
          this.constant_system_function_call();
        }
          break;

        case 7:
          this.enterOuterAlt(_localctx, 7);
        {
          this.state = 4280;
          this.match(VerilogParser.LP);
          this.state = 4281;
          this.constant_mintypmax_expression();
          this.state = 4282;
          this.match(VerilogParser.RP);
        }
          break;

        case 8:
          this.enterOuterAlt(_localctx, 8);
        {
          this.state = 4284;
          this.string_();
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public module_path_primary(): Module_path_primaryContext {
    let _localctx: Module_path_primaryContext = new Module_path_primaryContext(this._ctx, this.state);
    this.enterRule(_localctx, 636, VerilogParser.RULE_module_path_primary);
    try {
      this.state = 4297;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 445, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 4287;
          this.number();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 4288;
          this.identifier();
        }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 4289;
          this.module_path_concatenation();
        }
          break;

        case 4:
          this.enterOuterAlt(_localctx, 4);
        {
          this.state = 4290;
          this.module_path_multiple_concatenation();
        }
          break;

        case 5:
          this.enterOuterAlt(_localctx, 5);
        {
          this.state = 4291;
          this.function_call();
        }
          break;

        case 6:
          this.enterOuterAlt(_localctx, 6);
        {
          this.state = 4292;
          this.system_function_call();
        }
          break;

        case 7:
          this.enterOuterAlt(_localctx, 7);
        {
          this.state = 4293;
          this.match(VerilogParser.LP);
          this.state = 4294;
          this.module_path_mintypmax_expression();
          this.state = 4295;
          this.match(VerilogParser.RP);
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public primary(): PrimaryContext {
    let _localctx: PrimaryContext = new PrimaryContext(this._ctx, this.state);
    this.enterRule(_localctx, 638, VerilogParser.RULE_primary);
    try {
      this.state = 4313;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 447, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 4299;
          this.number();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 4300;
          this.hierarchical_identifier();
          this.state = 4302;
          this._errHandler.sync(this);
          switch (this.interpreter.adaptivePredict(this._input, 446, this._ctx)) {
            case 1: {
              this.state = 4301;
              this.select_();
            }
              break;
          }
        }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 4304;
          this.concatenation();
        }
          break;

        case 4:
          this.enterOuterAlt(_localctx, 4);
        {
          this.state = 4305;
          this.multiple_concatenation();
        }
          break;

        case 5:
          this.enterOuterAlt(_localctx, 5);
        {
          this.state = 4306;
          this.function_call();
        }
          break;

        case 6:
          this.enterOuterAlt(_localctx, 6);
        {
          this.state = 4307;
          this.system_function_call();
        }
          break;

        case 7:
          this.enterOuterAlt(_localctx, 7);
        {
          this.state = 4308;
          this.match(VerilogParser.LP);
          this.state = 4309;
          this.mintypmax_expression();
          this.state = 4310;
          this.match(VerilogParser.RP);
        }
          break;

        case 8:
          this.enterOuterAlt(_localctx, 8);
        {
          this.state = 4312;
          this.string_();
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public select_(): Select_Context {
    let _localctx: Select_Context = new Select_Context(this._ctx, this.state);
    this.enterRule(_localctx, 640, VerilogParser.RULE_select_);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4316;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 448, this._ctx)) {
          case 1: {
            this.state = 4315;
            this.bit_select();
          }
            break;
        }
        this.state = 4318;
        this.match(VerilogParser.LB);
        this.state = 4319;
        this.range_expression();
        this.state = 4320;
        this.match(VerilogParser.RB);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public bit_select(): Bit_selectContext {
    let _localctx: Bit_selectContext = new Bit_selectContext(this._ctx, this.state);
    this.enterRule(_localctx, 642, VerilogParser.RULE_bit_select);
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4326;
        this._errHandler.sync(this);
        _alt = 1;
        do {
          switch (_alt) {
            case 1: {
              {
                this.state = 4322;
                this.match(VerilogParser.LB);
                this.state = 4323;
                this.expression(0);
                this.state = 4324;
                this.match(VerilogParser.RB);
              }
            }
              break;
            default:
              throw new NoViableAltException(this);
          }
          this.state = 4328;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 449, this._ctx);
        } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public net_lvalue(): Net_lvalueContext {
    let _localctx: Net_lvalueContext = new Net_lvalueContext(this._ctx, this.state);
    this.enterRule(_localctx, 644, VerilogParser.RULE_net_lvalue);
    let _la: number;
    try {
      this.state = 4345;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.ESCAPED_IDENTIFIER:
        case VerilogParser.SIMPLE_IDENTIFIER:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 4330;
          this.hierarchical_identifier();
          this.state = 4332;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.LB) {
            {
              this.state = 4331;
              this.const_select();
            }
          }

        }
          break;
        case VerilogParser.LC:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 4334;
          this.match(VerilogParser.LC);
          this.state = 4335;
          this.net_lvalue();
          this.state = 4340;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.CO) {
            {
              {
                this.state = 4336;
                this.match(VerilogParser.CO);
                this.state = 4337;
                this.net_lvalue();
              }
            }
            this.state = 4342;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 4343;
          this.match(VerilogParser.RC);
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public const_select(): Const_selectContext {
    let _localctx: Const_selectContext = new Const_selectContext(this._ctx, this.state);
    this.enterRule(_localctx, 646, VerilogParser.RULE_const_select);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4348;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 453, this._ctx)) {
          case 1: {
            this.state = 4347;
            this.const_bit_select();
          }
            break;
        }
        this.state = 4350;
        this.match(VerilogParser.LB);
        this.state = 4351;
        this.constant_range_expression();
        this.state = 4352;
        this.match(VerilogParser.RB);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public const_bit_select(): Const_bit_selectContext {
    let _localctx: Const_bit_selectContext = new Const_bit_selectContext(this._ctx, this.state);
    this.enterRule(_localctx, 648, VerilogParser.RULE_const_bit_select);
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4358;
        this._errHandler.sync(this);
        _alt = 1;
        do {
          switch (_alt) {
            case 1: {
              {
                this.state = 4354;
                this.match(VerilogParser.LB);
                this.state = 4355;
                this.constant_expression(0);
                this.state = 4356;
                this.match(VerilogParser.RB);
              }
            }
              break;
            default:
              throw new NoViableAltException(this);
          }
          this.state = 4360;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 454, this._ctx);
        } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public variable_lvalue(): Variable_lvalueContext {
    let _localctx: Variable_lvalueContext = new Variable_lvalueContext(this._ctx, this.state);
    this.enterRule(_localctx, 650, VerilogParser.RULE_variable_lvalue);
    let _la: number;
    try {
      this.state = 4377;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.ESCAPED_IDENTIFIER:
        case VerilogParser.SIMPLE_IDENTIFIER:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 4362;
          this.hierarchical_identifier();
          this.state = 4364;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.LB) {
            {
              this.state = 4363;
              this.select_();
            }
          }

        }
          break;
        case VerilogParser.LC:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 4366;
          this.match(VerilogParser.LC);
          this.state = 4367;
          this.variable_lvalue();
          this.state = 4372;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === VerilogParser.CO) {
            {
              {
                this.state = 4368;
                this.match(VerilogParser.CO);
                this.state = 4369;
                this.variable_lvalue();
              }
            }
            this.state = 4374;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 4375;
          this.match(VerilogParser.RC);
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public unary_operator(): Unary_operatorContext {
    let _localctx: Unary_operatorContext = new Unary_operatorContext(this._ctx, this.state);
    this.enterRule(_localctx, 652, VerilogParser.RULE_unary_operator);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4379;
        _la = this._input.LA(1);
        if (!(((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (VerilogParser.AM - 137)) | (1 << (VerilogParser.CA - 137)) | (1 << (VerilogParser.CATI - 137)) | (1 << (VerilogParser.EM - 137)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (VerilogParser.MI - 171)) | (1 << (VerilogParser.PL - 171)) | (1 << (VerilogParser.TI - 171)) | (1 << (VerilogParser.TIAM - 171)) | (1 << (VerilogParser.TICA - 171)) | (1 << (VerilogParser.TIVL - 171)) | (1 << (VerilogParser.VL - 171)))) !== 0))) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public unary_module_path_operator(): Unary_module_path_operatorContext {
    let _localctx: Unary_module_path_operatorContext = new Unary_module_path_operatorContext(this._ctx, this.state);
    this.enterRule(_localctx, 654, VerilogParser.RULE_unary_module_path_operator);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4381;
        _la = this._input.LA(1);
        if (!(((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (VerilogParser.AM - 137)) | (1 << (VerilogParser.CA - 137)) | (1 << (VerilogParser.CATI - 137)) | (1 << (VerilogParser.EM - 137)))) !== 0) || ((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & ((1 << (VerilogParser.TI - 183)) | (1 << (VerilogParser.TIAM - 183)) | (1 << (VerilogParser.TICA - 183)) | (1 << (VerilogParser.TIVL - 183)) | (1 << (VerilogParser.VL - 183)))) !== 0))) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public number(): NumberContext {
    let _localctx: NumberContext = new NumberContext(this._ctx, this.state);
    this.enterRule(_localctx, 656, VerilogParser.RULE_number);
    try {
      this.state = 4388;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 458, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 4383;
          this.decimal_number();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 4384;
          this.octal_number();
        }
          break;

        case 3:
          this.enterOuterAlt(_localctx, 3);
        {
          this.state = 4385;
          this.binary_number();
        }
          break;

        case 4:
          this.enterOuterAlt(_localctx, 4);
        {
          this.state = 4386;
          this.hex_number();
        }
          break;

        case 5:
          this.enterOuterAlt(_localctx, 5);
        {
          this.state = 4387;
          this.real_number();
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public real_number(): Real_numberContext {
    let _localctx: Real_numberContext = new Real_numberContext(this._ctx, this.state);
    this.enterRule(_localctx, 658, VerilogParser.RULE_real_number);
    try {
      this.state = 4392;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.FIXED_POINT_NUMBER:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 4390;
          this.fixed_point_number();
        }
          break;
        case VerilogParser.EXPONENTIAL_NUMBER:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 4391;
          this.exponential_number();
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public decimal_number(): Decimal_numberContext {
    let _localctx: Decimal_numberContext = new Decimal_numberContext(this._ctx, this.state);
    this.enterRule(_localctx, 660, VerilogParser.RULE_decimal_number);
    let _la: number;
    try {
      this.state = 4401;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 461, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 4394;
          this.unsigned_number();
        }
          break;

        case 2:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 4396;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === VerilogParser.UNSIGNED_NUMBER) {
            {
              this.state = 4395;
              this.size();
            }
          }

          this.state = 4398;
          this.decimal_base();
          this.state = 4399;
          this.decimal_value();
        }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public binary_number(): Binary_numberContext {
    let _localctx: Binary_numberContext = new Binary_numberContext(this._ctx, this.state);
    this.enterRule(_localctx, 662, VerilogParser.RULE_binary_number);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4404;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.UNSIGNED_NUMBER) {
          {
            this.state = 4403;
            this.size();
          }
        }

        this.state = 4406;
        this.binary_base();
        this.state = 4407;
        this.binary_value();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public octal_number(): Octal_numberContext {
    let _localctx: Octal_numberContext = new Octal_numberContext(this._ctx, this.state);
    this.enterRule(_localctx, 664, VerilogParser.RULE_octal_number);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4410;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.UNSIGNED_NUMBER) {
          {
            this.state = 4409;
            this.size();
          }
        }

        this.state = 4412;
        this.octal_base();
        this.state = 4413;
        this.octal_value();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public hex_number(): Hex_numberContext {
    let _localctx: Hex_numberContext = new Hex_numberContext(this._ctx, this.state);
    this.enterRule(_localctx, 666, VerilogParser.RULE_hex_number);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4416;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.UNSIGNED_NUMBER) {
          {
            this.state = 4415;
            this.size();
          }
        }

        this.state = 4418;
        this.hex_base();
        this.state = 4419;
        this.hex_value();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public size(): SizeContext {
    let _localctx: SizeContext = new SizeContext(this._ctx, this.state);
    this.enterRule(_localctx, 668, VerilogParser.RULE_size);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4421;
        this.match(VerilogParser.UNSIGNED_NUMBER);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public fixed_point_number(): Fixed_point_numberContext {
    let _localctx: Fixed_point_numberContext = new Fixed_point_numberContext(this._ctx, this.state);
    this.enterRule(_localctx, 670, VerilogParser.RULE_fixed_point_number);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4423;
        this.match(VerilogParser.FIXED_POINT_NUMBER);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public exponential_number(): Exponential_numberContext {
    let _localctx: Exponential_numberContext = new Exponential_numberContext(this._ctx, this.state);
    this.enterRule(_localctx, 672, VerilogParser.RULE_exponential_number);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4425;
        this.match(VerilogParser.EXPONENTIAL_NUMBER);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public unsigned_number(): Unsigned_numberContext {
    let _localctx: Unsigned_numberContext = new Unsigned_numberContext(this._ctx, this.state);
    this.enterRule(_localctx, 674, VerilogParser.RULE_unsigned_number);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4427;
        this.match(VerilogParser.UNSIGNED_NUMBER);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public decimal_value(): Decimal_valueContext {
    let _localctx: Decimal_valueContext = new Decimal_valueContext(this._ctx, this.state);
    this.enterRule(_localctx, 676, VerilogParser.RULE_decimal_value);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4429;
        _la = this._input.LA(1);
        if (!(_la === VerilogParser.UNSIGNED_NUMBER || _la === VerilogParser.X_OR_Z_UNDERSCORE)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }

          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public binary_value(): Binary_valueContext {
    let _localctx: Binary_valueContext = new Binary_valueContext(this._ctx, this.state);
    this.enterRule(_localctx, 678, VerilogParser.RULE_binary_value);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4431;
        this.match(VerilogParser.BINARY_VALUE);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public octal_value(): Octal_valueContext {
    let _localctx: Octal_valueContext = new Octal_valueContext(this._ctx, this.state);
    this.enterRule(_localctx, 680, VerilogParser.RULE_octal_value);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4433;
        this.match(VerilogParser.OCTAL_VALUE);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public hex_value(): Hex_valueContext {
    let _localctx: Hex_valueContext = new Hex_valueContext(this._ctx, this.state);
    this.enterRule(_localctx, 682, VerilogParser.RULE_hex_value);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4435;
        this.match(VerilogParser.HEX_VALUE);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public decimal_base(): Decimal_baseContext {
    let _localctx: Decimal_baseContext = new Decimal_baseContext(this._ctx, this.state);
    this.enterRule(_localctx, 684, VerilogParser.RULE_decimal_base);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4437;
        this.match(VerilogParser.DECIMAL_BASE);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public binary_base(): Binary_baseContext {
    let _localctx: Binary_baseContext = new Binary_baseContext(this._ctx, this.state);
    this.enterRule(_localctx, 686, VerilogParser.RULE_binary_base);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4439;
        this.match(VerilogParser.BINARY_BASE);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public octal_base(): Octal_baseContext {
    let _localctx: Octal_baseContext = new Octal_baseContext(this._ctx, this.state);
    this.enterRule(_localctx, 688, VerilogParser.RULE_octal_base);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4441;
        this.match(VerilogParser.OCTAL_BASE);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public hex_base(): Hex_baseContext {
    let _localctx: Hex_baseContext = new Hex_baseContext(this._ctx, this.state);
    this.enterRule(_localctx, 690, VerilogParser.RULE_hex_base);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4443;
        this.match(VerilogParser.HEX_BASE);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public string_(): String_Context {
    let _localctx: String_Context = new String_Context(this._ctx, this.state);
    this.enterRule(_localctx, 692, VerilogParser.RULE_string_);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4445;
        this.match(VerilogParser.STRING);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public attribute_instance(): Attribute_instanceContext {
    let _localctx: Attribute_instanceContext = new Attribute_instanceContext(this._ctx, this.state);
    this.enterRule(_localctx, 694, VerilogParser.RULE_attribute_instance);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4447;
        this.match(VerilogParser.LP);
        this.state = 4448;
        this.match(VerilogParser.AS);
        this.state = 4449;
        this.attr_spec();
        this.state = 4454;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === VerilogParser.CO) {
          {
            {
              this.state = 4450;
              this.match(VerilogParser.CO);
              this.state = 4451;
              this.attr_spec();
            }
          }
          this.state = 4456;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 4457;
        this.match(VerilogParser.AS);
        this.state = 4458;
        this.match(VerilogParser.RP);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public attr_spec(): Attr_specContext {
    let _localctx: Attr_specContext = new Attr_specContext(this._ctx, this.state);
    this.enterRule(_localctx, 696, VerilogParser.RULE_attr_spec);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4460;
        this.attr_name();
        this.state = 4463;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.EQ) {
          {
            this.state = 4461;
            this.match(VerilogParser.EQ);
            this.state = 4462;
            this.constant_expression(0);
          }
        }

      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public attr_name(): Attr_nameContext {
    let _localctx: Attr_nameContext = new Attr_nameContext(this._ctx, this.state);
    this.enterRule(_localctx, 698, VerilogParser.RULE_attr_name);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4465;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public block_identifier(): Block_identifierContext {
    let _localctx: Block_identifierContext = new Block_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 700, VerilogParser.RULE_block_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4467;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public cell_identifier(): Cell_identifierContext {
    let _localctx: Cell_identifierContext = new Cell_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 702, VerilogParser.RULE_cell_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4469;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public config_identifier(): Config_identifierContext {
    let _localctx: Config_identifierContext = new Config_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 704, VerilogParser.RULE_config_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4471;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public escaped_identifier(): Escaped_identifierContext {
    let _localctx: Escaped_identifierContext = new Escaped_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 706, VerilogParser.RULE_escaped_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4473;
        this.match(VerilogParser.ESCAPED_IDENTIFIER);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public event_identifier(): Event_identifierContext {
    let _localctx: Event_identifierContext = new Event_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 708, VerilogParser.RULE_event_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4475;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public function_identifier(): Function_identifierContext {
    let _localctx: Function_identifierContext = new Function_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 710, VerilogParser.RULE_function_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4477;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public gate_instance_identifier(): Gate_instance_identifierContext {
    let _localctx: Gate_instance_identifierContext = new Gate_instance_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 712, VerilogParser.RULE_gate_instance_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4479;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public generate_block_identifier(): Generate_block_identifierContext {
    let _localctx: Generate_block_identifierContext = new Generate_block_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 714, VerilogParser.RULE_generate_block_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4481;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public genvar_identifier(): Genvar_identifierContext {
    let _localctx: Genvar_identifierContext = new Genvar_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 716, VerilogParser.RULE_genvar_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4483;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public hierarchical_identifier(): Hierarchical_identifierContext {
    let _localctx: Hierarchical_identifierContext = new Hierarchical_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 718, VerilogParser.RULE_hierarchical_identifier);
    try {
      let _alt: number;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4488;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 467, this._ctx);
        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 4485;
                this.hier_ref();
              }
            }
          }
          this.state = 4490;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 467, this._ctx);
        }
        this.state = 4491;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public hier_ref(): Hier_refContext {
    let _localctx: Hier_refContext = new Hier_refContext(this._ctx, this.state);
    this.enterRule(_localctx, 720, VerilogParser.RULE_hier_ref);
    let _la: number;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4493;
        this.identifier();
        this.state = 4495;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === VerilogParser.LB) {
          {
            this.state = 4494;
            this.const_bit_select();
          }
        }

        this.state = 4497;
        this.match(VerilogParser.DT);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public identifier(): IdentifierContext {
    let _localctx: IdentifierContext = new IdentifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 722, VerilogParser.RULE_identifier);
    try {
      this.state = 4501;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case VerilogParser.ESCAPED_IDENTIFIER:
          this.enterOuterAlt(_localctx, 1);
        {
          this.state = 4499;
          this.escaped_identifier();
        }
          break;
        case VerilogParser.SIMPLE_IDENTIFIER:
          this.enterOuterAlt(_localctx, 2);
        {
          this.state = 4500;
          this.simple_identifier();
        }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public input_port_identifier(): Input_port_identifierContext {
    let _localctx: Input_port_identifierContext = new Input_port_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 724, VerilogParser.RULE_input_port_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4503;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public instance_identifier(): Instance_identifierContext {
    let _localctx: Instance_identifierContext = new Instance_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 726, VerilogParser.RULE_instance_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4505;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public library_identifier(): Library_identifierContext {
    let _localctx: Library_identifierContext = new Library_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 728, VerilogParser.RULE_library_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4507;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public module_identifier(): Module_identifierContext {
    let _localctx: Module_identifierContext = new Module_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 730, VerilogParser.RULE_module_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4509;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public module_instance_identifier(): Module_instance_identifierContext {
    let _localctx: Module_instance_identifierContext = new Module_instance_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 732, VerilogParser.RULE_module_instance_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4511;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public net_identifier(): Net_identifierContext {
    let _localctx: Net_identifierContext = new Net_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 734, VerilogParser.RULE_net_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4513;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public output_port_identifier(): Output_port_identifierContext {
    let _localctx: Output_port_identifierContext = new Output_port_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 736, VerilogParser.RULE_output_port_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4515;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public parameter_identifier(): Parameter_identifierContext {
    let _localctx: Parameter_identifierContext = new Parameter_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 738, VerilogParser.RULE_parameter_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4517;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public port_identifier(): Port_identifierContext {
    let _localctx: Port_identifierContext = new Port_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 740, VerilogParser.RULE_port_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4519;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public real_identifier(): Real_identifierContext {
    let _localctx: Real_identifierContext = new Real_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 742, VerilogParser.RULE_real_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4521;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public simple_identifier(): Simple_identifierContext {
    let _localctx: Simple_identifierContext = new Simple_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 744, VerilogParser.RULE_simple_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4523;
        this.match(VerilogParser.SIMPLE_IDENTIFIER);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public specparam_identifier(): Specparam_identifierContext {
    let _localctx: Specparam_identifierContext = new Specparam_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 746, VerilogParser.RULE_specparam_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4525;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public system_function_identifier(): System_function_identifierContext {
    let _localctx: System_function_identifierContext = new System_function_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 748, VerilogParser.RULE_system_function_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4527;
        this.match(VerilogParser.SYSTEM_TF_IDENTIFIER);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public system_task_identifier(): System_task_identifierContext {
    let _localctx: System_task_identifierContext = new System_task_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 750, VerilogParser.RULE_system_task_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4529;
        this.match(VerilogParser.SYSTEM_TF_IDENTIFIER);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public task_identifier(): Task_identifierContext {
    let _localctx: Task_identifierContext = new Task_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 752, VerilogParser.RULE_task_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4531;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public terminal_identifier(): Terminal_identifierContext {
    let _localctx: Terminal_identifierContext = new Terminal_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 754, VerilogParser.RULE_terminal_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4533;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public topmodule_identifier(): Topmodule_identifierContext {
    let _localctx: Topmodule_identifierContext = new Topmodule_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 756, VerilogParser.RULE_topmodule_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4535;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public udp_identifier(): Udp_identifierContext {
    let _localctx: Udp_identifierContext = new Udp_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 758, VerilogParser.RULE_udp_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4537;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public udp_instance_identifier(): Udp_instance_identifierContext {
    let _localctx: Udp_instance_identifierContext = new Udp_instance_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 760, VerilogParser.RULE_udp_instance_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4539;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  // @RuleVersion(0)
  public variable_identifier(): Variable_identifierContext {
    let _localctx: Variable_identifierContext = new Variable_identifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 762, VerilogParser.RULE_variable_identifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 4541;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }

  public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
    switch (ruleIndex) {
      case 193:
        return this.event_expression_sempred(_localctx as Event_expressionContext, predIndex);

      case 305:
        return this.constant_expression_sempred(_localctx as Constant_expressionContext, predIndex);

      case 309:
        return this.expression_sempred(_localctx as ExpressionContext, predIndex);

      case 312:
        return this.module_path_expression_sempred(_localctx as Module_path_expressionContext, predIndex);
    }
    return true;
  }

  private event_expression_sempred(_localctx: Event_expressionContext, predIndex: number): boolean {
    switch (predIndex) {
      case 0:
        return this.precpred(this._ctx, 2);

      case 1:
        return this.precpred(this._ctx, 1);
    }
    return true;
  }

  private constant_expression_sempred(_localctx: Constant_expressionContext, predIndex: number): boolean {
    switch (predIndex) {
      case 2:
        return this.precpred(this._ctx, 12);

      case 3:
        return this.precpred(this._ctx, 11);

      case 4:
        return this.precpred(this._ctx, 10);

      case 5:
        return this.precpred(this._ctx, 9);

      case 6:
        return this.precpred(this._ctx, 8);

      case 7:
        return this.precpred(this._ctx, 7);

      case 8:
        return this.precpred(this._ctx, 6);

      case 9:
        return this.precpred(this._ctx, 5);

      case 10:
        return this.precpred(this._ctx, 4);

      case 11:
        return this.precpred(this._ctx, 3);

      case 12:
        return this.precpred(this._ctx, 2);

      case 13:
        return this.precpred(this._ctx, 1);
    }
    return true;
  }

  private expression_sempred(_localctx: ExpressionContext, predIndex: number): boolean {
    switch (predIndex) {
      case 14:
        return this.precpred(this._ctx, 12);

      case 15:
        return this.precpred(this._ctx, 11);

      case 16:
        return this.precpred(this._ctx, 10);

      case 17:
        return this.precpred(this._ctx, 9);

      case 18:
        return this.precpred(this._ctx, 8);

      case 19:
        return this.precpred(this._ctx, 7);

      case 20:
        return this.precpred(this._ctx, 6);

      case 21:
        return this.precpred(this._ctx, 5);

      case 22:
        return this.precpred(this._ctx, 4);

      case 23:
        return this.precpred(this._ctx, 3);

      case 24:
        return this.precpred(this._ctx, 2);

      case 25:
        return this.precpred(this._ctx, 1);
    }
    return true;
  }

  private module_path_expression_sempred(_localctx: Module_path_expressionContext, predIndex: number): boolean {
    switch (predIndex) {
      case 26:
        return this.precpred(this._ctx, 7);

      case 27:
        return this.precpred(this._ctx, 6);

      case 28:
        return this.precpred(this._ctx, 5);

      case 29:
        return this.precpred(this._ctx, 4);

      case 30:
        return this.precpred(this._ctx, 3);

      case 31:
        return this.precpred(this._ctx, 2);

      case 32:
        return this.precpred(this._ctx, 1);
    }
    return true;
  }

  private static readonly _serializedATNSegments: number = 8;
  private static readonly _serializedATNSegment0: string =
    "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\xF7\u11C2\x04" +
    "\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
    "\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
    "\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
    "\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
    "\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
    "\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
    "#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
    "+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
    "4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
    "=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
    "F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
    "O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
    "X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
    "`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
    "i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
    "r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
    "{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
    "\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
    "\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
    "\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
    "\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
    "\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
    "\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
    "\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
    "\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
    "\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
    "\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
    "\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
    "\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
    "\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
    "\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
    "\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
    "\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
    "\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
    "\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
    "\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0\t\xE0" +
    "\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x04\xE4\t\xE4\x04\xE5\t\xE5" +
    "\x04\xE6\t\xE6\x04\xE7\t\xE7\x04\xE8\t\xE8\x04\xE9\t\xE9\x04\xEA\t\xEA" +
    "\x04\xEB\t\xEB\x04\xEC\t\xEC\x04\xED\t\xED\x04\xEE\t\xEE\x04\xEF\t\xEF" +
    "\x04\xF0\t\xF0\x04\xF1\t\xF1\x04\xF2\t\xF2\x04\xF3\t\xF3\x04\xF4\t\xF4" +
    "\x04\xF5\t\xF5\x04\xF6\t\xF6\x04\xF7\t\xF7\x04\xF8\t\xF8\x04\xF9\t\xF9" +
    "\x04\xFA\t\xFA\x04\xFB\t\xFB\x04\xFC\t\xFC\x04\xFD\t\xFD\x04\xFE\t\xFE" +
    "\x04\xFF\t\xFF\x04\u0100\t\u0100\x04\u0101\t\u0101\x04\u0102\t\u0102\x04" +
    "\u0103\t\u0103\x04\u0104\t\u0104\x04\u0105\t\u0105\x04\u0106\t\u0106\x04" +
    "\u0107\t\u0107\x04\u0108\t\u0108\x04\u0109\t\u0109\x04\u010A\t\u010A\x04" +
    "\u010B\t\u010B\x04\u010C\t\u010C\x04\u010D\t\u010D\x04\u010E\t\u010E\x04" +
    "\u010F\t\u010F\x04\u0110\t\u0110\x04\u0111\t\u0111\x04\u0112\t\u0112\x04" +
    "\u0113\t\u0113\x04\u0114\t\u0114\x04\u0115\t\u0115\x04\u0116\t\u0116\x04" +
    "\u0117\t\u0117\x04\u0118\t\u0118\x04\u0119\t\u0119\x04\u011A\t\u011A\x04" +
    "\u011B\t\u011B\x04\u011C\t\u011C\x04\u011D\t\u011D\x04\u011E\t\u011E\x04" +
    "\u011F\t\u011F\x04\u0120\t\u0120\x04\u0121\t\u0121\x04\u0122\t\u0122\x04" +
    "\u0123\t\u0123\x04\u0124\t\u0124\x04\u0125\t\u0125\x04\u0126\t\u0126\x04" +
    "\u0127\t\u0127\x04\u0128\t\u0128\x04\u0129\t\u0129\x04\u012A\t\u012A\x04" +
    "\u012B\t\u012B\x04\u012C\t\u012C\x04\u012D\t\u012D\x04\u012E\t\u012E\x04" +
    "\u012F\t\u012F\x04\u0130\t\u0130\x04\u0131\t\u0131\x04\u0132\t\u0132\x04" +
    "\u0133\t\u0133\x04\u0134\t\u0134\x04\u0135\t\u0135\x04\u0136\t\u0136\x04" +
    "\u0137\t\u0137\x04\u0138\t\u0138\x04\u0139\t\u0139\x04\u013A\t\u013A\x04" +
    "\u013B\t\u013B\x04\u013C\t\u013C\x04\u013D\t\u013D\x04\u013E\t\u013E\x04" +
    "\u013F\t\u013F\x04\u0140\t\u0140\x04\u0141\t\u0141\x04\u0142\t\u0142\x04" +
    "\u0143\t\u0143\x04\u0144\t\u0144\x04\u0145\t\u0145\x04\u0146\t\u0146\x04" +
    "\u0147\t\u0147\x04\u0148\t\u0148\x04\u0149\t\u0149\x04\u014A\t\u014A\x04" +
    "\u014B\t\u014B\x04\u014C\t\u014C\x04\u014D\t\u014D\x04\u014E\t\u014E\x04" +
    "\u014F\t\u014F\x04\u0150\t\u0150\x04\u0151\t\u0151\x04\u0152\t\u0152\x04" +
    "\u0153\t\u0153\x04\u0154\t\u0154\x04\u0155\t\u0155\x04\u0156\t\u0156\x04" +
    "\u0157\t\u0157\x04\u0158\t\u0158\x04\u0159\t\u0159\x04\u015A\t\u015A\x04" +
    "\u015B\t\u015B\x04\u015C\t\u015C\x04\u015D\t\u015D\x04\u015E\t\u015E\x04" +
    "\u015F\t\u015F\x04\u0160\t\u0160\x04\u0161\t\u0161\x04\u0162\t\u0162\x04" +
    "\u0163\t\u0163\x04\u0164\t\u0164\x04\u0165\t\u0165\x04\u0166\t\u0166\x04" +
    "\u0167\t\u0167\x04\u0168\t\u0168\x04\u0169\t\u0169\x04\u016A\t\u016A\x04" +
    "\u016B\t\u016B\x04\u016C\t\u016C\x04\u016D\t\u016D\x04\u016E\t\u016E\x04" +
    "\u016F\t\u016F\x04\u0170\t\u0170\x04\u0171\t\u0171\x04\u0172\t\u0172\x04" +
    "\u0173\t\u0173\x04\u0174\t\u0174\x04\u0175\t\u0175\x04\u0176\t\u0176\x04" +
    "\u0177\t\u0177\x04\u0178\t\u0178\x04\u0179\t\u0179\x04\u017A\t\u017A\x04" +
    "\u017B\t\u017B\x04\u017C\t\u017C\x04\u017D\t\u017D\x04\u017E\t\u017E\x04" +
    "\u017F\t\u017F\x03\x02\x07\x02\u0300\n\x02\f\x02\x0E\x02\u0303\v\x02\x03" +
    "\x02\x03\x02\x03\x03\x03\x03\x03\x03\x05\x03\u030A\n\x03\x03\x04\x03\x04" +
    "\x03\x04\x03\x04\x03\x04\x07\x04\u0311\n\x04\f\x04\x0E\x04\u0314\v\x04" +
    "\x03\x04\x05\x04\u0317\n\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03" +
    "\x05\x07\x05\u031F\n\x05\f\x05\x0E\x05\u0322\v\x05\x03\x06\x03\x06\x03" +
    "\x06\x03\x06\x03\x07\x03\x07\x03\b\x07\b\u032B\n\b\f\b\x0E\b\u032E\v\b" +
    "\x03\b\x03\b\x03\t\x03\t\x03\t\x05\t\u0335\n\t\x03\n\x07\n\u0338\n\n\f" +
    "\n\x0E\n\u033B\v\n\x03\n\x03\n\x03\n\x05\n\u0340\n\n\x03\n\x05\n\u0343" +
    "\n\n\x03\n\x03\n\x07\n\u0347\n\n\f\n\x0E\n\u034A\v\n\x03\n\x03\n\x03\v" +
    "\x03\v\x03\f\x03\f\x03\f\x03\f\x03\f\x07\f\u0355\n\f\f\f\x0E\f\u0358\v" +
    "\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x07\r\u0360\n\r\f\r\x0E\r\u0363" +
    "\v\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x06\r\u036B\n\r\r\r\x0E\r\u036C" +
    "\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03" +
    "\r\x05\r\u037B\n\r\x03\x0E\x05\x0E\u037E\n\x0E\x03\x0E\x05\x0E\u0381\n" +
    "\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x05\x10\u0389\n\x10" +
    "\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x07\x11\u0392" +
    "\n\x11\f\x11\x0E\x11\u0395\v\x11\x03\x11\x03\x11\x05\x11\u0399\n\x11\x03" +
    "\x12\x03\x12\x03\x12\x03\x12\x03\x12\x05\x12\u03A0\n\x12\x03\x13\x07\x13" +
    "\u03A3\n\x13\f\x13\x0E\x13\u03A6\v\x13\x03\x13\x03\x13\x07\x13\u03AA\n" +
    "\x13\f\x13\x0E\x13\u03AD\v\x13\x03\x13\x03\x13\x07\x13\u03B1\n\x13\f\x13" +
    "\x0E\x13\u03B4\v\x13\x03\x13\x05\x13\u03B7\n\x13\x03\x14\x03\x14\x03\x14" +
    "\x03\x14\x03\x14\x03\x14\x03\x14\x07\x14\u03C0\n\x14\f\x14\x0E\x14\u03C3" +
    "\v\x14\x03\x14\x03\x14\x03\x14\x03\x14\x07\x14\u03C9\n\x14\f\x14\x0E\x14" +
    "\u03CC\v\x14\x03\x14\x05\x14\u03CF\n\x14\x03\x15\x07\x15\u03D2\n\x15\f" +
    "\x15\x0E\x15\u03D5\v\x15\x03\x15\x03\x15\x07\x15\u03D9\n\x15\f\x15\x0E" +
    "\x15\u03DC\v\x15\x03\x15\x03\x15\x03\x15\x03\x15\x07\x15\u03E2\n\x15\f" +
    "\x15\x0E\x15\u03E5\v\x15\x03\x15\x03\x15\x07\x15\u03E9\n\x15\f\x15\x0E" +
    "\x15\u03EC\v\x15\x03\x15\x03\x15\x07\x15\u03F0\n\x15\f\x15\x0E\x15\u03F3" +
    "\v\x15\x03\x15\x03\x15\x07\x15\u03F7\n\x15\f\x15\x0E\x15\u03FA\v\x15\x03" +
    "\x15\x03\x15\x07\x15\u03FE\n\x15\f\x15\x0E\x15\u0401\v\x15\x03\x15\x03" +
    "\x15\x07\x15\u0405\n\x15\f\x15\x0E\x15\u0408\v\x15\x03\x15\x03\x15\x07" +
    "\x15\u040C\n\x15\f\x15\x0E\x15\u040F\v\x15\x03\x15\x03\x15\x07\x15\u0413" +
    "\n\x15\f\x15\x0E\x15\u0416\v\x15\x03\x15\x03\x15\x07\x15\u041A\n\x15\f" +
    "\x15\x0E\x15\u041D\v\x15\x03\x15\x05\x15\u0420\n\x15\x03\x16\x03\x16\x03" +
    "\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x05\x16\u042C" +
    "\n\x16\x03\x17\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x18" +
    "\x03\x18\x07\x18\u0437\n\x18\f\x18\x0E\x18\u043A\v\x18\x03\x18\x03\x18" +
    "\x03\x19\x03\x19\x07\x19\u0440\n\x19\f\x19\x0E\x19\u0443\v\x19\x03\x19" +
    "\x03\x19\x03\x1A\x03\x1A\x03\x1A\x05\x1A\u044A\n\x1A\x03\x1A\x03\x1A\x03" +
    "\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03" +
    "\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03" +
    "\x1B\x03\x1B\x05\x1B\u0462\n\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D" +
    "\x03\x1E\x03\x1E\x03\x1E\x07\x1E\u046C\n\x1E\f\x1E\x0E\x1E\u046F\v\x1E" +
    "\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x05\x1F\u0475\n\x1F\x03\x1F\x03\x1F\x03" +
    " \x03 \x07 \u047B\n \f \x0E \u047E\v \x03!\x03!\x03!\x03!\x05!\u0484\n" +
    "!\x03!\x03!\x03!\x05!\u0489\n!\x03\"\x03\"\x05\"\u048D\n\"\x03\"\x05\"" +
    "\u0490\n\"\x03\"\x03\"\x03\"\x03\"\x03\"\x05\"\u0497\n\"\x03#\x03#\x05" +
    "#\u049B\n#\x03#\x05#\u049E\n#\x03#\x03#\x03#\x03#\x03#\x05#\u04A5\n#\x03" +
    "$\x03$\x05$\u04A9\n$\x03$\x03$\x03$\x03%\x03%\x03&\x03&\x05&\u04B2\n&" +
    "\x03&\x05&\u04B5\n&\x03&\x05&\u04B8\n&\x03&\x03&\x03\'\x03\'\x05\'\u04BE" +
    "\n\'\x03\'\x05\'\u04C1\n\'\x03\'\x05\'\u04C4\n\'\x03\'\x03\'\x03(\x03" +
    "(\x05(\u04CA\n(\x03(\x05(\u04CD\n(\x03(\x05(\u04D0\n(\x03(\x03(\x03(\x03" +
    "(\x05(\u04D6\n(\x03(\x05(\u04D9\n(\x03(\x03(\x03(\x03(\x03(\x05(\u04E0" +
    "\n(\x03)\x03)\x03)\x03)\x03*\x03*\x03*\x03*\x03+\x03+\x05+\u04EC\n+\x03" +
    "+\x05+\u04EF\n+\x03+\x03+\x03+\x03+\x03+\x05+\u04F6\n+\x03+\x05+\u04F9" +
    "\n+\x03+\x05+\u04FC\n+\x03+\x03+\x03+\x03+\x03+\x05+\u0503\n+\x03+\x05" +
    "+\u0506\n+\x03+\x03+\x05+\u050A\n+\x03+\x03+\x03+\x03+\x03+\x05+\u0511" +
    "\n+\x03+\x05+\u0514\n+\x03+\x05+\u0517\n+\x03+\x03+\x05+\u051B\n+\x03" +
    "+\x03+\x03+\x03+\x03+\x05+\u0522\n+\x03+\x05+\u0525\n+\x03+\x05+\u0528" +
    "\n+\x03+\x03+\x03+\x03+\x03+\x05+\u052F\n+\x03+\x05+\u0532\n+\x03+\x05" +
    "+\u0535\n+\x03+\x03+\x03+\x03+\x03+\x05+\u053C\n+\x03+\x05+\u053F\n+\x03" +
    "+\x05+\u0542\n+\x03+\x03+\x05+\u0546\n+\x03+\x03+\x03+\x03+\x03+\x05+" +
    "\u054D\n+\x03+\x05+\u0550\n+\x03+\x05+\u0553\n+\x03+\x03+\x05+\u0557\n" +
    "+\x03+\x03+\x03+\x05+\u055C\n+\x03,\x03,\x03,\x03,\x03-\x03-\x03-\x03" +
    "-\x03.\x03.\x05.\u0568\n.\x03.\x05.\u056B\n.\x03.\x03.\x03.\x03/\x03/" +
    "\x03/\x03/\x030\x030\x031\x031\x032\x032\x072\u057A\n2\f2\x0E2\u057D\v" +
    "2\x032\x032\x032\x032\x052\u0583\n2\x033\x033\x073\u0587\n3\f3\x0E3\u058A" +
    "\v3\x033\x033\x033\x033\x053\u0590\n3\x034\x034\x034\x034\x034\x034\x03" +
    "4\x034\x034\x034\x034\x034\x034\x034\x034\x034\x034\x034\x034\x034\x03" +
    "4\x034\x034\x034\x034\x034\x034\x034\x034\x034\x034\x034\x034\x034\x03" +
    "4\x034\x054\u05B6\n4\x035\x035\x036\x036\x037\x037\x037\x037\x037\x03" +
    "7\x037\x037\x037\x057\u05C5\n7\x038\x038\x038\x038\x038\x038\x038\x03" +
    "8\x038\x058\u05D0\n8\x058\u05D2\n8\x038\x038\x058\u05D6\n8\x039\x039\x03" +
    "9\x039\x039\x039\x039\x059\u05DF\n9\x039\x039\x059\u05E3\n9\x03:\x03:" +
    "\x03:\x05:\u05E8\n:\x03;\x03;\x03;\x07;\u05ED\n;\f;\x0E;\u05F0\v;\x03" +
    "<\x03<\x03<\x07<\u05F5\n<\f<\x0E<\u05F8\v<\x03=\x03=\x07=\u05FC\n=\f=" +
    "\x0E=\u05FF\v=\x03>\x03>\x03>\x07>\u0604\n>\f>\x0E>\u0607\v>\x03?\x03" +
    "?\x03?\x07?\u060C\n?\f?\x0E?\u060F\v?\x03@\x03@\x07@\u0613\n@\f@\x0E@" +
    "\u0616\v@\x03A\x03A\x03A\x07A\u061B\nA\fA\x0EA\u061E\vA\x03B\x03B\x03" +
    "B\x07B\u0623\nB\fB\x0EB\u0626\vB\x03C\x03C\x03C\x07C\u062B\nC\fC\x0EC" +
    "\u062E\vC\x03D\x03D\x03D\x07D\u0633\nD\fD\x0ED\u0636\vD\x03E\x03E\x03" +
    "E\x07E\u063B\nE\fE\x0EE\u063E\vE\x03F\x03F\x03F\x07F\u0643\nF\fF\x0EF" +
    "\u0646\vF\x03G\x03G\x03G\x05G\u064B\nG\x03H\x03H\x03H\x03H\x03I\x03I\x03" +
    "I\x03I\x03J\x03J\x03J\x03J\x03K\x03K\x03K\x03K\x03K\x05K\u065E\nK\x03" +
    "L\x03L\x03L\x03L\x03L\x03L\x05L\u0666\nL\x03L\x03L\x03L\x03L\x03L\x03" +
    "L\x03L\x03L\x03L\x03L\x03L\x05L\u0673\nL\x03L\x03L\x05L\u0677\nL\x03M" +
    "\x03M\x03N\x03N\x03O\x03O\x03P\x03P\x03P\x03P\x03P\x03P\x03Q\x03Q\x03" +
    "Q\x03Q\x03Q\x03Q\x03R\x03R\x05R\u068D\nR\x03R\x05R\u0690\nR\x03R\x03R" +
    "\x03R\x06R\u0695\nR\rR\x0ER\u0696\x03R\x03R\x03R\x03R\x03R\x05R\u069E" +
    "\nR\x03R\x05R\u06A1\nR\x03R\x03R\x03R\x03R\x03R\x03R\x07R\u06A9\nR\fR" +
    "\x0ER\u06AC\vR\x03R\x03R\x03R\x05R\u06B1\nR\x03S\x03S\x07S\u06B5\nS\f" +
    "S\x0ES\u06B8\vS\x03S\x03S\x03S\x05S\u06BD\nS\x03T\x03T\x03T\x07T\u06C2" +
    "\nT\fT\x0ET\u06C5\vT\x03U\x07U\u06C8\nU\fU\x0EU\u06CB\vU\x03U\x03U\x03" +
    "V\x03V\x03V\x05V\u06D2\nV\x03V\x03V\x03V\x03V\x05V\u06D8\nV\x03W\x03W" +
    "\x05W\u06DC\nW\x03W\x03W\x03W\x07W\u06E1\nW\fW\x0EW\u06E4\vW\x03W\x03" +
    "W\x03W\x03W\x03W\x05W\u06EB\nW\x03W\x03W\x03W\x05W\u06F0\nW\x03W\x03W" +
    "\x03W\x07W\u06F5\nW\fW\x0EW\u06F8\vW\x03W\x03W\x03W\x05W\u06FD\nW\x03" +
    "X\x03X\x07X\u0701\nX\fX\x0EX\u0704\vX\x03X\x03X\x03X\x03X\x07X\u070A\n" +
    "X\fX\x0EX\u070D\vX\x03X\x03X\x03X\x03X\x07X\u0713\nX\fX\x0EX\u0716\vX" +
    "\x03X\x03X\x03X\x05X\u071B\nX\x03Y\x03Y\x03Y\x07Y\u0720\nY\fY\x0EY\u0723" +
    "\vY\x03Z\x07Z\u0726\nZ\fZ\x0EZ\u0729\vZ\x03Z\x03Z\x07Z\u072D\nZ\fZ\x0E" +
    "Z\u0730\vZ\x03Z\x03Z\x07Z\u0734\nZ\fZ\x0EZ\u0737\vZ\x03Z\x05Z\u073A\n" +
    "Z\x03[\x03[\x05[\u073E\n[\x03[\x05[\u0741\n[\x03[\x05[\u0744\n[\x03[\x03" +
    "[\x03[\x03[\x03[\x05[\u074B\n[\x03\\\x03\\\x05\\\u074F\n\\\x03\\\x05\\" +
    "\u0752\n\\\x03\\\x05\\\u0755\n\\\x03\\\x03\\\x03\\\x03\\\x03\\\x05\\\u075C" +
    "\n\\\x03]\x03]\x05]\u0760\n]\x03]\x05]\u0763\n]\x03]\x05]\u0766\n]\x03" +
    "]\x03]\x03]\x03]\x03]\x05]\u076D\n]\x03^\x03^\x03_\x07_\u0772\n_\f_\x0E" +
    "_\u0775\v_\x03_\x03_\x05_\u0779\n_\x03_\x05_\u077C\n_\x03_\x03_\x03_\x03" +
    "_\x07_\u0782\n_\f_\x0E_\u0785\v_\x03_\x03_\x03_\x03_\x03_\x07_\u078C\n" +
    "_\f_\x0E_\u078F\v_\x03_\x03_\x03_\x03_\x03_\x07_\u0796\n_\f_\x0E_\u0799" +
    "\v_\x03_\x03_\x03_\x03_\x03_\x07_\u07A0\n_\f_\x0E_\u07A3\v_\x03_\x03_" +
    "\x03_\x03_\x03_\x07_\u07AA\n_\f_\x0E_\u07AD\v_\x03_\x03_\x07_\u07B1\n" +
    "_\f_\x0E_\u07B4\v_\x03_\x03_\x03_\x03_\x07_\u07BA\n_\f_\x0E_\u07BD\v_" +
    "\x03_\x03_\x03_\x05_\u07C2\n_\x03`\x03`\x03`\x07`\u07C7\n`\f`\x0E`\u07CA" +
    "\v`\x03a\x03a\x03a\x07a\u07CF\na\fa\x0Ea\u07D2\va\x03b\x03b\x07b\u07D6" +
    "\nb\fb\x0Eb\u07D9\vb\x03c\x03c\x07c\u07DD\nc\fc\x0Ec\u07E0\vc\x03d\x03" +
    "d\x05d\u07E4\nd\x03d\x03d\x03d\x07d\u07E9\nd\fd\x0Ed\u07EC\vd\x03d\x03" +
    "d\x03d\x03d\x05d\u07F2\nd\x03d\x05d\u07F5\nd\x03d\x03d\x03d\x07d\u07FA" +
    "\nd\fd\x0Ed\u07FD\vd\x03d\x03d\x03d\x03d\x05d\u0803\nd\x03d\x03d\x03d" +
    "\x07d\u0808\nd\fd\x0Ed\u080B\vd\x03d\x03d\x03d\x03d\x05d\u0811\nd\x03" +
    "d\x05d\u0814\nd\x03d\x03d\x03d\x07d\u0819\nd\fd\x0Ed\u081C\vd\x03d\x03" +
    "d\x03d\x03d\x05d\u0822\nd\x03d\x05d\u0825\nd\x03d\x03d\x03d\x07d\u082A" +
    "\nd\fd\x0Ed\u082D\vd\x03d\x03d\x03d\x03d\x05d\u0833\nd\x03d\x03d\x03d" +
    "\x07d\u0838\nd\fd\x0Ed\u083B\vd\x03d\x03d\x03d\x03d\x03d\x03d\x07d\u0843" +
    "\nd\fd\x0Ed\u0846\vd\x03d\x03d\x03d\x03d\x05d\u084C\nd\x03d\x03d\x03d" +
    "\x07d\u0851\nd\fd\x0Ed\u0854\vd\x03d\x03d\x03d\x03d\x05d\u085A\nd\x03" +
    "d\x03d\x03d\x07d\u085F\nd\fd\x0Ed\u0862\vd\x03d\x03d\x05d\u0866\nd\x03" +
    "e\x05e\u0869\ne\x03e\x03e\x03e\x03e\x03e\x03e\x03e\x03e\x03e\x03e\x03" +
    "f\x05f\u0876\nf\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03g\x05g\u0881" +
    "\ng\x03g\x03g\x03g\x03g\x03g\x03g\x03g\x03g\x03h\x05h\u088C\nh\x03h\x03" +
    "h\x03h\x03h\x03h\x03h\x07h\u0894\nh\fh\x0Eh\u0897\vh\x03h\x03h\x03i\x05" +
    "i\u089C\ni\x03i\x03i\x03i\x03i\x07i\u08A2\ni\fi\x0Ei\u08A5\vi\x03i\x03" +
    "i\x03i\x03i\x03j\x05j\u08AC\nj\x03j\x03j\x03j\x03j\x03j\x03j\x03k\x05" +
    "k\u08B5\nk\x03k\x03k\x03k\x03k\x03k\x03k\x03k\x03k\x03l\x05l\u08C0\nl" +
    "\x03l\x03l\x03l\x03l\x03m\x03m\x05m\u08C8\nm\x03n\x03n\x03n\x03n\x03n" +
    "\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x05n\u08DA\nn" +
    "\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03" +
    "o\x03o\x03o\x05o\u08EC\no\x03p\x03p\x03q\x03q\x03r\x03r\x03s\x03s\x03" +
    "t\x03t\x03u\x03u\x03v\x03v\x03w\x03w\x03x\x03x\x03y\x03y\x03z\x03z\x03" +
    "{\x03{\x03|\x03|\x03}\x03}\x05}\u090A\n}\x03}\x03}\x03}\x07}\u090F\n}" +
    "\f}\x0E}\u0912\v}\x03}\x03}\x03~\x03~\x03~\x03~\x03~\x03\x7F\x03\x7F\x03" +
    "\x7F\x07\x7F\u091E\n\x7F\f\x7F\x0E\x7F\u0921\v\x7F\x03\x7F\x03\x7F\x03" +
    "\x7F\x07\x7F\u0926\n\x7F\f\x7F\x0E";
  private static readonly _serializedATNSegment1: string =
    "\x7F\u0929\v\x7F\x05\x7F\u092B\n\x7F\x03\x80\x03\x80\x03\x81\x03\x81\x03" +
    "\x81\x03\x81\x05\x81\u0933\n\x81\x03\x81\x03\x81\x03\x82\x03\x82\x03\x82" +
    "\x03\x82\x03\x82\x03\x83\x03\x83\x05\x83\u093E\n\x83\x03\x84\x03\x84\x03" +
    "\x84\x07\x84\u0943\n\x84\f\x84\x0E\x84\u0946\v\x84\x03\x84\x03\x84\x03" +
    "\x84\x07\x84\u094B\n\x84\f\x84\x0E\x84\u094E\v\x84\x05\x84\u0950\n\x84" +
    "\x03\x85\x07\x85\u0953\n\x85\f\x85\x0E\x85\u0956\v\x85\x03\x85\x05\x85" +
    "\u0959\n\x85\x03\x86\x07\x86\u095C\n\x86\f\x86\x0E\x86\u095F\v\x86\x03" +
    "\x86\x03\x86\x03\x86\x03\x86\x05\x86\u0965\n\x86\x03\x86\x03\x86\x03\x87" +
    "\x03\x87\x07\x87\u096B\n\x87\f\x87\x0E\x87\u096E\v\x87\x03\x87\x03\x87" +
    "\x03\x88\x03\x88\x03\x88\x03\x88\x03\x89\x03\x89\x03\x89\x07\x89\u0979" +
    "\n\x89\f\x89\x0E\x89\u097C\v\x89\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A" +
    "\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8B\x03\x8B\x03\x8B\x03\x8B" +
    "\x03\x8C\x03\x8C\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x03\x8E\x03\x8E\x05\x8E" +
    "\u0994\n\x8E\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x05" +
    "\x8F\u099D\n\x8F\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x06\x90\u09A4" +
    "\n\x90\r\x90\x0E\x90\u09A5\x03\x90\x03\x90\x03\x91\x03\x91\x03\x91\x07" +
    "\x91\u09AD\n\x91\f\x91\x0E\x91\u09B0\v\x91\x03\x91\x03\x91\x03\x91\x03" +
    "\x91\x03\x91\x05\x91\u09B7\n\x91\x03\x91\x05\x91\u09BA\n\x91\x03\x92\x03" +
    "\x92\x03\x92\x05\x92\u09BF\n\x92\x03\x92\x07\x92\u09C2\n\x92\f\x92\x0E" +
    "\x92\u09C5\v\x92\x03\x92\x05\x92\u09C8\n\x92\x03\x93\x03\x93\x03\x93\x03" +
    "\x94\x03\x94\x05\x94\u09CF\n\x94\x03\x95\x07\x95\u09D2\n\x95\f\x95\x0E" +
    "\x95\u09D5\v\x95\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95" +
    "\x06\x95\u09DE\n\x95\r\x95\x0E\x95\u09DF\x03\x95\x03\x95\x03\x95\x03\x95" +
    "\x07\x95\u09E6\n\x95\f\x95\x0E\x95\u09E9\v\x95\x03\x95\x03\x95\x03\x95" +
    "\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95\x05\x95\u09F4\n\x95\x03" +
    "\x96\x03\x96\x03\x96\x03\x96\x03\x96\x07\x96\u09FB\n\x96\f\x96\x0E\x96" +
    "\u09FE\v\x96\x03\x97\x03\x97\x03\x97\x03\x97\x03\x97\x07\x97\u0A05\n\x97" +
    "\f\x97\x0E\x97\u0A08\v\x97\x03\x98\x03\x98\x03\x98\x03\x98\x03\x98\x03" +
    "\x98\x03\x98\x03\x98\x03\x98\x05\x98\u0A13\n\x98\x03\x99\x07\x99\u0A16" +
    "\n\x99\f\x99\x0E\x99\u0A19\v\x99\x03\x99\x03\x99\x03\x99\x07\x99\u0A1E" +
    "\n\x99\f\x99\x0E\x99\u0A21\v\x99\x03\x99\x03\x99\x03\x99\x03\x99\x03\x99" +
    "\x05\x99\u0A28\n\x99\x05\x99\u0A2A\n\x99\x03\x9A\x07\x9A\u0A2D\n\x9A\f" +
    "\x9A\x0E\x9A\u0A30\v\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9B\x07\x9B\u0A36" +
    "\n\x9B\f\x9B\x0E\x9B\u0A39\v\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9C\x03\x9C" +
    "\x05\x9C\u0A40\n\x9C\x03\x9D\x03\x9D\x06\x9D\u0A44\n\x9D\r\x9D\x0E\x9D" +
    "\u0A45\x03\x9D\x03\x9D\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9F" +
    "\x05\x9F\u0A50\n\x9F\x03\x9F\x03\x9F\x06\x9F\u0A54\n\x9F\r\x9F\x0E\x9F" +
    "\u0A55\x03\x9F\x03\x9F\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x03\xA0" +
    "\x03\xA1\x03\xA1\x05\xA1\u0A62\n\xA1\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03" +
    "\xA2\x03\xA2\x03\xA2\x03\xA3\x03\xA3\x05\xA3\u0A6D\n\xA3\x03\xA4\x06\xA4" +
    "\u0A70\n\xA4\r\xA4\x0E\xA4\u0A71\x03\xA5\x07\xA5\u0A75\n\xA5\f\xA5\x0E" +
    "\xA5\u0A78\v\xA5\x03\xA5\x03\xA5\x07\xA5\u0A7C\n\xA5\f\xA5\x0E\xA5\u0A7F" +
    "\v\xA5\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x05\xA6\u0A87\n" +
    "\xA6\x03\xA7\x03\xA7\x03\xA8\x03\xA8\x05\xA8\u0A8D\n\xA8\x03\xA9\x03\xA9" +
    "\x03\xAA\x03\xAA\x03\xAB\x03\xAB\x03\xAC\x03\xAC\x05\xAC\u0A97\n\xAC\x03" +
    "\xAC\x05\xAC\u0A9A\n\xAC\x03\xAC\x03\xAC\x03\xAC\x07\xAC\u0A9F\n\xAC\f" +
    "\xAC\x0E\xAC\u0AA2\v\xAC\x03\xAC\x03\xAC\x03\xAD\x05\xAD\u0AA7\n\xAD\x03" +
    "\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x07\xAD\u0AAF\n\xAD\f\xAD" +
    "\x0E\xAD\u0AB2\v\xAD\x03\xAD\x03\xAD\x03\xAE\x03\xAE\x05\xAE\u0AB8\n\xAE" +
    "\x03\xAF\x03\xAF\x05\xAF\u0ABC\n\xAF\x03\xAF\x05\xAF\u0ABF\n\xAF\x03\xAF" +
    "\x03\xAF\x03\xAF\x03\xB0\x03\xB0\x03\xB0\x07\xB0\u0AC7\n\xB0\f\xB0\x0E" +
    "\xB0\u0ACA\v\xB0\x03\xB1\x03\xB1\x03\xB1\x03\xB1\x03\xB2\x03\xB2\x03\xB2" +
    "\x03\xB3\x03\xB3\x03\xB3\x03\xB4\x03\xB4\x03\xB4\x05\xB4\u0AD9\n\xB4\x03" +
    "\xB4\x03\xB4\x03\xB5\x03\xB5\x03\xB5\x05\xB5\u0AE0\n\xB5\x03\xB5\x03\xB5" +
    "\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x05\xB6" +
    "\u0AEC\n\xB6\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x03\xB8\x03\xB8\x03\xB8\x07" +
    "\xB8\u0AF5\n\xB8\f\xB8\x0E\xB8\u0AF8\v\xB8\x05\xB8\u0AFA\n\xB8\x03\xB8" +
    "\x07\xB8\u0AFD\n\xB8\f\xB8\x0E\xB8\u0B00\v\xB8\x03\xB8\x03\xB8\x03\xB9" +
    "\x03\xB9\x03\xB9\x03\xBA\x03\xBA\x03\xBA\x07\xBA\u0B0A\n\xBA\f\xBA\x0E" +
    "\xBA\u0B0D\v\xBA\x05\xBA\u0B0F\n\xBA\x03\xBA\x07\xBA\u0B12\n\xBA\f\xBA" +
    "\x0E\xBA\u0B15\v\xBA\x03\xBA\x03\xBA\x03\xBB\x07\xBB\u0B1A\n\xBB\f\xBB" +
    "\x0E\xBB\u0B1D\v\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x07\xBB\u0B23\n\xBB" +
    "\f\xBB\x0E\xBB\u0B26\v\xBB\x03\xBB\x03\xBB\x07\xBB\u0B2A\n\xBB\f\xBB\x0E" +
    "\xBB\u0B2D\v\xBB\x03\xBB\x03\xBB\x07\xBB\u0B31\n\xBB\f\xBB\x0E\xBB\u0B34" +
    "\v\xBB\x03\xBB\x03\xBB\x07\xBB\u0B38\n\xBB\f\xBB\x0E\xBB\u0B3B\v\xBB\x03" +
    "\xBB\x03\xBB\x07\xBB\u0B3F\n\xBB\f\xBB\x0E\xBB\u0B42\v\xBB\x03\xBB\x03" +
    "\xBB\x07\xBB\u0B46\n\xBB\f\xBB\x0E\xBB\u0B49\v\xBB\x03\xBB\x03\xBB\x03" +
    "\xBB\x03\xBB\x07\xBB\u0B4F\n\xBB\f\xBB\x0E\xBB\u0B52\v\xBB\x03\xBB\x03" +
    "\xBB\x07\xBB\u0B56\n\xBB\f\xBB\x0E\xBB\u0B59\v\xBB\x03\xBB\x03\xBB\x03" +
    "\xBB\x03\xBB\x07\xBB\u0B5F\n\xBB\f\xBB\x0E\xBB\u0B62\v\xBB\x03\xBB\x03" +
    "\xBB\x07\xBB\u0B66\n\xBB\f\xBB\x0E\xBB\u0B69\v\xBB\x03\xBB\x03\xBB\x07" +
    "\xBB\u0B6D\n\xBB\f\xBB\x0E\xBB\u0B70\v\xBB\x03\xBB\x03\xBB\x07\xBB\u0B74" +
    "\n\xBB\f\xBB\x0E\xBB\u0B77\v\xBB\x03\xBB\x03\xBB\x07\xBB\u0B7B\n\xBB\f" +
    "\xBB\x0E\xBB\u0B7E\v\xBB\x03\xBB\x05\xBB\u0B81\n\xBB\x03\xBC\x03\xBC\x07" +
    "\xBC\u0B85\n\xBC\f\xBC\x0E\xBC\u0B88\v\xBC\x03\xBC\x05\xBC\u0B8B\n\xBC" +
    "\x03\xBD\x03\xBD\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE" +
    "\x05\xBE\u0B96\n\xBE\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03" +
    "\xBF\x03\xBF\x05\xBF\u0BA0\n\xBF\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC1" +
    "\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1" +
    "\x03\xC1\x03\xC1\x03\xC1\x05\xC1\u0BB3\n\xC1\x03\xC2\x03\xC2\x03\xC2\x05" +
    "\xC2\u0BB8\n\xC2\x03\xC2\x03\xC2\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3" +
    "\x03\xC3\x05\xC3\u0BC2\n\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03" +
    "\xC3\x07\xC3\u0BCA\n\xC3\f\xC3\x0E\xC3\u0BCD\v\xC3\x03\xC4\x03\xC4\x05" +
    "\xC4\u0BD1\n\xC4\x03\xC5\x03\xC5\x03\xC5\x03\xC6\x03\xC6\x03\xC6\x03\xC6" +
    "\x03\xC6\x03\xC6\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7" +
    "\x05\xC7\u0BE3\n\xC7\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x06\xC8\u0BEA" +
    "\n\xC8\r\xC8\x0E\xC8\u0BEB\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03" +
    "\xC8\x03\xC8\x06\xC8\u0BF5\n\xC8\r\xC8\x0E\xC8\u0BF6\x03\xC8\x03\xC8\x03" +
    "\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x06\xC8\u0C00\n\xC8\r\xC8\x0E\xC8" +
    "\u0C01\x03\xC8\x03\xC8\x05\xC8\u0C06\n\xC8\x03\xC9\x03\xC9\x03\xC9\x07" +
    "\xC9\u0C0B\n\xC9\f\xC9\x0E\xC9\u0C0E\v\xC9\x03\xC9\x03\xC9\x03\xC9\x03" +
    "\xC9\x03\xC9\x05\xC9\u0C15\n\xC9\x03\xC9\x05\xC9\u0C18\n\xC9\x03\xCA\x03" +
    "\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03" +
    "\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03" +
    "\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x05\xCA\u0C32\n\xCA\x03\xCB\x03\xCB" +
    "\x05\xCB\u0C36\n\xCB\x03\xCB\x03\xCB\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x07" +
    "\xCC\u0C3E\n\xCC\f\xCC\x0E\xCC\u0C41\v\xCC\x03\xCC\x03\xCC\x03\xCD\x05" +
    "\xCD\u0C46\n\xCD\x03\xCE\x03\xCE\x05\xCE\u0C4A\n\xCE\x03\xCE\x03\xCE\x03" +
    "\xCF\x03\xCF\x03\xCF\x03\xCF\x07\xCF\u0C52\n\xCF\f\xCF\x0E\xCF\u0C55\v" +
    "\xCF\x03\xCF\x03\xCF\x03\xD0\x03\xD0\x07\xD0\u0C5B\n\xD0\f\xD0\x0E\xD0" +
    "\u0C5E\v\xD0\x03\xD0\x03\xD0\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x05" +
    "\xD1\u0C67\n\xD1\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x03\xD2" +
    "\x03\xD2\x05\xD2\u0C71\n\xD2\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x03" +
    "\xD3\x03\xD3\x03\xD3\x05\xD3\u0C7B\n\xD3\x03\xD4\x03\xD4\x03\xD4\x03\xD4" +
    "\x03\xD4\x03\xD4\x03\xD4\x03\xD4\x03\xD4\x05\xD4\u0C86\n\xD4\x03\xD5\x03" +
    "\xD5\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x05\xD5\u0C90\n\xD5" +
    "\x03\xD6\x03\xD6\x03\xD6\x05\xD6\u0C95\n\xD6\x03\xD6\x03\xD6\x03\xD6\x03" +
    "\xD6\x03\xD7\x03\xD7\x03\xD7\x05\xD7\u0C9E\n\xD7\x03\xD7\x03\xD7\x03\xD7" +
    "\x03\xD7\x03\xD8\x03\xD8\x03\xD8\x07\xD8\u0CA7\n\xD8\f\xD8\x0E\xD8\u0CAA" +
    "\v\xD8\x03\xD9\x03\xD9\x03\xD9\x07\xD9\u0CAF\n\xD9\f\xD9\x0E\xD9\u0CB2" +
    "\v\xD9\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x05\xDA\u0CB9\n\xDA\x03" +
    "\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x05\xDB\u0CC0\n\xDB\x03\xDC\x03\xDC" +
    "\x03\xDD\x03\xDD\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x05\xDE\u0CCB" +
    "\n\xDE\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x05\xDF\u0CD3\n" +
    "\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x03" +
    "\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x03" +
    "\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x05\xDF\u0CED\n\xDF" +
    "\x05\xDF\u0CEF\n\xDF\x03\xE0\x03\xE0\x03\xE1\x03\xE1\x03\xE2\x03\xE2\x03" +
    "\xE3\x03\xE3\x03\xE4\x03\xE4\x03\xE5\x03\xE5\x03\xE6\x03\xE6\x03\xE7\x03" +
    "\xE7\x03\xE8\x03\xE8\x03\xE9\x03\xE9\x03\xEA\x03\xEA\x03\xEB\x03\xEB\x03" +
    "\xEC\x03\xEC\x03\xED\x03\xED\x03\xEE\x03\xEE\x03\xEF\x03\xEF\x03\xF0\x03" +
    "\xF0\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x05" +
    "\xF1\u0D1B\n\xF1\x03\xF2\x03\xF2\x05\xF2\u0D1F\n\xF2\x03\xF2\x03\xF2\x03" +
    "\xF2\x03\xF2\x03\xF2\x05\xF2\u0D26\n\xF2\x03\xF2\x03\xF2\x03\xF2\x03\xF2" +
    "\x03\xF2\x03\xF3\x03\xF3\x05\xF3\u0D2F\n\xF3\x03\xF3\x03\xF3\x03\xF3\x03" +
    "\xF3\x03\xF3\x05\xF3\u0D36\n\xF3\x03\xF3\x03\xF3\x03\xF3\x03\xF3\x03\xF3" +
    "\x03\xF4\x03\xF4\x03\xF5\x03\xF5\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6" +
    "\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6" +
    "\x05\xF6\u0D4F\n\xF6\x03\xF7\x03\xF7\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x03" +
    "\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x05\xF8\u0D5F" +
    "\n\xF8\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9" +
    "\x05\xF9\u0D69\n\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xFA\x03\xFA\x05\xFA\u0D70" +
    "\n\xFA\x03\xFB\x03\xFB\x03\xFB\x03\xFB\x03\xFB\x03\xFB\x03\xFB\x03\xFB" +
    "\x05\xFB\u0D7A\n\xFB\x03\xFB\x03\xFB\x03\xFB\x03\xFC\x03\xFC\x03\xFC\x03" +
    "\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x05\xFC\u0D89\n\xFC" +
    "\x03\xFC\x03\xFC\x03\xFC\x03\xFD\x03\xFD\x05\xFD\u0D90\n\xFD\x03\xFD\x05" +
    "\xFD\u0D93\n\xFD\x03\xFE\x03\xFE\x05\xFE\u0D97\n\xFE\x03\xFE\x05\xFE\u0D9A" +
    "\n\xFE\x03\xFF\x03\xFF\x05\xFF\u0D9E\n\xFF\x03\xFF\x05\xFF\u0DA1\n\xFF" +
    "\x03\u0100\x03\u0100\x05\u0100\u0DA5\n\u0100\x03\u0100\x05\u0100\u0DA8" +
    "\n\u0100\x03\u0101\x03\u0101\x05\u0101\u0DAC\n\u0101\x03\u0102\x03\u0102" +
    "\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x05\u0102" +
    "\u0DB6\n\u0102\x03\u0102\x03\u0102\x03\u0102\x03\u0103\x03\u0103\x03\u0103" +
    "\x03\u0103\x03\u0103\x03\u0103\x03\u0103\x03\u0103\x05\u0103\u0DC3\n\u0103" +
    "\x03\u0103\x03\u0103\x03\u0103\x03\u0104\x03\u0104\x03\u0104\x03\u0104" +
    "\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x05\u0104" +
    "\u0DD2\n\u0104\x03\u0104\x03\u0104\x03\u0104\x03\u0105\x03\u0105\x03\u0105" +
    "\x03\u0105\x03\u0105\x03\u0105\x03\u0105\x03\u0105\x05\u0105\u0DDF\n\u0105" +
    "\x03\u0105\x03\u0105\x03\u0105\x03\u0106\x03\u0106\x03\u0106\x03\u0106" +
    "\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x05\u0106\u0DEC\n\u0106\x03\u0106" +
    "\x03\u0106\x03\u0106\x03\u0107\x03\u0107\x05\u0107\u0DF3\n\u0107\x03\u0107" +
    "\x05\u0107\u0DF6\n\u0107\x03\u0108\x03\u0108\x05\u0108\u0DFA\n\u0108\x03" +
    "\u0108\x05\u0108\u0DFD\n\u0108\x03\u0109\x03\u0109\x05\u0109\u0E01\n\u0109" +
    "\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x03\u010A" +
    "\x03\u010A\x03\u010A\x03\u010A\x05\u010A\u0E0D\n\u010A\x03\u010A\x03\u010A" +
    "\x03\u010A\x03\u010B\x03\u010B\x03\u010B\x03\u010B\x03\u010B\x03\u010B" +
    "\x05\u010B\u0E18\n\u010B\x03\u010B\x03\u010B\x03\u010B\x03\u010C\x03\u010C" +
    "\x03\u010C\x03\u010C\x03\u010C\x03\u010C\x05\u010C\u0E23\n\u010C\x03\u010C" +
    "\x03\u010C\x03\u010C\x03\u010D\x03\u010D\x03\u010D\x03\u010D\x05\u010D" +
    "\u0E2C\n\u010D\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E" +
    "\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x05\u010E\u0E38\n\u010E\x03\u010E" +
    "\x03\u010E\x03\u010E\x03\u010F\x03\u010F\x03\u0110\x03\u0110\x03\u0111" +
    "\x03\u0111\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x05\u0112" +
    "\u0E48\n\u0112\x03\u0113\x03\u0113\x03\u0113\x03\u0113\x03\u0113\x05\u0113" +
    "\u0E4F\n\u0113\x03\u0114\x03\u0114\x03\u0115\x03\u0115\x03\u0116\x03\u0116" +
    "\x03\u0117\x03\u0117\x03\u0118\x03\u0118\x03\u0119\x03\u0119\x03\u011A" +
    "\x03\u011A\x03\u011B\x03\u011B\x03\u011C\x03\u011C\x03\u011D\x05\u011D" +
    "\u0E64\n\u011D\x03\u011D\x03\u011D\x03\u011D\x05\u011D\u0E69\n\u011D\x03" +
    "\u011E\x03\u011E\x03\u011E\x03\u011E\x05\u011E\u0E6F\n\u011E\x03\u011F" +
    "\x03\u011F\x03\u011F\x05\u011F\u0E74\n\u011F\x03\u0120\x03\u0120\x05\u0120" +
    "\u0E78\n\u0120\x03\u0121\x03\u0121\x03\u0121\x03\u0121\x03\u0121\x07\u0121" +
    "\u0E7F\n\u0121\f\u0121\x0E\u0121\u0E82\v\u0121\x03\u0121\x03\u0121\x03" +
    "\u0122\x03\u0122\x03\u0123\x03\u0123\x03\u0123\x03\u0123\x03\u0123\x05" +
    "\u0123\u0E8D\n\u0123\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124" +
    "\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124" +
    "\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124" +
    "\x05\u0124\u0EA2\n\u0124\x03\u0125\x03\u0125\x05\u0125\u0EA6\n\u0125\x03" +
    "\u0126\x03\u0126\x03\u0126\x03\u0126\x07\u0126\u0EAC\n\u0126\f\u0126\x0E" +
    "\u0126\u0EAF\v\u0126\x03\u0126\x03\u0126\x03\u0127\x03\u0127\x03\u0127" +
    "\x03\u0127\x07\u0127\u0EB7\n\u0127\f\u0127\x0E\u0127\u0EBA\v\u0127\x03" +
    "\u0127\x03\u0127\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x03" +
    "\u0129\x03\u0129\x03\u0129\x03\u0129\x07\u0129\u0EC7\n\u0129\f\u0129\x0E" +
    "\u0129\u0ECA\v\u0129\x03\u0129\x03\u0129\x03\u012A\x03\u012A\x03\u012A" +
    "\x03\u012A\x03\u012A\x03\u012B\x03\u012B\x03\u012B\x03\u012B\x03\u012B" +
    "\x03\u012C\x03\u012C\x07\u012C\u0EDA\n\u012C\f\u012C\x0E\u012C\u0EDD\v" +
    "\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x07\u012C\u0EE3\n\u012C" +
    "\f\u012C\x0E\u012C\u0EE6\v\u012C\x03\u012C\x03\u012C\x03\u012D\x03\u012D" +
    "\x03\u012D\x03\u012D\x03\u012D\x07\u012D\u0EEF\n\u012D\f\u012D\x0E\u012D" +
    "\u0EF2\v\u012D\x03\u012D\x03\u012D\x03\u012E\x03\u012E\x07\u012E\u0EF8" +
    "\n\u012E\f\u012E\x0E\u012E\u0EFB\v\u012E\x03\u012E\x03\u012E\x03\u012E" +
    "\x03\u012E\x07\u012E\u0F01\n\u012E\f\u012E\x0E\u012E\u0F04\v\u012E\x03" +
    "\u012E\x03\u012E\x03\u012F\x03\u012F\x05\u012F\u0F0A\n\u012F\x03\u0130" +
    "\x03\u0130\x03\u0130\x03\u0130\x07\u0130\u0F10\n\u0130\f\u0130\x0E\u0130" +
    "\u0F13\v\u0130\x03\u0130\x03\u0130\x03\u0131\x03\u0131\x03\u0132\x03\u0132" +
    "\x03\u0133\x03\u0133\x03\u0133\x03\u0133\x07\u0133\u0F1F\n\u0133\f\u0133" +
    "\x0E\u0133\u0F22\v\u0133\x03\u0133\x03\u0133\x05\u0133\u0F26\n\u0133\x03" +
    "\u0133\x03\u0133\x03\u0133\x07\u0133\u0F2B\n\u0133\f\u0133\x0E\u0133\u0F2E" +
    "\v\u0133\x03\u0133\x03\u0133\x03\u0133\x03\u0133\x07\u0133\u0F34\n\u0133" +
    "\f\u0133\x0E\u0133\u0F37\v\u0133\x03\u0133\x03\u0133\x03\u0133\x03\u0133" +
    "\x07\u0133\u0F3D\n\u0133\f\u0133\x0E\u0133\u0F40\v\u0133\x03\u0133\x03" +
    "\u0133\x03\u0133\x03\u0133\x07\u0133\u0F46\n\u0133\f\u0133\x0E\u0133\u0F49" +
    "\v\u0133\x03\u0133\x03\u0133\x03\u0133\x03\u0133\x07\u0133\u0F4F\n\u0133" +
    "\f\u0133\x0E\u0133\u0F52\v\u0133\x03\u0133\x03\u0133\x03\u0133\x03\u0133" +
    "\x07\u0133\u0F58\n\u0133\f\u0133\x0E\u0133\u0F5B\v\u0133\x03\u0133\x03" +
    "\u0133\x03\u0133\x03\u0133\x07\u0133\u0F61\n\u0133\f\u0133\x0E\u0133\u0F64" +
    "\v\u0133\x03\u0133\x03\u0133\x03\u0133\x03\u0133\x07\u0133\u0F6A\n\u0133" +
    "\f\u0133\x0E\u0133\u0F6D\v\u0133\x03\u0133\x03\u0133\x03\u0133\x03\u0133" +
    "\x07\u0133\u0F73\n\u0133\f\u0133\x0E\u0133\u0F76\v\u0133\x03\u0133\x03" +
    "\u0133\x03\u0133\x03\u0133\x07\u0133\u0F7C\n\u0133\f\u0133\x0E\u0133\u0F7F" +
    "\v\u0133\x03\u0133\x03\u0133\x03\u0133\x03\u0133\x07\u0133\u0F85\n\u0133" +
    "\f\u0133\x0E\u0133\u0F88\v\u0133\x03\u0133\x03\u0133\x03\u0133\x03\u0133" +
    "\x07\u0133\u0F8E\n\u0133\f\u0133\x0E\u0133\u0F91\v\u0133\x03\u0133\x03" +
    "\u0133\x03\u0133\x03\u0133\x07\u0133\u0F97\n\u0133\f\u0133\x0E\u0133\u0F9A" +
    "\v\u0133\x03\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134\x05" +
    "\u0134\u0FA2\n\u0134\x03\u0135\x03\u0135\x03\u0135\x03\u0135\x03\u0135" +
    "\x03\u0135\x03\u0135\x03\u0135\x03\u0135\x03\u0135\x03\u0135\x03\u0135" +
    "\x03\u0135\x05\u0135\u0FB1\n\u0135\x03\u0136\x03\u0136\x03\u0137\x03\u0137" +
    "\x03\u0137\x03\u0137\x07\u0137\u0FB9\n\u0137\f\u0137\x0E\u0137\u0FBC\v" +
    "\u0137\x03\u0137\x03\u0137\x05\u0137\u0FC0\n\u0137\x03\u0137\x03\u0137" +
    "\x03\u0137\x07\u0137\u0FC5\n\u0137\f\u0137\x0E\u0137\u0FC8\v\u0137\x03" +
    "\u0137\x03\u0137\x03\u0137\x03\u0137\x07\u0137\u0FCE\n\u0137\f\u0137\x0E" +
    "\u0137\u0FD1\v\u0137\x03\u0137\x03\u0137\x03\u0137\x03\u0137\x07\u0137" +
    "\u0FD7\n\u0137\f\u0137\x0E\u0137\u0FDA\v\u0137\x03\u0137\x03\u0137\x03" +
    "\u0137\x03\u0137\x07\u0137\u0FE0\n\u0137\f\u0137\x0E\u0137\u0FE3\v\u0137" +
    "\x03\u0137\x03\u0137\x03\u0137\x03\u0137\x07\u0137\u0FE9\n\u0137\f\u0137" +
    "\x0E\u0137\u0FEC\v\u0137\x03\u0137\x03\u0137\x03\u0137\x03\u0137\x07\u0137" +
    "\u0FF2\n\u0137\f\u0137\x0E\u0137\u0FF5\v\u0137\x03\u0137\x03\u0137\x03" +
    "\u0137\x03\u0137\x07\u0137\u0FFB\n\u0137\f\u0137\x0E\u0137\u0FFE\v\u0137" +
    "\x03\u0137\x03\u0137\x03\u0137\x03\u0137\x07\u0137\u1004\n\u0137\f\u0137" +
    "\x0E\u0137\u1007\v\u0137\x03\u0137\x03\u0137\x03\u0137\x03\u0137\x07\u0137" +
    "\u100D\n\u0137\f\u0137\x0E\u0137\u1010\v\u0137\x03\u0137\x03\u0137\x03" +
    "\u0137\x03\u0137\x07\u0137\u1016\n\u0137\f\u0137\x0E\u0137\u1019\v\u0137" +
    "\x03\u0137\x03\u0137\x03\u0137\x03\u0137\x07\u0137\u101F\n\u0137\f\u0137" +
    "\x0E\u0137\u1022\v\u0137\x03\u0137\x03\u0137\x03\u0137\x03\u0137\x07\u0137" +
    "\u1028\n\u0137\f\u0137\x0E\u0137\u102B\v\u0137\x03\u0137\x03\u0137\x03" +
    "\u0137\x03\u0137\x07\u0137\u1031\n\u0137\f\u0137\x0E\u0137\u1034\v\u0137" +
    "\x03\u0138\x03\u0138\x03\u0139\x03\u0139\x03\u0139\x03\u0139\x03\u0139" +
    "\x03\u0139\x05\u0139\u103E\n\u0139\x03\u013A\x03\u013A\x03\u013A\x03\u013A" +
    "\x07\u013A\u1044\n\u013A\f\u013A\x0E\u013A\u1047\v\u013A\x03\u013A\x03" +
    "\u013A\x05\u013A\u104B\n\u013A\x03\u013A\x03\u013A\x03\u013A\x07\u013A" +
    "\u1050\n\u013A\f\u013A\x0E\u013A\u1053\v\u013A\x03\u013A\x03\u013A\x03" +
    "\u013A\x03\u013A\x07\u013A\u1059\n\u013A\f\u013A\x0E\u013A\u105C\v\u013A" +
    "\x03\u013A\x03\u013A\x03\u013A\x03\u013A\x07\u013A\u1062\n\u013A\f\u013A" +
    "\x0E\u013A\u1065\v\u013A\x03\u013A\x03\u013A\x03\u013A\x03\u013A\x07\u013A" +
    "\u106B\n\u013A\f\u013A\x0E\u013A\u106E\v\u013A\x03\u013A\x03\u013A\x03" +
    "\u013A\x03\u013A\x07\u013A\u1074\n\u013A\f\u013A\x0E\u013A\u1077\v\u013A" +
    "\x03\u013A\x03\u013A\x03\u013A\x03\u013A\x07\u013A\u107D\n\u013A\f\u013A" +
    "\x0E\u013A\u1080\v\u013A\x03\u013A\x03\u013A\x03\u013A\x03\u013A\x07\u013A" +
    "\u1086\n\u013A\f\u013A\x0E\u013A\u1089\v\u013A\x03\u013A\x03\u013A\x03" +
    "\u013A\x03\u013A\x07\u013A\u108F\n\u013A\f\u013A\x0E\u013A\u1092\v\u013A" +
    "\x03\u013B\x03\u013B\x03\u013B\x03\u013B\x03\u013B\x03\u013B\x05\u013B" +
    "\u109A\n\u013B\x03\u013C\x03\u013C\x03\u013D\x03\u013D\x03\u013D\x03\u013D" +
    "\x03\u013D\x03\u013D\x03\u013D\x03\u013D\x03\u013D\x03\u013D\x03\u013D" +
    "\x03\u013D\x03\u013D\x05\u013D\u10AB\n\u013D\x03\u013E\x03\u013E\x03\u013F" +
    "\x03\u013F\x03\u013F\x03\u013F\x03\u013F\x03\u013F\x05\u013F\u10B5\n\u013F" +
    "\x03\u013F\x03\u013F\x03\u013F\x03\u013F\x03\u013F\x03\u013F\x03\u013F" +
    "\x03\u013F\x03\u013F\x05\u013F\u10C0\n\u013F\x03\u0140\x03\u0140\x03\u0140" +
    "\x03\u0140\x03\u0140\x03\u0140\x03\u0140\x03\u0140\x03\u0140\x03\u0140" +
    "\x05\u0140\u10CC\n\u0140\x03\u0141\x03\u0141\x03\u0141\x05\u0141\u10D1" +
    "\n\u0141\x03\u0141\x03\u0141\x03\u0141\x03\u0141\x03\u0141\x03\u0141\x03" +
    "\u0141\x03\u0141\x03\u0141\x05\u0141\u10DC\n\u0141\x03\u0142\x05\u0142" +
    "\u10DF\n\u0142\x03\u0142\x03\u0142\x03\u0142\x03\u0142\x03\u0143\x03\u0143" +
    "\x03\u0143\x03\u0143\x06\u0143\u10E9\n\u0143\r\u0143\x0E\u0143\u10EA\x03" +
    "\u0144\x03\u0144\x05\u0144\u10EF\n\u0144\x03\u0144\x03\u0144\x03\u0144" +
    "\x03\u0144\x07\u0144\u10F5\n\u0144\f\u0144\x0E\u0144\u10F8\v\u0144\x03" +
    "\u0144\x03\u0144\x05\u0144\u10FC\n\u0144\x03\u0145\x05\u0145\u10FF\n\u0145" +
    "\x03\u0145\x03\u0145\x03\u0145\x03\u0145\x03\u0146\x03\u0146\x03\u0146" +
    "\x03\u0146\x06\u0146\u1109\n\u0146\r\u0146\x0E\u0146\u110A\x03\u0147\x03" +
    "\u0147\x05\u0147\u110F\n\u0147\x03\u0147\x03\u0147\x03\u0147\x03\u0147" +
    "\x07\u0147\u1115\n\u0147\f\u0147\x0E\u0147\u1118\v\u0147\x03\u0147\x03" +
    "\u0147\x05\u0147\u111C\n\u0147\x03\u0148\x03\u0148\x03\u0149\x03\u0149" +
    "\x03\u014A\x03\u014A\x03\u014A\x03\u014A\x03\u014A\x05\u014A\u1127\n\u014A" +
    "\x03\u014B\x03\u014B\x05\u014B\u112B\n\u014B\x03\u014C\x03\u014C\x05\u014C" +
    "\u112F\n\u014C\x03\u014C\x03\u014C\x03\u014C\x05\u014C\u1134\n\u014C\x03" +
    "\u014D\x05\u014D\u1137\n\u014D\x03\u014D\x03\u014D\x03\u014D\x03\u014E" +
    "\x05\u014E\u113D\n\u014E\x03\u014E\x03\u014E\x03\u014E\x03\u014F\x05\u014F" +
    "\u1143\n\u014F\x03\u014F\x03\u014F\x03\u014F\x03\u0150\x03\u0150\x03\u0151" +
    "\x03\u0151\x03\u0152\x03\u0152\x03\u0153\x03\u0153\x03\u0154\x03\u0154" +
    "\x03\u0155\x03\u0155\x03\u0156\x03\u0156\x03\u0157\x03\u0157\x03\u0158" +
    "\x03\u0158\x03\u0159\x03\u0159\x03\u015A\x03\u015A\x03\u015B\x03\u015B" +
    "\x03\u015C\x03\u015C\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D" +
    "\x07\u015D\u1167\n\u015D\f\u015D\x0E\u015D\u116A\v\u015D\x03\u015D\x03" +
    "\u015D\x03\u015D\x03\u015E\x03\u015E\x03\u015E\x05\u015E\u1172\n\u015E" +
    "\x03\u015F\x03\u015F\x03\u0160\x03\u0160\x03\u0161\x03\u0161\x03\u0162" +
    "\x03\u0162\x03\u0163\x03\u0163\x03\u0164\x03\u0164\x03\u0165\x03\u0165" +
    "\x03\u0166\x03\u0166\x03\u0167\x03\u0167\x03\u0168\x03\u0168\x03\u0169" +
    "\x07\u0169\u1189\n\u0169\f\u0169\x0E\u0169\u118C\v\u0169\x03\u0169\x03" +
    "\u0169\x03\u016A\x03\u016A\x05\u016A\u1192\n\u016A\x03\u016A\x03\u016A" +
    "\x03\u016B\x03\u016B\x05\u016B\u1198\n\u016B\x03\u016C\x03\u016C\x03\u016D" +
    "\x03\u016D\x03\u016E\x03\u016E\x03\u016F\x03\u016F\x03\u0170\x03\u0170" +
    "\x03\u0171\x03\u0171\x03\u0172\x03\u0172\x03\u0173\x03\u0173\x03\u0174" +
    "\x03\u0174\x03\u0175\x03\u0175\x03\u0176\x03\u0176\x03\u0177\x03\u0177" +
    "\x03\u0178\x03\u0178\x03\u0179\x03\u0179\x03\u017A\x03\u017A\x03\u017B" +
    "\x03\u017B\x03\u017C\x03\u017C\x03\u017D\x03\u017D\x03\u017E\x03\u017E" +
    "\x03\u017F\x03\u017F\x03\u017F\x02\x02\x06\u0184\u0264\u026C\u0272\u0180" +
    "\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10\x02\x12\x02\x14" +
    "\x02\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02 \x02\"\x02$\x02&\x02(\x02" +
    "*\x02,\x02.\x020\x022\x024\x026\x028\x02:\x02<\x02>\x02@\x02B\x02D\x02" +
    "F\x02H\x02J\x02L\x02N\x02P\x02R\x02T\x02V\x02X\x02Z\x02\\\x02^\x02`\x02" +
    "b\x02d\x02f\x02h\x02j\x02l\x02n\x02p\x02r\x02t\x02v\x02x\x02z\x02|\x02" +
    "~\x02\x80\x02\x82\x02\x84\x02\x86\x02\x88\x02\x8A\x02\x8C\x02\x8E\x02" +
    "\x90\x02\x92\x02\x94\x02\x96\x02\x98\x02\x9A\x02\x9C\x02\x9E\x02\xA0\x02" +
    "\xA2\x02\xA4\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02\xAE\x02\xB0\x02\xB2\x02" +
    "\xB4\x02\xB6\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02\xC0\x02\xC2\x02\xC4\x02" +
    "\xC6\x02\xC8\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02\xD2\x02\xD4\x02\xD6\x02" +
    "\xD8\x02\xDA\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02\xE4\x02\xE6\x02\xE8\x02" +
    "\xEA\x02";
  private static readonly _serializedATNSegment2: string =
    "\xEC\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02\xF6\x02\xF8\x02\xFA\x02\xFC\x02" +
    "\xFE\x02\u0100\x02\u0102\x02\u0104\x02\u0106\x02\u0108\x02\u010A\x02\u010C" +
    "\x02\u010E\x02\u0110\x02\u0112\x02\u0114\x02\u0116\x02\u0118\x02\u011A" +
    "\x02\u011C\x02\u011E\x02\u0120\x02\u0122\x02\u0124\x02\u0126\x02\u0128" +
    "\x02\u012A\x02\u012C\x02\u012E\x02\u0130\x02\u0132\x02\u0134\x02\u0136" +
    "\x02\u0138\x02\u013A\x02\u013C\x02\u013E\x02\u0140\x02\u0142\x02\u0144" +
    "\x02\u0146\x02\u0148\x02\u014A\x02\u014C\x02\u014E\x02\u0150\x02\u0152" +
    "\x02\u0154\x02\u0156\x02\u0158\x02\u015A\x02\u015C\x02\u015E\x02\u0160" +
    "\x02\u0162\x02\u0164\x02\u0166\x02\u0168\x02\u016A\x02\u016C\x02\u016E" +
    "\x02\u0170\x02\u0172\x02\u0174\x02\u0176\x02\u0178\x02\u017A\x02\u017C" +
    "\x02\u017E\x02\u0180\x02\u0182\x02\u0184\x02\u0186\x02\u0188\x02\u018A" +
    "\x02\u018C\x02\u018E\x02\u0190\x02\u0192\x02\u0194\x02\u0196\x02\u0198" +
    "\x02\u019A\x02\u019C\x02\u019E\x02\u01A0\x02\u01A2\x02\u01A4\x02\u01A6" +
    "\x02\u01A8\x02\u01AA\x02\u01AC\x02\u01AE\x02\u01B0\x02\u01B2\x02\u01B4" +
    "\x02\u01B6\x02\u01B8\x02\u01BA\x02\u01BC\x02\u01BE\x02\u01C0\x02\u01C2" +
    "\x02\u01C4\x02\u01C6\x02\u01C8\x02\u01CA\x02\u01CC\x02\u01CE\x02\u01D0" +
    "\x02\u01D2\x02\u01D4\x02\u01D6\x02\u01D8\x02\u01DA\x02\u01DC\x02\u01DE" +
    "\x02\u01E0\x02\u01E2\x02\u01E4\x02\u01E6\x02\u01E8\x02\u01EA\x02\u01EC" +
    "\x02\u01EE\x02\u01F0\x02\u01F2\x02\u01F4\x02\u01F6\x02\u01F8\x02\u01FA" +
    "\x02\u01FC\x02\u01FE\x02\u0200\x02\u0202\x02\u0204\x02\u0206\x02\u0208" +
    "\x02\u020A\x02\u020C\x02\u020E\x02\u0210\x02\u0212\x02\u0214\x02\u0216" +
    "\x02\u0218\x02\u021A\x02\u021C\x02\u021E\x02\u0220\x02\u0222\x02\u0224" +
    "\x02\u0226\x02\u0228\x02\u022A\x02\u022C\x02\u022E\x02\u0230\x02\u0232" +
    "\x02\u0234\x02\u0236\x02\u0238\x02\u023A\x02\u023C\x02\u023E\x02\u0240" +
    "\x02\u0242\x02\u0244\x02\u0246\x02\u0248\x02\u024A\x02\u024C\x02\u024E" +
    "\x02\u0250\x02\u0252\x02\u0254\x02\u0256\x02\u0258\x02\u025A\x02\u025C" +
    "\x02\u025E\x02\u0260\x02\u0262\x02\u0264\x02\u0266\x02\u0268\x02\u026A" +
    "\x02\u026C\x02\u026E\x02\u0270\x02\u0272\x02\u0274\x02\u0276\x02\u0278" +
    "\x02\u027A\x02\u027C\x02\u027E\x02\u0280\x02\u0282\x02\u0284\x02\u0286" +
    "\x02\u0288\x02\u028A\x02\u028C\x02\u028E\x02\u0290\x02\u0292\x02\u0294" +
    "\x02\u0296\x02\u0298\x02\u029A\x02\u029C\x02\u029E\x02\u02A0\x02\u02A2" +
    "\x02\u02A4\x02\u02A6\x02\u02A8\x02\u02AA\x02\u02AC\x02\u02AE\x02\u02B0" +
    "\x02\u02B2\x02\u02B4\x02\u02B6\x02\u02B8\x02\u02BA\x02\u02BC\x02\u02BE" +
    "\x02\u02C0\x02\u02C2\x02\u02C4\x02\u02C6\x02\u02C8\x02\u02CA\x02\u02CC" +
    "\x02\u02CE\x02\u02D0\x02\u02D2\x02\u02D4\x02\u02D6\x02\u02D8\x02\u02DA" +
    "\x02\u02DC\x02\u02DE\x02\u02E0\x02\u02E2\x02\u02E4\x02\u02E6\x02\u02E8" +
    "\x02\u02EA\x02\u02EC\x02\u02EE\x02\u02F0\x02\u02F2\x02\u02F4\x02\u02F6" +
    "\x02\u02F8\x02\u02FA\x02\u02FC\x02\x02\x1C\x04\x02EEHH\x05\x02??_`uu\x04" +
    "\x02ii\x81\x81\b\x02qry|~~\x80\x80\x83\x83\x87\x88\x04\x02??uu\x06\x02" +
    "[[pprr\x85\x85\x06\x02YYooqq\x84\x84\x04\x02\x0F\x0F^^\x04\x02\t\nOP\x05" +
    "\x02KKUUde\x07\x02\x04\x04IILLQQ\x89\x8A\x04\x02\b\bNN\x04\x02ghwx\x04" +
    "\x02ffvv\x03\x02\xD4\xD5\x04\x02JJVV\x04\x02\xAD\xAD\xB1\xB1\x05\x02\x8E" +
    "\x8E\xB0\xB0\xB8\xB8\x04\x02\xA3\xA4\xAB\xAC\x04\x02\xA1\xA2\xA9\xAA\x04" +
    "\x02\x9A\x9B\x9D\x9E\x04\x02\x92\x93\xBB\xBB\x04\x02\x9A\x9A\x9D\x9D\b" +
    "\x02\x8B\x8B\x92\x93\x99\x99\xAD\xAD\xB1\xB1\xB9\xBD\x06\x02\x8B\x8B\x92" +
    "\x93\x99\x99\xB9\xBD\x04\x02\xCB\xCB\xCE\xCE\x02\u12B6\x02\u0301\x03\x02" +
    "\x02\x02\x04\u0309\x03\x02\x02\x02\x06\u030B\x03\x02\x02\x02\b\u031A\x03" +
    "\x02\x02\x02\n\u0323\x03\x02\x02\x02\f\u0327\x03\x02\x02\x02\x0E\u032C" +
    "\x03\x02\x02\x02\x10\u0334\x03\x02\x02\x02\x12\u0339\x03\x02\x02\x02\x14" +
    "\u034D\x03\x02\x02\x02\x16\u034F\x03\x02\x02\x02\x18\u037A\x03\x02\x02" +
    "\x02\x1A\u0380\x03\x02\x02\x02\x1C\u0382\x03\x02\x02\x02\x1E\u0384\x03" +
    "\x02\x02\x02 \u0398\x03\x02\x02\x02\"\u039A\x03\x02\x02\x02$\u03B6\x03" +
    "\x02\x02\x02&\u03CE\x03\x02\x02\x02(\u041F\x03\x02\x02\x02*\u042B\x03" +
    "\x02\x02\x02,\u042D\x03\x02\x02\x02.\u0431\x03\x02\x02\x020\u043D\x03" +
    "\x02\x02\x022\u0449\x03\x02\x02\x024\u0461\x03\x02\x02\x026\u0463\x03" +
    "\x02\x02\x028\u0465\x03\x02\x02\x02:\u0468\x03\x02\x02\x02<\u0470\x03" +
    "\x02\x02\x02>\u0478\x03\x02\x02\x02@\u047F\x03\x02\x02\x02B\u0496\x03" +
    "\x02\x02\x02D\u04A4\x03\x02\x02\x02F\u04A6\x03\x02\x02\x02H\u04AD\x03" +
    "\x02\x02\x02J\u04AF\x03\x02\x02\x02L\u04BB\x03\x02\x02\x02N\u04DF\x03" +
    "\x02\x02\x02P\u04E1\x03\x02\x02\x02R\u04E5\x03\x02\x02\x02T\u055B\x03" +
    "\x02\x02\x02V\u055D\x03\x02\x02\x02X\u0561\x03\x02\x02\x02Z\u0565\x03" +
    "\x02\x02\x02\\\u056F\x03\x02\x02\x02^\u0573\x03\x02\x02\x02`\u0575\x03" +
    "\x02\x02\x02b\u0582\x03\x02\x02\x02d\u058F\x03\x02\x02\x02f\u05B5\x03" +
    "\x02\x02\x02h\u05B7\x03\x02\x02\x02j\u05B9\x03\x02\x02\x02l\u05C4\x03" +
    "\x02\x02\x02n\u05D5\x03\x02\x02\x02p\u05E2\x03\x02\x02\x02r\u05E7\x03" +
    "\x02\x02\x02t\u05E9\x03\x02\x02\x02v\u05F1\x03\x02\x02\x02x\u05F9\x03" +
    "\x02\x02\x02z\u0600\x03\x02\x02\x02|\u0608\x03\x02\x02\x02~\u0610\x03" +
    "\x02\x02\x02\x80\u0617\x03\x02\x02\x02\x82\u061F\x03\x02\x02\x02\x84\u0627" +
    "\x03\x02\x02\x02\x86\u062F\x03\x02\x02\x02\x88\u0637\x03\x02\x02\x02\x8A" +
    "\u063F\x03\x02\x02\x02\x8C\u0647\x03\x02\x02\x02\x8E\u064C\x03\x02\x02" +
    "\x02\x90\u0650\x03\x02\x02\x02\x92\u0654\x03\x02\x02\x02\x94\u065D\x03" +
    "\x02\x02\x02\x96\u0676\x03\x02\x02\x02\x98\u0678\x03\x02\x02\x02\x9A\u067A" +
    "\x03\x02\x02\x02\x9C\u067C\x03\x02\x02\x02\x9E\u067E\x03\x02\x02\x02\xA0" +
    "\u0684\x03\x02\x02\x02\xA2\u06B0\x03\x02\x02\x02\xA4\u06BC\x03\x02\x02" +
    "\x02\xA6\u06BE\x03\x02\x02\x02\xA8\u06C9\x03\x02\x02\x02\xAA\u06D7\x03" +
    "\x02\x02\x02\xAC\u06FC\x03\x02\x02\x02\xAE\u071A\x03\x02\x02\x02\xB0\u071C" +
    "\x03\x02\x02\x02\xB2\u0739\x03\x02\x02\x02\xB4\u074A\x03\x02\x02\x02\xB6" +
    "\u075B\x03\x02\x02\x02\xB8\u076C\x03\x02\x02\x02\xBA\u076E\x03\x02\x02" +
    "\x02\xBC\u07C1\x03\x02\x02\x02\xBE\u07C3\x03\x02\x02\x02\xC0\u07CB\x03" +
    "\x02\x02\x02\xC2\u07D3\x03\x02\x02\x02\xC4\u07DA\x03\x02\x02\x02\xC6\u0865" +
    "\x03\x02\x02\x02\xC8\u0868\x03\x02\x02\x02\xCA\u0875\x03\x02\x02\x02\xCC" +
    "\u0880\x03\x02\x02\x02\xCE\u088B\x03\x02\x02\x02\xD0\u089B\x03\x02\x02" +
    "\x02\xD2\u08AB\x03\x02\x02\x02\xD4\u08B4\x03\x02\x02\x02\xD6\u08BF\x03" +
    "\x02\x02\x02\xD8\u08C5\x03\x02\x02\x02\xDA\u08D9\x03\x02\x02\x02\xDC\u08EB" +
    "\x03\x02\x02\x02\xDE\u08ED\x03\x02\x02\x02\xE0\u08EF\x03\x02\x02\x02\xE2" +
    "\u08F1\x03\x02\x02\x02\xE4\u08F3\x03\x02\x02\x02\xE6\u08F5\x03\x02\x02" +
    "\x02\xE8\u08F7\x03\x02\x02\x02\xEA\u08F9\x03\x02\x02\x02\xEC\u08FB\x03" +
    "\x02\x02\x02\xEE\u08FD\x03\x02\x02\x02\xF0\u08FF\x03\x02\x02\x02\xF2\u0901" +
    "\x03\x02\x02\x02\xF4\u0903\x03\x02\x02\x02\xF6\u0905\x03\x02\x02\x02\xF8" +
    "\u0907\x03\x02\x02\x02\xFA\u0915\x03\x02\x02\x02\xFC\u092A\x03\x02\x02" +
    "\x02\xFE\u092C\x03\x02\x02\x02\u0100\u092E\x03\x02\x02\x02\u0102\u0936" +
    "\x03\x02\x02\x02\u0104\u093B\x03\x02\x02\x02\u0106\u094F\x03\x02\x02\x02" +
    "\u0108\u0954\x03\x02\x02\x02\u010A\u095D\x03\x02\x02\x02\u010C\u0968\x03" +
    "\x02\x02\x02\u010E\u0971\x03\x02\x02\x02\u0110\u0975\x03\x02\x02\x02\u0112" +
    "\u097D\x03\x02\x02\x02\u0114\u0987\x03\x02\x02\x02\u0116\u098B\x03\x02" +
    "\x02\x02\u0118\u098D\x03\x02\x02\x02\u011A\u0993\x03\x02\x02\x02\u011C" +
    "\u0995\x03\x02\x02\x02\u011E\u099E\x03\x02\x02\x02\u0120\u09B9\x03\x02" +
    "\x02\x02\u0122\u09C7\x03\x02\x02\x02\u0124\u09C9\x03\x02\x02\x02\u0126" +
    "\u09CE\x03\x02\x02\x02\u0128\u09F3\x03\x02\x02\x02\u012A\u09F5\x03\x02" +
    "\x02\x02\u012C\u09FF\x03\x02\x02\x02\u012E\u0A12\x03\x02\x02\x02\u0130" +
    "\u0A29\x03\x02\x02\x02\u0132\u0A2E\x03\x02\x02\x02\u0134\u0A37\x03\x02" +
    "\x02\x02\u0136\u0A3F\x03\x02\x02\x02\u0138\u0A41\x03\x02\x02\x02\u013A" +
    "\u0A49\x03\x02\x02\x02\u013C\u0A4F\x03\x02\x02\x02\u013E\u0A59\x03\x02" +
    "\x02\x02\u0140\u0A61\x03\x02\x02\x02\u0142\u0A63\x03\x02\x02\x02\u0144" +
    "\u0A6C\x03\x02\x02\x02\u0146\u0A6F\x03\x02\x02\x02\u0148\u0A76\x03\x02" +
    "\x02\x02\u014A\u0A86\x03\x02\x02\x02\u014C\u0A88\x03\x02\x02\x02\u014E" +
    "\u0A8C\x03\x02\x02\x02\u0150\u0A8E\x03\x02\x02\x02\u0152\u0A90\x03\x02" +
    "\x02\x02\u0154\u0A92\x03\x02\x02\x02\u0156\u0A94\x03\x02\x02\x02\u0158" +
    "\u0AA6\x03\x02\x02\x02\u015A\u0AB5\x03\x02\x02\x02\u015C\u0AB9\x03\x02" +
    "\x02\x02\u015E\u0AC3\x03\x02\x02\x02\u0160\u0ACB\x03\x02\x02\x02\u0162" +
    "\u0ACF\x03\x02\x02\x02\u0164\u0AD2\x03\x02\x02\x02\u0166\u0AD5\x03\x02" +
    "\x02\x02\u0168\u0ADC\x03\x02\x02\x02\u016A\u0AEB\x03\x02\x02\x02\u016C" +
    "\u0AED\x03\x02\x02\x02\u016E\u0AF1\x03\x02\x02\x02\u0170\u0B03\x03\x02" +
    "\x02\x02\u0172\u0B06\x03\x02\x02\x02\u0174\u0B80\x03\x02\x02\x02\u0176" +
    "\u0B8A\x03\x02\x02\x02\u0178\u0B8C\x03\x02\x02\x02\u017A\u0B95\x03\x02" +
    "\x02\x02\u017C\u0B9F\x03\x02\x02\x02\u017E\u0BA1\x03\x02\x02\x02\u0180" +
    "\u0BB2\x03\x02\x02\x02\u0182\u0BB4\x03\x02\x02\x02\u0184\u0BC1\x03\x02" +
    "\x02\x02\u0186\u0BD0\x03\x02\x02\x02\u0188\u0BD2\x03\x02\x02\x02\u018A" +
    "\u0BD5\x03\x02\x02\x02\u018C\u0BDB\x03\x02\x02\x02\u018E\u0C05\x03\x02" +
    "\x02\x02\u0190\u0C17\x03\x02\x02\x02\u0192\u0C31\x03\x02\x02\x02\u0194" +
    "\u0C33\x03\x02\x02\x02\u0196\u0C39\x03\x02\x02\x02\u0198\u0C45\x03\x02" +
    "\x02\x02\u019A\u0C47\x03\x02\x02\x02\u019C\u0C4D\x03\x02\x02\x02\u019E" +
    "\u0C58\x03\x02\x02\x02\u01A0\u0C66\x03\x02\x02\x02\u01A2\u0C70\x03\x02" +
    "\x02\x02\u01A4\u0C7A\x03\x02\x02\x02\u01A6\u0C85\x03\x02\x02\x02\u01A8" +
    "\u0C8F\x03\x02\x02\x02\u01AA\u0C91\x03\x02\x02\x02\u01AC\u0C9A\x03\x02" +
    "\x02\x02\u01AE\u0CA3\x03\x02\x02\x02\u01B0\u0CAB\x03\x02\x02\x02\u01B2" +
    "\u0CB3\x03\x02\x02\x02\u01B4\u0CBA\x03\x02\x02\x02\u01B6\u0CC1\x03\x02" +
    "\x02\x02\u01B8\u0CC3\x03\x02\x02\x02\u01BA\u0CCA\x03\x02\x02\x02\u01BC" +
    "\u0CEE\x03\x02\x02\x02\u01BE\u0CF0\x03\x02\x02\x02\u01C0\u0CF2\x03\x02" +
    "\x02\x02\u01C2\u0CF4\x03\x02\x02\x02\u01C4\u0CF6\x03\x02\x02\x02\u01C6" +
    "\u0CF8\x03\x02\x02\x02\u01C8\u0CFA\x03\x02\x02\x02\u01CA\u0CFC\x03\x02" +
    "\x02\x02\u01CC\u0CFE\x03\x02\x02\x02\u01CE\u0D00\x03\x02\x02\x02\u01D0" +
    "\u0D02\x03\x02\x02\x02\u01D2\u0D04\x03\x02\x02\x02\u01D4\u0D06\x03\x02" +
    "\x02\x02\u01D6\u0D08\x03\x02\x02\x02\u01D8\u0D0A\x03\x02\x02\x02\u01DA" +
    "\u0D0C\x03\x02\x02\x02\u01DC\u0D0E\x03\x02\x02\x02\u01DE\u0D10\x03\x02" +
    "\x02\x02\u01E0\u0D1A\x03\x02\x02\x02\u01E2\u0D1C\x03\x02\x02\x02\u01E4" +
    "\u0D2C\x03\x02\x02\x02\u01E6\u0D3C\x03\x02\x02\x02\u01E8\u0D3E\x03\x02" +
    "\x02\x02\u01EA\u0D4E\x03\x02\x02\x02\u01EC\u0D50\x03\x02\x02\x02\u01EE" +
    "\u0D5E\x03\x02\x02\x02\u01F0\u0D60\x03\x02\x02\x02\u01F2\u0D6D\x03\x02" +
    "\x02\x02\u01F4\u0D71\x03\x02\x02\x02\u01F6\u0D7E\x03\x02\x02\x02\u01F8" +
    "\u0D8D\x03\x02\x02\x02\u01FA\u0D94\x03\x02\x02\x02\u01FC\u0D9B\x03\x02" +
    "\x02\x02\u01FE\u0DA2\x03\x02\x02\x02\u0200\u0DA9\x03\x02\x02\x02\u0202" +
    "\u0DAD\x03\x02\x02\x02\u0204\u0DBA\x03\x02\x02\x02\u0206\u0DC7\x03\x02" +
    "\x02\x02\u0208\u0DD6\x03\x02\x02\x02\u020A\u0DE3\x03\x02\x02\x02\u020C" +
    "\u0DF0\x03\x02\x02\x02\u020E\u0DF7\x03\x02\x02\x02\u0210\u0DFE\x03\x02" +
    "\x02\x02\u0212\u0E02\x03\x02\x02\x02\u0214\u0E11\x03\x02\x02\x02\u0216" +
    "\u0E1C\x03\x02\x02\x02\u0218\u0E27\x03\x02\x02\x02\u021A\u0E2D\x03\x02" +
    "\x02\x02\u021C\u0E3C\x03\x02\x02\x02\u021E\u0E3E\x03\x02\x02\x02\u0220" +
    "\u0E40\x03\x02\x02\x02\u0222\u0E42\x03\x02\x02\x02\u0224\u0E49\x03\x02" +
    "\x02\x02\u0226\u0E50\x03\x02\x02\x02\u0228\u0E52\x03\x02\x02\x02\u022A" +
    "\u0E54\x03\x02\x02\x02\u022C\u0E56\x03\x02\x02\x02\u022E\u0E58\x03\x02" +
    "\x02\x02\u0230\u0E5A\x03\x02\x02\x02\u0232\u0E5C\x03\x02\x02\x02\u0234" +
    "\u0E5E\x03\x02\x02\x02\u0236\u0E60\x03\x02\x02\x02\u0238\u0E63\x03\x02" +
    "\x02\x02\u023A\u0E6A\x03\x02\x02\x02\u023C\u0E73\x03\x02\x02\x02\u023E" +
    "\u0E77\x03\x02\x02\x02\u0240\u0E79\x03\x02\x02\x02\u0242\u0E85\x03\x02" +
    "\x02\x02\u0244\u0E8C\x03\x02\x02\x02\u0246\u0EA1\x03\x02\x02\x02\u0248" +
    "\u0EA5\x03\x02\x02\x02\u024A\u0EA7\x03\x02\x02\x02\u024C\u0EB2\x03\x02" +
    "\x02\x02\u024E\u0EBD\x03\x02\x02\x02\u0250\u0EC2\x03\x02\x02\x02\u0252" +
    "\u0ECD\x03\x02\x02\x02\u0254\u0ED2\x03\x02\x02\x02\u0256\u0ED7\x03\x02" +
    "\x02\x02\u0258\u0EE9\x03\x02\x02\x02\u025A\u0EF5\x03\x02\x02\x02\u025C" +
    "\u0F07\x03\x02\x02\x02\u025E\u0F0B\x03\x02\x02\x02\u0260\u0F16\x03\x02" +
    "\x02\x02\u0262\u0F18\x03\x02\x02\x02\u0264\u0F25\x03\x02\x02\x02\u0266" +
    "\u0F9B\x03\x02\x02\x02\u0268\u0FB0\x03\x02\x02\x02\u026A\u0FB2\x03\x02" +
    "\x02\x02\u026C\u0FBF\x03\x02\x02\x02\u026E\u1035\x03\x02\x02\x02\u0270" +
    "\u1037\x03\x02\x02\x02\u0272\u104A\x03\x02\x02\x02\u0274\u1093\x03\x02" +
    "\x02\x02\u0276\u109B\x03\x02\x02\x02\u0278\u10AA\x03\x02\x02\x02\u027A" +
    "\u10AC\x03\x02\x02\x02\u027C\u10BF\x03\x02\x02\x02\u027E\u10CB\x03\x02" +
    "\x02\x02\u0280\u10DB\x03\x02\x02\x02\u0282\u10DE\x03\x02\x02\x02\u0284" +
    "\u10E8\x03\x02\x02\x02\u0286\u10FB\x03\x02\x02\x02\u0288\u10FE\x03\x02" +
    "\x02\x02\u028A\u1108\x03\x02\x02\x02\u028C\u111B\x03\x02\x02\x02\u028E" +
    "\u111D\x03\x02\x02\x02\u0290\u111F\x03\x02\x02\x02\u0292\u1126\x03\x02" +
    "\x02\x02\u0294\u112A\x03\x02\x02\x02\u0296\u1133\x03\x02\x02\x02\u0298" +
    "\u1136\x03\x02\x02\x02\u029A\u113C\x03\x02\x02\x02\u029C\u1142\x03\x02" +
    "\x02\x02\u029E\u1147\x03\x02\x02\x02\u02A0\u1149\x03\x02\x02\x02\u02A2" +
    "\u114B\x03\x02\x02\x02\u02A4\u114D\x03\x02\x02\x02\u02A6\u114F\x03\x02" +
    "\x02\x02\u02A8\u1151\x03\x02\x02\x02\u02AA\u1153\x03\x02\x02\x02\u02AC" +
    "\u1155\x03\x02\x02\x02\u02AE\u1157\x03\x02\x02\x02\u02B0\u1159\x03\x02" +
    "\x02\x02\u02B2\u115B\x03\x02\x02\x02\u02B4\u115D\x03\x02\x02\x02\u02B6" +
    "\u115F\x03\x02\x02\x02\u02B8\u1161\x03\x02\x02\x02\u02BA\u116E\x03\x02" +
    "\x02\x02\u02BC\u1173\x03\x02\x02\x02\u02BE\u1175\x03\x02\x02\x02\u02C0" +
    "\u1177\x03\x02\x02\x02\u02C2\u1179\x03\x02\x02\x02\u02C4\u117B\x03\x02" +
    "\x02\x02\u02C6\u117D\x03\x02\x02\x02\u02C8\u117F\x03\x02\x02\x02\u02CA" +
    "\u1181\x03\x02\x02\x02\u02CC\u1183\x03\x02\x02\x02\u02CE\u1185\x03\x02" +
    "\x02\x02\u02D0\u118A\x03\x02\x02\x02\u02D2\u118F\x03\x02\x02\x02\u02D4" +
    "\u1197\x03\x02\x02\x02\u02D6\u1199\x03\x02\x02\x02\u02D8\u119B\x03\x02" +
    "\x02\x02\u02DA\u119D\x03\x02\x02\x02\u02DC\u119F\x03\x02\x02\x02\u02DE" +
    "\u11A1\x03\x02\x02\x02\u02E0\u11A3\x03\x02\x02\x02\u02E2\u11A5\x03\x02" +
    "\x02\x02\u02E4\u11A7\x03\x02\x02\x02\u02E6\u11A9\x03\x02\x02\x02\u02E8" +
    "\u11AB\x03\x02\x02\x02\u02EA\u11AD\x03\x02\x02\x02\u02EC\u11AF\x03\x02" +
    "\x02\x02\u02EE\u11B1\x03\x02\x02\x02\u02F0\u11B3\x03\x02\x02\x02\u02F2" +
    "\u11B5\x03\x02\x02\x02\u02F4\u11B7\x03\x02\x02\x02\u02F6\u11B9\x03\x02" +
    "\x02\x02\u02F8\u11BB\x03\x02\x02\x02\u02FA\u11BD\x03\x02\x02\x02\u02FC" +
    "\u11BF\x03\x02\x02\x02\u02FE\u0300\x05\x04\x03\x02\u02FF\u02FE\x03\x02" +
    "\x02\x02\u0300\u0303\x03\x02\x02\x02\u0301\u02FF\x03\x02\x02\x02\u0301" +
    "\u0302\x03\x02\x02\x02\u0302\u0304\x03\x02\x02\x02\u0303\u0301\x03\x02" +
    "\x02\x02\u0304\u0305\x07\x02\x02\x03\u0305\x03\x03\x02\x02\x02\u0306\u030A" +
    "\x05\x06\x04\x02\u0307\u030A\x05\n\x06\x02\u0308\u030A\x05.\x18\x02\u0309" +
    "\u0306\x03\x02\x02\x02\u0309\u0307\x03\x02\x02\x02\u0309\u0308\x03\x02" +
    "\x02\x02\u030A\x05\x03\x02\x02\x02\u030B\u030C\x07C\x02\x02\u030C\u030D" +
    "\x05\u02DA\u016E\x02\u030D\u0312\x05\f\x07\x02\u030E\u030F\x07\x95\x02" +
    "\x02\u030F\u0311\x05\f\x07\x02\u0310\u030E\x03\x02\x02\x02\u0311\u0314" +
    "\x03\x02\x02\x02\u0312\u0310\x03\x02\x02\x02\u0312\u0313\x03\x02\x02\x02" +
    "\u0313\u0316\x03\x02\x02\x02\u0314\u0312\x03\x02\x02\x02\u0315\u0317\x05" +
    "\b\x05\x02\u0316\u0315\x03\x02\x02\x02\u0316\u0317\x03\x02\x02\x02\u0317" +
    "\u0318\x03\x02\x02\x02\u0318\u0319\x07\xB7\x02\x02\u0319\x07\x03\x02\x02" +
    "\x02\u031A\u031B\x07G\x02\x02\u031B\u0320\x05\f\x07\x02\u031C\u031D\x07" +
    "\x95\x02\x02\u031D\u031F\x05\f\x07\x02\u031E\u031C\x03\x02\x02\x02\u031F" +
    "\u0322\x03\x02\x02\x02\u0320\u031E\x03\x02\x02\x02\u0320\u0321\x03\x02" +
    "\x02\x02\u0321\t\x03\x02\x02\x02\u0322\u0320\x03\x02\x02\x02\u0323\u0324" +
    "\x07:\x02\x02\u0324\u0325\x05\f\x07\x02\u0325\u0326\x07\xB7\x02\x02\u0326" +
    "\v\x03\x02\x02\x02\u0327\u0328\x07\xD1\x02\x02\u0328\r\x03\x02\x02\x02" +
    "\u0329\u032B\x05\x10\t\x02\u032A\u0329\x03\x02\x02\x02\u032B\u032E\x03" +
    "\x02\x02\x02\u032C\u032A\x03\x02\x02\x02\u032C\u032D\x03\x02\x02\x02\u032D" +
    "\u032F\x03\x02\x02\x02\u032E\u032C\x03\x02\x02\x02\u032F\u0330\x07\x02" +
    "\x02\x03\u0330\x0F\x03\x02\x02\x02\u0331\u0335\x05\x12\n\x02\u0332\u0335" +
    "\x05\u0128\x95\x02\u0333\u0335\x05.\x18\x02\u0334\u0331\x03\x02\x02\x02" +
    "\u0334\u0332\x03\x02\x02\x02\u0334\u0333\x03\x02\x02\x02\u0335\x11\x03" +
    "\x02\x02\x02\u0336\u0338\x05\u02B8\u015D\x02\u0337\u0336\x03\x02\x02\x02" +
    "\u0338\u033B\x03\x02\x02\x02\u0339\u0337\x03\x02\x02\x02\u0339\u033A\x03" +
    "\x02\x02\x02\u033A\u033C\x03\x02\x02\x02\u033B\u0339\x03\x02\x02\x02\u033C" +
    "\u033D\x05\x14\v\x02\u033D\u033F\x05\u02DC\u016F\x02\u033E\u0340\x05\x16" +
    "\f\x02\u033F\u033E\x03\x02\x02\x02\u033F\u0340\x03\x02\x02\x02\u0340\u0342" +
    "\x03\x02\x02\x02\u0341\u0343\x05\x18\r\x02\u0342\u0341\x03\x02\x02\x02" +
    "\u0342\u0343\x03\x02\x02\x02\u0343\u0344\x03\x02\x02\x02\u0344\u0348\x07" +
    "\xB7\x02\x02\u0345\u0347\x05&\x14\x02\u0346\u0345\x03\x02\x02\x02\u0347" +
    "\u034A\x03\x02\x02\x02\u0348\u0346\x03\x02\x02\x02\u0348\u0349\x03\x02" +
    "\x02\x02\u0349\u034B\x03\x02\x02\x02\u034A\u0348\x03\x02\x02\x02\u034B" +
    "\u034C\x07)\x02\x02\u034C\x13\x03\x02\x02\x02\u034D\u034E\t\x02\x02\x02" +
    "\u034E\x15\x03\x02\x02\x02\u034F\u0350\x07\xA5\x02\x02\u0350\u0351\x07" +
    "\xA8\x02\x02\u0351\u0356\x05D#\x02\u0352\u0353\x07\x95\x02\x02\u0353\u0355" +
    "\x05D#\x02\u0354\u0352\x03\x02\x02\x02\u0355\u0358\x03\x02\x02\x02\u0356" +
    "\u0354\x03\x02\x02\x02\u0356\u0357\x03\x02\x02\x02\u0357\u0359\x03\x02" +
    "\x02\x02\u0358\u0356\x03\x02\x02\x02\u0359\u035A\x07\xB6\x02\x02\u035A" +
    "\x17\x03\x02\x02\x02\u035B\u035C\x07\xA8\x02\x02\u035C\u0361\x05$\x13" +
    "\x02\u035D\u035E\x07\x95\x02\x02\u035E\u0360\x05$\x13\x02\u035F\u035D" +
    "\x03\x02\x02\x02\u0360\u0363\x03\x02\x02\x02\u0361\u035F\x03\x02\x02\x02" +
    "\u0361\u0362\x03\x02\x02\x02\u0362\u0364\x03\x02\x02\x02\u0363\u0361\x03" +
    "\x02\x02\x02\u0364\u0365\x07\xB6\x02\x02\u0365\u037B\x03\x02\x02\x02\u0366" +
    "\u0367\x07\xA8\x02\x02\u0367\u036A\x05\x1A\x0E\x02\u0368\u0369\x07\x95" +
    "\x02\x02\u0369\u036B\x05\x1A\x0E\x02\u036A\u0368\x03\x02\x02\x02\u036B" +
    "\u036C\x03\x02\x02\x02\u036C\u036A\x03\x02\x02\x02\u036C\u036D\x03\x02" +
    "\x02\x02\u036D\u036E\x03\x02\x02\x02\u036E\u036F\x07\xB6\x02\x02\u036F" +
    "\u037B\x03\x02\x02\x02\u0370\u0371\x07\xA8\x02\x02\u0371\u0372\x05\x1C" +
    "\x0F\x02\u0372\u0373\x07\xB6\x02\x02\u0373\u037B\x03\x02\x02\x02\u0374" +
    "\u0375\x07\xA8\x02\x02\u0375\u0376\x05\x1E\x10\x02\u0376\u0377\x07\xB6" +
    "\x02\x02\u0377\u037B\x03\x02\x02\x02\u0378\u0379\x07\xA8\x02\x02\u0379" +
    "\u037B\x07\xB6\x02\x02\u037A\u035B\x03\x02\x02\x02\u037A\u0366\x03\x02" +
    "\x02\x02\u037A\u0370\x03\x02\x02\x02\u037A\u0374\x03\x02\x02\x02\u037A" +
    "\u0378\x03\x02\x02\x02\u037B\x19\x03\x02\x02\x02\u037C\u037E\x05\x1C\x0F" +
    "\x02\u037D\u037C\x03\x02\x02\x02\u037D\u037E\x03\x02\x02\x02\u037E\u0381" +
    "\x03\x02\x02\x02\u037F\u0381\x05\x1E\x10\x02\u0380\u037D\x03\x02\x02\x02" +
    "\u0380\u037F\x03\x02\x02\x02\u0381\x1B\x03\x02\x02\x02\u0382\u0383\x05" +
    " \x11\x02\u0383\x1D\x03\x02\x02\x02\u0384\u0385\x07\x98\x02\x02\u0385" +
    "\u0386\x05\u02E6\u0174\x02\u0386\u0388\x07\xA8\x02\x02\u0387\u0389\x05" +
    " \x11\x02\u0388\u0387\x03\x02\x02\x02\u0388\u0389\x03\x02\x02\x02\u0389" +
    "\u038A\x03\x02\x02\x02\u038A\u038B\x07\xB6\x02\x02\u038B\x1F\x03\x02\x02" +
    "\x02\u038C\u0399\x05\"\x12\x02\u038D\u038E\x07\xA7\x02\x02\u038E\u0393" +
    "\x05\"\x12\x02\u038F\u0390\x07\x95\x02\x02\u0390\u0392\x05\"\x12\x02\u0391" +
    "\u038F\x03\x02\x02\x02\u0392\u0395\x03\x02\x02\x02\u0393\u0391\x03\x02" +
    "\x02\x02\u0393\u0394\x03\x02\x02\x02\u0394\u0396\x03\x02\x02\x02\u0395" +
    "\u0393\x03\x02\x02\x02\u0396\u0397\x07\xB5\x02\x02\u0397\u0399\x03\x02" +
    "\x02\x02\u0398\u038C\x03\x02\x02\x02\u0398\u038D\x03\x02\x02\x02\u0399" +
    "!\x03\x02\x02\x02\u039A\u039F\x05\u02E6\u0174\x02\u039B\u039C\x07\xA6" +
    "\x02\x02\u039C\u039D\x05\u0268\u0135\x02\u039D\u039E\x07\xB4\x02\x02\u039E" +
    "\u03A0\x03\x02\x02\x02\u039F\u039B\x03\x02\x02\x02\u039F\u03A0\x03\x02" +
    "\x02\x02\u03A0#\x03\x02\x02\x02\u03A1\u03A3\x05\u02B8\u015D\x02\u03A2" +
    "\u03A1\x03\x02\x02\x02\u03A3\u03A6\x03\x02\x02\x02\u03A4\u03A2\x03\x02" +
    "\x02\x02\u03A4\u03A5\x03\x02\x02\x02\u03A5\u03A7\x03\x02\x02\x02\u03A6" +
    "\u03A4\x03\x02\x02\x02\u03A7\u03B7\x05J&\x02\u03A8\u03AA\x05\u02B8\u015D" +
    "\x02\u03A9\u03A8\x03\x02\x02\x02\u03AA\u03AD\x03\x02\x02\x02\u03AB\u03A9" +
    "\x03\x02\x02\x02\u03AB\u03AC\x03\x02\x02\x02\u03AC\u03AE\x03\x02\x02\x02" +
    "\u03AD\u03AB\x03\x02\x02\x02\u03AE\u03B7\x05L\'\x02\u03AF\u03B1\x05\u02B8" +
    "\u015D\x02\u03B0\u03AF\x03\x02\x02\x02\u03B1\u03B4\x03\x02\x02\x02\u03B2" +
    "\u03B0\x03\x02\x02\x02\u03B2\u03B3\x03\x02\x02\x02\u03B3\u03B5\x03\x02" +
    "\x02\x02\u03B4\u03B2\x03\x02\x02\x02\u03B5\u03B7\x05N(\x02\u03B6\u03A4" +
    "\x03\x02\x02\x02\u03B6\u03AB\x03\x02\x02\x02\u03B6\u03B2\x03\x02\x02\x02" +
    "\u03B7%\x03\x02\x02\x02\u03B8\u03B9\x05$\x13\x02\u03B9\u03BA\x07\xB7\x02" +
    "\x02\u03BA\u03CF\x03\x02\x02\x02\u03BB\u03CF\x05(\x15\x02\u03BC\u03CF" +
    "\x05\u010C\x87\x02\u03BD\u03CF\x05\u019E\xD0\x02\u03BE\u03C0\x05\u02B8" +
    "\u015D\x02\u03BF\u03BE\x03\x02\x02\x02\u03C0\u03C3\x03\x02\x02\x02\u03C1" +
    "\u03BF\x03\x02\x02\x02\u03C1\u03C2\x03\x02\x02\x02\u03C2\u03C4\x03\x02" +
    "\x02\x02\u03C3\u03C1\x03\x02\x02\x02\u03C4\u03C5\x05D#\x02\u03C5\u03C6" +
    "\x07\xB7\x02\x02\u03C6\u03CF\x03\x02\x02\x02\u03C7\u03C9\x05\u02B8\u015D" +
    "\x02\u03C8\u03C7\x03\x02\x02\x02\u03C9\u03CC\x03\x02\x02\x02\u03CA\u03C8" +
    "\x03\x02\x02\x02\u03CA\u03CB\x03\x02\x02\x02\u03CB\u03CD\x03\x02\x02\x02" +
    "\u03CC\u03CA\x03\x02\x02\x02\u03CD\u03CF\x05F$\x02\u03CE\u03B8\x03\x02" +
    "\x02\x02\u03CE\u03BB\x03\x02\x02\x02\u03CE\u03BC\x03\x02\x02\x02\u03CE" +
    "\u03BD\x03\x02\x02\x02\u03CE\u03C1\x03\x02\x02\x02\u03CE\u03CA\x03\x02" +
    "\x02\x02\u03CF\'\x03\x02\x02\x02\u03D0\u03D2\x05\u02B8\u015D\x02\u03D1" +
    "\u03D0\x03\x02\x02\x02\u03D2\u03D5\x03\x02\x02\x02\u03D3\u03D1\x03\x02" +
    "\x02\x02\u03D3\u03D4\x03\x02\x02\x02\u03D4\u03D6\x03\x02\x02\x02\u03D5" +
    "\u03D3\x03\x02\x02\x02\u03D6\u0420\x05*\x16\x02\u03D7\u03D9\x05\u02B8" +
    "\u015D\x02\u03D8\u03D7\x03\x02\x02\x02\u03D9\u03DC\x03\x02\x02\x02\u03DA" +
    "\u03D8\x03\x02\x02\x02\u03DA\u03DB\x03\x02\x02\x02\u03DB\u03DD\x03\x02" +
    "\x02\x02\u03DC\u03DA\x03\x02\x02\x02\u03DD\u03DE\x05B\"\x02\u03DE\u03DF" +
    "\x07\xB7\x02\x02\u03DF\u0420\x03\x02\x02\x02\u03E0\u03E2\x05\u02B8\u015D" +
    "\x02\u03E1\u03E0\x03\x02\x02\x02\u03E2\u03E5\x03\x02\x02\x02\u03E3\u03E1" +
    "\x03\x02\x02\x02\u03E3\u03E4\x03\x02\x02\x02\u03E4\u03E6\x03\x02\x02\x02" +
    "\u03E5\u03E3\x03\x02\x02\x02\u03E6\u0420\x05,\x17\x02\u03E7\u03E9\x05" +
    "\u02B8\u015D\x02\u03E8\u03E7\x03\x02\x02\x02\u03E9\u03EC\x03\x02\x02\x02" +
    "\u03EA\u03E8\x03\x02\x02\x02\u03EA\u03EB\x03\x02\x02\x02\u03EB\u03ED\x03" +
    "\x02\x02\x02\u03EC\u03EA\x03\x02\x02\x02\u03ED\u0420\x05\u015C\xAF\x02" +
    "\u03EE\u03F0\x05\u02B8\u015D\x02\u03EF\u03EE\x03\x02\x02\x02\u03F0\u03F3" +
    "\x03\x02\x02\x02\u03F1\u03EF\x03\x02\x02\x02\u03F1\u03F2\x03\x02\x02\x02" +
    "\u03F2\u03F4\x03\x02\x02\x02\u03F3\u03F1\x03\x02\x02\x02\u03F4\u0420\x05" +
    "\xC6d\x02\u03F5\u03F7\x05\u02B8\u015D\x02\u03F6\u03F5\x03\x02\x02\x02" +
    "\u03F7\u03FA\x03\x02\x02\x02\u03F8\u03F6\x03\x02\x02\x02\u03F8\u03F9\x03" +
    "\x02\x02\x02\u03F9\u03FB\x03\x02\x02\x02\u03FA\u03F8\x03\x02\x02\x02\u03FB" +
    "\u0420\x05\xF8}\x02\u03FC\u03FE\x05\u02B8\u015D\x02\u03FD\u03FC\x03\x02" +
    "\x02\x02\u03FE\u0401\x03\x02\x02\x02\u03FF\u03FD\x03\x02\x02\x02\u03FF" +
    "\u0400\x03\x02\x02\x02\u0400\u0402\x03\x02\x02\x02\u0401\u03FF\x03\x02" +
    "\x02\x02\u0402\u0420\x05\u0156\xAC\x02\u0403\u0405\x05\u02B8\u015D\x02" +
    "\u0404\u0403\x03\x02\x02\x02\u0405\u0408\x03\x02\x02\x02\u0406\u0404\x03" +
    "\x02\x02\x02\u0406\u0407\x03\x02\x02\x02\u0407\u0409\x03\x02\x02\x02\u0408" +
    "\u0406\x03\x02\x02\x02\u0409\u0420\x05\u0162\xB2\x02\u040A\u040C\x05\u02B8" +
    "\u015D\x02\u040B\u040A\x03\x02\x02\x02\u040C\u040F\x03\x02\x02\x02\u040D" +
    "\u040B\x03\x02\x02\x02\u040D\u040E\x03\x02\x02\x02\u040E\u0410\x03\x02" +
    "\x02\x02\u040F\u040D\x03\x02\x02\x02\u0410\u0420\x05\u0164\xB3\x02\u0411" +
    "\u0413\x05\u02B8\u015D\x02\u0412\u0411\x03\x02\x02\x02\u0413\u0416\x03" +
    "\x02\x02\x02\u0414\u0412\x03\x02\x02\x02\u0414\u0415\x03\x02\x02\x02\u0415" +
    "\u0417\x03\x02\x02\x02\u0416\u0414\x03\x02\x02\x02\u0417\u0420\x05\u0112" +
    "\x8A\x02";
  private static readonly _serializedATNSegment3: string =
    "\u0418\u041A\x05\u02B8\u015D\x02\u0419\u0418\x03\x02\x02\x02\u041A\u041D" +
    "\x03\x02\x02\x02\u041B\u0419\x03\x02\x02\x02\u041B\u041C\x03\x02\x02\x02" +
    "\u041C\u041E\x03\x02\x02\x02\u041D\u041B\x03\x02\x02\x02\u041E\u0420\x05" +
    "\u011A\x8E\x02\u041F\u03D3\x03\x02\x02\x02\u041F\u03DA\x03\x02\x02\x02" +
    "\u041F\u03E3\x03\x02\x02\x02\u041F\u03EA\x03\x02\x02\x02\u041F\u03F1\x03" +
    "\x02\x02\x02\u041F\u03F8\x03\x02\x02\x02\u041F\u03FF\x03\x02\x02\x02\u041F" +
    "\u0406\x03\x02\x02\x02\u041F\u040D\x03\x02\x02\x02\u041F\u0414\x03\x02" +
    "\x02\x02\u041F\u041B\x03\x02\x02\x02\u0420)\x03\x02\x02\x02\u0421\u042C" +
    "\x05T+\x02\u0422\u042C\x05Z.\x02\u0423\u042C\x05R*\x02\u0424\u042C\x05" +
    "V,\x02\u0425\u042C\x05\\/\x02\u0426\u042C\x05X-\x02\u0427\u042C\x05P)" +
    "\x02\u0428\u042C\x05\u010E\x88\x02\u0429\u042C\x05\xACW\x02\u042A\u042C" +
    "\x05\xA2R\x02\u042B\u0421\x03\x02\x02\x02\u042B\u0422\x03\x02\x02\x02" +
    "\u042B\u0423\x03\x02\x02\x02\u042B\u0424\x03\x02\x02\x02\u042B\u0425\x03" +
    "\x02\x02\x02\u042B\u0426\x03\x02\x02\x02\u042B\u0427\x03\x02\x02\x02\u042B" +
    "\u0428\x03\x02\x02\x02\u042B\u0429\x03\x02\x02\x02\u042B\u042A\x03\x02" +
    "\x02\x02\u042C+\x03\x02\x02\x02\u042D\u042E\x07\x13\x02\x02\u042E\u042F" +
    "\x05t;\x02\u042F\u0430\x07\xB7\x02\x02\u0430-\x03\x02\x02\x02\u0431\u0432" +
    "\x07\x10\x02\x02\u0432\u0433\x05\u02C2\u0162\x02\u0433\u0434\x07\xB7\x02" +
    "\x02\u0434\u0438\x050\x19\x02\u0435\u0437\x054\x1B\x02\u0436\u0435\x03" +
    "\x02\x02\x02\u0437\u043A\x03\x02\x02\x02\u0438\u0436\x03\x02\x02\x02\u0438" +
    "\u0439\x03\x02\x02\x02\u0439\u043B\x03\x02\x02\x02\u043A\u0438\x03\x02" +
    "\x02\x02\u043B\u043C\x07&\x02\x02\u043C/\x03\x02\x02\x02\u043D\u0441\x07" +
    "\x14\x02\x02\u043E\u0440\x052\x1A\x02\u043F\u043E\x03\x02\x02\x02\u0440" +
    "\u0443\x03\x02\x02\x02\u0441\u043F\x03\x02\x02\x02\u0441\u0442\x03\x02" +
    "\x02\x02\u0442\u0444\x03\x02\x02\x02\u0443\u0441\x03\x02\x02\x02\u0444" +
    "\u0445\x07\xB7\x02\x02\u04451\x03\x02\x02\x02\u0446\u0447\x05\u02DA\u016E" +
    "\x02\u0447\u0448\x07\x98\x02\x02\u0448\u044A\x03\x02\x02\x02\u0449\u0446" +
    "\x03\x02\x02\x02\u0449\u044A\x03\x02\x02\x02\u044A\u044B\x03\x02\x02\x02" +
    "\u044B\u044C\x05\u02C0\u0161\x02\u044C3\x03\x02\x02\x02\u044D\u044E\x05" +
    "6\x1C\x02\u044E\u044F\x05> \x02\u044F\u0450\x07\xB7\x02\x02\u0450\u0462" +
    "\x03\x02\x02\x02\u0451\u0452\x058\x1D\x02\u0452\u0453\x05> \x02\u0453" +
    "\u0454\x07\xB7\x02\x02\u0454\u0462\x03\x02\x02\x02\u0455\u0456\x058\x1D" +
    "\x02\u0456\u0457\x05@!\x02\u0457\u0458\x07\xB7\x02\x02\u0458\u0462\x03" +
    "\x02\x02\x02\u0459\u045A\x05<\x1F\x02\u045A\u045B\x05> \x02\u045B\u045C" +
    "\x07\xB7\x02\x02\u045C\u0462\x03\x02\x02\x02\u045D\u045E\x05<\x1F\x02" +
    "\u045E\u045F\x05@!\x02\u045F\u0460\x07\xB7\x02\x02\u0460\u0462\x03\x02" +
    "\x02\x02\u0461\u044D\x03\x02\x02\x02\u0461\u0451\x03\x02\x02\x02\u0461" +
    "\u0455\x03\x02\x02\x02\u0461\u0459\x03\x02\x02\x02\u0461\u045D\x03\x02" +
    "\x02\x02\u04625\x03\x02\x02\x02\u0463\u0464\x07\x12\x02\x02\u04647\x03" +
    "\x02\x02\x02\u0465\u0466\x07>\x02\x02\u0466\u0467\x05:\x1E\x02\u04679" +
    "\x03\x02\x02\x02\u0468\u046D\x05\u02F6\u017C\x02\u0469\u046A\x07\x98\x02" +
    "\x02\u046A\u046C\x05\u02D8\u016D\x02\u046B\u0469\x03\x02\x02\x02\u046C" +
    "\u046F\x03\x02\x02\x02\u046D\u046B\x03\x02\x02\x02\u046D\u046E\x03\x02" +
    "\x02\x02\u046E;\x03\x02\x02\x02\u046F\u046D\x03\x02\x02\x02\u0470\u0474" +
    "\x07\x0E\x02\x02\u0471\u0472\x05\u02DA\u016E\x02\u0472\u0473\x07\x98\x02" +
    "\x02\u0473\u0475\x03\x02\x02\x02\u0474\u0471\x03\x02\x02\x02\u0474\u0475" +
    "\x03\x02\x02\x02\u0475\u0476\x03\x02\x02\x02\u0476\u0477\x05\u02C0\u0161" +
    "\x02\u0477=\x03\x02\x02\x02\u0478\u047C\x07B\x02\x02\u0479\u047B\x05\u02DA" +
    "\u016E\x02\u047A\u0479\x03\x02\x02\x02\u047B\u047E\x03\x02\x02\x02\u047C" +
    "\u047A\x03\x02\x02\x02\u047C\u047D\x03\x02\x02\x02\u047D?\x03\x02\x02" +
    "\x02\u047E\u047C\x03\x02\x02\x02\u047F\u0483\x07\x7F\x02\x02\u0480\u0481" +
    "\x05\u02DA\u016E\x02\u0481\u0482\x07\x98\x02\x02\u0482\u0484\x03\x02\x02" +
    "\x02\u0483\u0480\x03\x02\x02\x02\u0483\u0484\x03\x02\x02\x02\u0484\u0485" +
    "\x03\x02\x02\x02\u0485\u0488\x05\u02C0\u0161\x02\u0486\u0487\x07\x94\x02" +
    "\x02\u0487\u0489\x07\x10\x02\x02\u0488\u0486\x03\x02\x02\x02\u0488\u0489" +
    "\x03\x02\x02\x02\u0489A\x03\x02\x02\x02\u048A\u048C\x07D\x02\x02\u048B" +
    "\u048D\x07k\x02\x02\u048C\u048B\x03\x02\x02\x02\u048C\u048D\x03\x02\x02" +
    "\x02\u048D\u048F\x03\x02\x02\x02\u048E\u0490\x05\xA0Q\x02\u048F\u048E" +
    "\x03\x02\x02\x02\u048F\u0490\x03\x02\x02\x02\u0490\u0491\x03\x02\x02\x02" +
    "\u0491\u0497\x05\x80A\x02\u0492\u0493\x07D\x02\x02\u0493\u0494\x05H%\x02" +
    "\u0494\u0495\x05\x80A\x02\u0495\u0497\x03\x02\x02\x02\u0496\u048A\x03" +
    "\x02\x02\x02\u0496\u0492\x03\x02\x02\x02\u0497C\x03\x02\x02\x02\u0498" +
    "\u049A\x07S\x02\x02\u0499\u049B\x07k\x02\x02\u049A\u0499\x03\x02\x02\x02" +
    "\u049A\u049B\x03\x02\x02\x02\u049B\u049D\x03\x02\x02\x02\u049C\u049E\x05" +
    "\xA0Q\x02\u049D\u049C\x03\x02\x02\x02\u049D\u049E\x03\x02\x02\x02\u049E" +
    "\u049F\x03\x02\x02\x02\u049F\u04A5\x05\x80A\x02\u04A0\u04A1\x07S\x02\x02" +
    "\u04A1\u04A2\x05H%\x02\u04A2\u04A3\x05\x80A\x02\u04A3\u04A5\x03\x02\x02" +
    "\x02\u04A4\u0498\x03\x02\x02\x02\u04A4\u04A0\x03\x02\x02\x02\u04A5E\x03" +
    "\x02\x02\x02\u04A6\u04A8\x07n\x02\x02\u04A7\u04A9\x05\xA0Q\x02\u04A8\u04A7" +
    "\x03\x02\x02\x02\u04A8\u04A9\x03\x02\x02\x02\u04A9\u04AA\x03\x02\x02\x02" +
    "\u04AA\u04AB\x05\x86D\x02\u04AB\u04AC\x07\xB7\x02\x02\u04ACG\x03\x02\x02" +
    "\x02\u04AD\u04AE\t\x03\x02\x02\u04AEI\x03\x02\x02\x02\u04AF\u04B1\x07" +
    "<\x02\x02\u04B0\u04B2\x05^0\x02\u04B1\u04B0\x03\x02\x02\x02\u04B1\u04B2" +
    "\x03\x02\x02\x02\u04B2\u04B4\x03\x02\x02\x02\u04B3\u04B5\x07k\x02\x02" +
    "\u04B4\u04B3\x03\x02\x02\x02\u04B4\u04B5\x03\x02\x02\x02\u04B5\u04B7\x03" +
    "\x02\x02\x02\u04B6\u04B8\x05\xA0Q\x02\u04B7\u04B6\x03\x02\x02\x02\u04B7" +
    "\u04B8\x03\x02\x02\x02\u04B8\u04B9\x03\x02\x02\x02\u04B9\u04BA\x05\x82" +
    "B\x02\u04BAK\x03\x02\x02\x02\u04BB\u04BD\x07=\x02\x02\u04BC\u04BE\x05" +
    "^0\x02\u04BD\u04BC\x03\x02\x02\x02\u04BD\u04BE\x03\x02\x02\x02\u04BE\u04C0" +
    "\x03\x02\x02\x02\u04BF\u04C1\x07k\x02\x02\u04C0\u04BF\x03\x02\x02\x02" +
    "\u04C0\u04C1\x03\x02\x02\x02\u04C1\u04C3\x03\x02\x02\x02\u04C2\u04C4\x05" +
    "\xA0Q\x02\u04C3\u04C2\x03\x02\x02\x02\u04C3\u04C4\x03\x02\x02\x02\u04C4" +
    "\u04C5\x03\x02\x02\x02\u04C5\u04C6\x05\x82B\x02\u04C6M\x03\x02\x02\x02" +
    "\u04C7\u04C9\x07R\x02\x02\u04C8\u04CA\x05^0\x02\u04C9\u04C8\x03\x02\x02" +
    "\x02\u04C9\u04CA\x03\x02\x02\x02\u04CA\u04CC\x03\x02\x02\x02\u04CB\u04CD" +
    "\x07k\x02\x02\u04CC\u04CB\x03\x02\x02\x02\u04CC\u04CD\x03\x02\x02\x02" +
    "\u04CD\u04CF\x03\x02\x02\x02\u04CE\u04D0\x05\xA0Q\x02\u04CF\u04CE\x03" +
    "\x02\x02\x02\u04CF\u04D0\x03\x02\x02\x02\u04D0\u04D1\x03\x02\x02\x02\u04D1" +
    "\u04E0\x05\x82B\x02\u04D2\u04D3\x07R\x02\x02\u04D3\u04D5\x07a\x02\x02" +
    "\u04D4\u04D6\x07k\x02\x02\u04D5\u04D4\x03\x02\x02\x02\u04D5\u04D6\x03" +
    "\x02\x02\x02\u04D6\u04D8\x03\x02\x02\x02\u04D7\u04D9\x05\xA0Q\x02\u04D8" +
    "\u04D7\x03\x02\x02\x02\u04D8\u04D9\x03\x02\x02\x02\u04D9\u04DA\x03\x02" +
    "\x02\x02\u04DA\u04E0\x05\x8AF\x02\u04DB\u04DC\x07R\x02\x02\u04DC\u04DD" +
    "\x05`1\x02\u04DD\u04DE\x05\x8AF\x02\u04DE\u04E0\x03\x02\x02\x02\u04DF" +
    "\u04C7\x03\x02\x02\x02\u04DF\u04D2\x03\x02\x02\x02\u04DF\u04DB\x03\x02" +
    "\x02\x02\u04E0O\x03\x02\x02\x02\u04E1\u04E2\x07.\x02\x02\u04E2\u04E3\x05" +
    "v<\x02\u04E3\u04E4\x07\xB7\x02\x02\u04E4Q\x03\x02\x02\x02\u04E5\u04E6" +
    "\x07?\x02\x02\u04E6\u04E7\x05\x88E\x02\u04E7\u04E8\x07\xB7\x02\x02\u04E8" +
    "S\x03\x02\x02\x02\u04E9\u04EB\x05^0\x02\u04EA\u04EC\x07k\x02\x02\u04EB" +
    "\u04EA\x03\x02\x02\x02\u04EB\u04EC\x03\x02\x02\x02\u04EC\u04EE\x03\x02" +
    "\x02\x02\u04ED\u04EF\x05n8\x02\u04EE\u04ED\x03\x02\x02\x02\u04EE\u04EF" +
    "\x03\x02\x02\x02\u04EF\u04F0\x03\x02\x02\x02\u04F0\u04F1\x05|?\x02\u04F1" +
    "\u04F2\x07\xB7\x02\x02\u04F2\u055C\x03\x02\x02\x02\u04F3\u04F5\x05^0\x02" +
    "\u04F4\u04F6\x05f4\x02\u04F5\u04F4\x03\x02\x02\x02\u04F5\u04F6\x03\x02" +
    "\x02\x02\u04F6\u04F8\x03\x02\x02\x02\u04F7\u04F9\x07k\x02\x02\u04F8\u04F7" +
    "\x03\x02\x02\x02\u04F8\u04F9\x03\x02\x02\x02\u04F9\u04FB\x03\x02\x02\x02" +
    "\u04FA\u04FC\x05n8\x02\u04FB\u04FA\x03\x02\x02\x02\u04FB\u04FC\x03\x02" +
    "\x02\x02\u04FC\u04FD\x03\x02\x02\x02\u04FD\u04FE\x05z>\x02\u04FE\u04FF" +
    "\x07\xB7\x02\x02\u04FF\u055C\x03\x02\x02\x02\u0500\u0502\x05^0\x02\u0501" +
    "\u0503\t\x04\x02\x02\u0502\u0501\x03\x02\x02\x02\u0502\u0503\x03\x02\x02" +
    "\x02\u0503\u0505\x03\x02\x02\x02\u0504\u0506\x07k\x02\x02\u0505\u0504" +
    "\x03\x02\x02\x02\u0505\u0506\x03\x02\x02\x02\u0506\u0507\x03\x02\x02\x02" +
    "\u0507\u0509\x05\xA0Q\x02\u0508\u050A\x05n8\x02\u0509\u0508\x03\x02\x02" +
    "\x02\u0509\u050A\x03\x02\x02\x02\u050A\u050B\x03\x02\x02\x02\u050B\u050C" +
    "\x05|?\x02\u050C\u050D\x07\xB7\x02\x02\u050D\u055C\x03\x02\x02\x02\u050E" +
    "\u0510\x05^0\x02\u050F\u0511\x05f4\x02\u0510\u050F\x03\x02\x02\x02\u0510" +
    "\u0511\x03\x02\x02\x02\u0511\u0513\x03\x02\x02\x02\u0512\u0514\t\x04\x02" +
    "\x02\u0513\u0512\x03\x02\x02\x02\u0513\u0514\x03\x02\x02\x02\u0514\u0516" +
    "\x03\x02\x02\x02\u0515\u0517\x07k\x02\x02\u0516\u0515\x03\x02\x02\x02" +
    "\u0516\u0517\x03\x02\x02\x02\u0517\u0518\x03\x02\x02\x02\u0518\u051A\x05" +
    "\xA0Q\x02\u0519\u051B\x05n8\x02\u051A\u0519\x03\x02\x02\x02\u051A\u051B" +
    "\x03\x02\x02\x02\u051B\u051C\x03\x02\x02\x02\u051C\u051D\x05z>\x02\u051D" +
    "\u051E\x07\xB7\x02\x02\u051E\u055C\x03\x02\x02\x02\u051F\u0521\x07}\x02" +
    "\x02\u0520\u0522\x05l7\x02\u0521\u0520\x03\x02\x02\x02\u0521\u0522\x03" +
    "\x02\x02\x02\u0522\u0524\x03\x02\x02\x02\u0523\u0525\x07k\x02\x02\u0524" +
    "\u0523\x03\x02\x02\x02\u0524\u0525\x03\x02\x02\x02\u0525\u0527\x03\x02" +
    "\x02\x02\u0526\u0528\x05n8\x02\u0527\u0526\x03\x02\x02\x02\u0527\u0528" +
    "\x03\x02\x02\x02\u0528\u0529\x03\x02\x02\x02\u0529\u052A\x05|?\x02\u052A" +
    "\u052B\x07\xB7\x02\x02\u052B\u055C\x03\x02\x02\x02\u052C\u052E\x07}\x02" +
    "\x02\u052D\u052F\x05f4\x02\u052E\u052D\x03\x02\x02\x02\u052E\u052F\x03" +
    "\x02\x02\x02\u052F\u0531\x03\x02\x02\x02\u0530\u0532\x07k\x02\x02\u0531" +
    "\u0530\x03\x02\x02\x02\u0531\u0532\x03\x02\x02\x02\u0532\u0534\x03\x02" +
    "\x02\x02\u0533\u0535\x05n8\x02\u0534\u0533\x03\x02\x02\x02\u0534\u0535" +
    "\x03\x02\x02\x02\u0535\u0536\x03\x02\x02\x02\u0536\u0537\x05z>\x02\u0537" +
    "\u0538\x07\xB7\x02\x02\u0538\u055C\x03\x02\x02\x02\u0539\u053B\x07}\x02" +
    "\x02\u053A\u053C\x05l7\x02\u053B\u053A\x03\x02\x02\x02\u053B\u053C\x03" +
    "\x02\x02\x02\u053C\u053E\x03\x02\x02\x02\u053D\u053F\t\x04\x02\x02\u053E" +
    "\u053D\x03\x02\x02\x02\u053E\u053F\x03\x02\x02\x02\u053F\u0541\x03\x02" +
    "\x02\x02\u0540\u0542\x07k\x02\x02\u0541\u0540\x03\x02\x02\x02\u0541\u0542" +
    "\x03\x02\x02\x02\u0542\u0543\x03\x02\x02\x02\u0543\u0545\x05\xA0Q\x02" +
    "\u0544\u0546\x05n8\x02\u0545\u0544\x03\x02\x02\x02\u0545\u0546\x03\x02" +
    "\x02\x02\u0546\u0547\x03\x02\x02\x02\u0547\u0548\x05|?\x02\u0548\u0549" +
    "\x07\xB7\x02\x02\u0549\u055C\x03\x02\x02\x02\u054A\u054C\x07}\x02\x02" +
    "\u054B\u054D\x05f4\x02\u054C\u054B\x03\x02\x02\x02\u054C\u054D\x03\x02" +
    "\x02\x02\u054D\u054F\x03\x02\x02\x02\u054E\u0550\t\x04\x02\x02\u054F\u054E" +
    "\x03\x02\x02\x02\u054F\u0550\x03\x02\x02\x02\u0550\u0552\x03\x02\x02\x02" +
    "\u0551\u0553\x07k\x02\x02\u0552\u0551\x03\x02\x02\x02\u0552\u0553\x03" +
    "\x02\x02\x02\u0553\u0554\x03\x02\x02\x02\u0554\u0556\x05\xA0Q\x02\u0555" +
    "\u0557\x05n8\x02\u0556\u0555\x03\x02\x02\x02\u0556\u0557\x03\x02\x02\x02" +
    "\u0557\u0558\x03\x02\x02\x02\u0558\u0559\x05z>\x02\u0559\u055A\x07\xB7" +
    "\x02\x02\u055A\u055C\x03\x02\x02\x02\u055B\u04E9\x03\x02\x02\x02\u055B" +
    "\u04F3\x03\x02\x02\x02\u055B\u0500\x03\x02\x02\x02\u055B\u050E\x03\x02" +
    "\x02\x02\u055B\u051F\x03\x02\x02\x02\u055B\u052C\x03\x02\x02\x02\u055B" +
    "\u0539\x03\x02\x02\x02\u055B\u054A\x03\x02\x02\x02\u055CU\x03\x02\x02" +
    "\x02\u055D\u055E\x07_\x02\x02\u055E\u055F\x05\x84C\x02\u055F\u0560\x07" +
    "\xB7\x02\x02\u0560W\x03\x02\x02\x02\u0561\u0562\x07`\x02\x02\u0562\u0563" +
    "\x05\x84C\x02\u0563\u0564\x07\xB7\x02\x02\u0564Y\x03\x02\x02\x02\u0565" +
    "\u0567\x07a\x02\x02\u0566\u0568\x07k\x02\x02\u0567\u0566\x03\x02\x02\x02" +
    "\u0567\u0568\x03\x02\x02\x02\u0568\u056A\x03\x02\x02\x02\u0569\u056B\x05" +
    "\xA0Q\x02\u056A\u0569\x03\x02\x02\x02\u056A\u056B\x03\x02\x02\x02\u056B" +
    "\u056C\x03\x02\x02\x02\u056C\u056D\x05\x88E\x02\u056D\u056E\x07\xB7\x02" +
    "\x02\u056E[\x03\x02\x02\x02\u056F\u0570\x07u\x02\x02\u0570\u0571\x05\x88" +
    "E\x02\u0571\u0572\x07\xB7\x02\x02\u0572]\x03\x02\x02\x02\u0573\u0574\t" +
    "\x05\x02\x02\u0574_\x03\x02\x02\x02\u0575\u0576\t\x06\x02\x02\u0576a\x03" +
    "\x02\x02\x02\u0577\u057B\x05\u02E8\u0175\x02\u0578\u057A\x05\x9EP\x02" +
    "\u0579\u0578\x03\x02\x02\x02\u057A\u057D\x03\x02\x02\x02\u057B\u0579\x03" +
    "\x02\x02\x02\u057B\u057C\x03\x02\x02\x02\u057C\u0583\x03\x02\x02\x02\u057D" +
    "\u057B\x03\x02\x02\x02\u057E\u057F\x05\u02E8\u0175\x02\u057F\u0580\x07" +
    "\x9C\x02\x02\u0580\u0581\x05\u0264\u0133\x02\u0581\u0583\x03\x02\x02\x02" +
    "\u0582\u0577\x03\x02\x02\x02\u0582\u057E\x03\x02\x02\x02\u0583c\x03\x02" +
    "\x02\x02\u0584\u0588\x05\u02FC\u017F\x02\u0585\u0587\x05\x9EP\x02\u0586" +
    "\u0585\x03\x02\x02\x02\u0587\u058A\x03\x02\x02\x02\u0588\u0586\x03\x02" +
    "\x02\x02\u0588\u0589\x03\x02\x02\x02\u0589\u0590\x03\x02\x02\x02\u058A" +
    "\u0588\x03\x02\x02\x02\u058B\u058C\x05\u02FC\u017F\x02\u058C\u058D\x07" +
    "\x9C\x02\x02\u058D\u058E\x05\u0264\u0133\x02\u058E\u0590\x03\x02\x02\x02" +
    "\u058F\u0584\x03\x02\x02\x02\u058F\u058B\x03\x02\x02\x02\u0590e\x03\x02" +
    "\x02\x02\u0591\u0592\x07\xA8\x02\x02\u0592\u0593\x05h5\x02\u0593\u0594" +
    "\x07\x95\x02\x02\u0594\u0595\x05j6\x02\u0595\u0596\x07\xB6\x02\x02\u0596" +
    "\u05B6\x03\x02\x02\x02\u0597\u0598\x07\xA8\x02\x02\u0598\u0599\x05j6\x02" +
    "\u0599\u059A\x07\x95\x02\x02\u059A\u059B\x05h5\x02\u059B\u059C\x07\xB6" +
    "\x02\x02\u059C\u05B6\x03\x02\x02\x02\u059D\u059E\x07\xA8\x02\x02\u059E" +
    "\u059F\x05h5\x02\u059F\u05A0\x07\x95\x02\x02\u05A0\u05A1\x076\x02\x02" +
    "\u05A1\u05A2\x07\xB6\x02\x02\u05A2\u05B6\x03\x02\x02\x02\u05A3\u05A4\x07" +
    "\xA8\x02\x02\u05A4\u05A5\x05j6\x02\u05A5\u05A6\x07\x95\x02\x02\u05A6\u05A7" +
    "\x077\x02\x02\u05A7\u05A8\x07\xB6\x02\x02\u05A8\u05B6\x03\x02\x02\x02" +
    "\u05A9\u05AA\x07\xA8\x02\x02\u05AA\u05AB\x077\x02\x02\u05AB\u05AC\x07" +
    "\x95\x02\x02\u05AC\u05AD\x05j6\x02\u05AD\u05AE\x07\xB6\x02\x02\u05AE\u05B6" +
    "\x03\x02\x02\x02\u05AF\u05B0\x07\xA8\x02\x02\u05B0\u05B1\x076\x02\x02" +
    "\u05B1\u05B2\x07\x95\x02\x02\u05B2\u05B3\x05h5\x02\u05B3\u05B4\x07\xB6" +
    "\x02\x02\u05B4\u05B6\x03\x02\x02\x02\u05B5\u0591\x03\x02\x02\x02\u05B5" +
    "\u0597\x03\x02\x02\x02\u05B5\u059D\x03\x02\x02\x02\u05B5\u05A3\x03\x02" +
    "\x02\x02\u05B5\u05A9\x03\x02\x02\x02\u05B5\u05AF\x03\x02\x02\x02\u05B6" +
    "g\x03\x02\x02\x02\u05B7\u05B8\t\x07\x02\x02\u05B8i\x03\x02\x02\x02\u05B9" +
    "\u05BA\t\b\x02\x02\u05BAk\x03\x02\x02\x02\u05BB\u05BC\x07\xA8\x02\x02" +
    "\u05BC\u05BD\x07l\x02\x02\u05BD\u05C5\x07\xB6\x02\x02\u05BE\u05BF\x07" +
    "\xA8\x02\x02\u05BF\u05C0\x07F\x02\x02\u05C0\u05C5\x07\xB6\x02\x02\u05C1" +
    "\u05C2\x07\xA8\x02\x02\u05C2\u05C3\x07A\x02\x02\u05C3\u05C5\x07\xB6\x02" +
    "\x02\u05C4\u05BB\x03\x02\x02\x02\u05C4\u05BE\x03\x02\x02\x02\u05C4\u05C1" +
    "\x03\x02\x02\x02\u05C5m\x03\x02\x02\x02\u05C6\u05C7\x07\xA5\x02\x02\u05C7" +
    "\u05D6\x05r:\x02\u05C8\u05C9\x07\xA5\x02\x02\u05C9\u05CA\x07\xA8\x02\x02" +
    "\u05CA\u05D1\x05\u0270\u0139\x02\u05CB\u05CC\x07\x95\x02\x02\u05CC\u05CF" +
    "\x05\u0270\u0139\x02\u05CD\u05CE\x07\x95\x02\x02\u05CE\u05D0\x05\u0270" +
    "\u0139\x02\u05CF\u05CD\x03\x02\x02\x02\u05CF\u05D0\x03\x02\x02\x02\u05D0" +
    "\u05D2\x03\x02\x02\x02\u05D1\u05CB\x03\x02\x02\x02\u05D1\u05D2\x03\x02" +
    "\x02\x02\u05D2\u05D3\x03\x02\x02\x02\u05D3\u05D4\x07\xB6\x02\x02\u05D4" +
    "\u05D6\x03\x02\x02\x02\u05D5\u05C6\x03\x02\x02\x02\u05D5\u05C8\x03\x02" +
    "\x02\x02\u05D6o\x03\x02\x02\x02\u05D7\u05D8\x07\xA5\x02\x02\u05D8\u05E3" +
    "\x05r:\x02\u05D9\u05DA\x07\xA5\x02\x02\u05DA\u05DB\x07\xA8\x02\x02\u05DB" +
    "\u05DE\x05\u0270\u0139\x02\u05DC\u05DD\x07\x95\x02\x02\u05DD\u05DF\x05" +
    "\u0270\u0139\x02\u05DE\u05DC\x03\x02\x02\x02\u05DE\u05DF\x03\x02\x02\x02" +
    "\u05DF\u05E0\x03\x02\x02\x02\u05E0\u05E1\x07\xB6\x02\x02\u05E1\u05E3\x03" +
    "\x02\x02\x02\u05E2\u05D7\x03\x02\x02\x02\u05E2\u05D9\x03\x02\x02\x02\u05E3" +
    "q\x03\x02\x02\x02\u05E4\u05E8\x05\u02A4\u0153\x02\u05E5\u05E8\x05\u0294" +
    "\u014B\x02\u05E6\u05E8\x05\u02D4\u016B\x02\u05E7\u05E4\x03\x02\x02\x02" +
    "\u05E7\u05E5\x03\x02\x02\x02\u05E7\u05E6\x03\x02\x02\x02\u05E8s\x03\x02" +
    "\x02\x02\u05E9\u05EE\x05\x8EH\x02\u05EA\u05EB\x07\x95\x02\x02\u05EB\u05ED" +
    "\x05\x8EH\x02\u05EC\u05EA\x03\x02\x02\x02\u05ED\u05F0\x03\x02\x02\x02" +
    "\u05EE\u05EC\x03\x02\x02\x02\u05EE\u05EF\x03\x02\x02\x02\u05EFu\x03\x02" +
    "\x02\x02\u05F0\u05EE\x03\x02\x02\x02\u05F1\u05F6\x05x=\x02\u05F2\u05F3" +
    "\x07\x95\x02\x02\u05F3\u05F5\x05x=\x02\u05F4\u05F2\x03\x02\x02\x02\u05F5" +
    "\u05F8\x03\x02\x02\x02\u05F6\u05F4\x03\x02\x02\x02\u05F6\u05F7\x03\x02" +
    "\x02\x02\u05F7w\x03\x02\x02\x02\u05F8\u05F6\x03\x02\x02\x02\u05F9\u05FD" +
    "\x05\u02C6\u0164\x02\u05FA\u05FC\x05\x9EP\x02\u05FB\u05FA\x03\x02\x02" +
    "\x02\u05FC\u05FF\x03\x02\x02\x02\u05FD\u05FB\x03\x02\x02\x02\u05FD\u05FE" +
    "\x03\x02\x02\x02\u05FEy\x03\x02\x02\x02\u05FF\u05FD\x03\x02\x02\x02\u0600" +
    "\u0605\x05\x90I\x02\u0601\u0602\x07\x95\x02\x02\u0602\u0604\x05\x90I\x02" +
    "\u0603\u0601\x03\x02\x02\x02\u0604\u0607\x03\x02\x02\x02\u0605\u0603\x03" +
    "\x02\x02\x02\u0605\u0606\x03\x02\x02\x02\u0606{\x03\x02\x02\x02\u0607" +
    "\u0605\x03\x02\x02\x02\u0608\u060D\x05~@\x02\u0609\u060A\x07\x95\x02\x02" +
    "\u060A\u060C\x05~@\x02\u060B\u0609\x03\x02\x02\x02\u060C\u060F\x03\x02" +
    "\x02\x02\u060D\u060B\x03\x02\x02\x02\u060D\u060E\x03\x02\x02\x02\u060E" +
    "}\x03\x02\x02\x02\u060F\u060D\x03\x02\x02\x02\u0610\u0614\x05\u02E0\u0171" +
    "\x02\u0611\u0613\x05\x9EP\x02\u0612\u0611\x03\x02\x02\x02\u0613\u0616" +
    "\x03\x02\x02\x02\u0614\u0612\x03\x02\x02\x02\u0614\u0615\x03\x02\x02\x02" +
    "\u0615\x7F\x03\x02\x02\x02\u0616\u0614\x03\x02\x02\x02\u0617\u061C\x05" +
    "\x92J\x02\u0618\u0619\x07\x95\x02\x02\u0619\u061B\x05\x92J\x02\u061A\u0618" +
    "\x03\x02\x02\x02\u061B\u061E\x03\x02\x02\x02\u061C\u061A\x03\x02\x02\x02" +
    "\u061C\u061D\x03\x02\x02\x02\u061D\x81\x03\x02\x02\x02\u061E\u061C\x03" +
    "\x02\x02\x02\u061F\u0624\x05\u02E6\u0174\x02\u0620\u0621\x07\x95\x02\x02" +
    "\u0621\u0623\x05\u02E6\u0174\x02\u0622\u0620\x03\x02\x02\x02\u0623\u0626" +
    "\x03\x02\x02\x02\u0624\u0622\x03\x02\x02\x02\u0624\u0625\x03\x02\x02\x02" +
    "\u0625\x83\x03\x02\x02\x02\u0626\u0624\x03\x02\x02\x02\u0627\u062C\x05" +
    "b2\x02\u0628\u0629\x07\x95\x02\x02\u0629\u062B\x05b2\x02\u062A\u0628\x03" +
    "\x02\x02\x02\u062B\u062E\x03\x02\x02\x02\u062C\u062A\x03\x02\x02\x02\u062C" +
    "\u062D\x03\x02\x02\x02\u062D\x85\x03\x02\x02\x02\u062E\u062C\x03\x02\x02" +
    "\x02\u062F\u0634\x05\x94K\x02\u0630\u0631\x07\x95\x02\x02\u0631\u0633" +
    "\x05\x94K\x02\u0632\u0630\x03\x02\x02\x02\u0633\u0636\x03\x02\x02\x02" +
    "\u0634\u0632\x03\x02\x02\x02\u0634\u0635\x03\x02\x02\x02\u0635\x87\x03" +
    "\x02\x02\x02\u0636\u0634\x03\x02\x02\x02\u0637\u063C\x05d3\x02\u0638\u0639" +
    "\x07\x95\x02\x02\u0639\u063B\x05d3\x02\u063A\u0638\x03\x02\x02\x02\u063B" +
    "\u063E\x03\x02\x02\x02\u063C\u063A\x03\x02\x02\x02\u063C\u063D\x03\x02" +
    "\x02\x02\u063D\x89\x03\x02\x02\x02\u063E\u063C\x03\x02\x02\x02\u063F\u0644" +
    "\x05\x8CG\x02\u0640\u0641\x07\x95\x02\x02\u0641\u0643\x05\x8CG\x02\u0642" +
    "\u0640\x03\x02\x02\x02\u0643\u0646\x03\x02\x02\x02\u0644\u0642\x03\x02" +
    "\x02\x02\u0644\u0645\x03\x02\x02\x02\u0645\x8B\x03\x02\x02\x02\u0646\u0644" +
    "\x03\x02\x02\x02\u0647\u064A\x05\u02E6\u0174\x02\u0648\u0649\x07\x9C\x02" +
    "\x02\u0649\u064B\x05\u0264\u0133\x02\u064A\u0648\x03\x02\x02\x02\u064A" +
    "\u064B\x03\x02\x02\x02\u064B\x8D\x03\x02\x02\x02\u064C\u064D\x05\u02D0" +
    "\u0169\x02\u064D\u064E\x07\x9C\x02\x02\u064E\u064F\x05\u0266\u0134\x02" +
    "\u064F\x8F\x03\x02\x02\x02\u0650\u0651\x05\u02E0\u0171\x02\u0651\u0652" +
    "\x07\x9C\x02\x02\u0652\u0653\x05\u026C\u0137\x02\u0653\x91\x03\x02\x02" +
    "\x02\u0654\u0655\x05\u02E4\u0173\x02\u0655\u0656\x07\x9C\x02\x02\u0656" +
    "\u0657\x05\u0266\u0134\x02\u0657\x93\x03\x02\x02\x02\u0658\u0659\x05\u02EC" +
    "\u0177\x02\u0659\u065A\x07\x9C\x02\x02\u065A\u065B\x05\u0266\u0134\x02" +
    "\u065B\u065E\x03\x02\x02\x02\u065C\u065E\x05\x96L\x02\u065D\u0658\x03" +
    "\x02\x02\x02\u065D\u065C\x03\x02\x02\x02\u065E\x95\x03\x02\x02\x02\u065F" +
    "\u0660\x07T\x02\x02\u0660\u0661\x07\x9C\x02\x02\u0661\u0662\x07\xA8\x02" +
    "\x02\u0662\u0665\x05\x9AN\x02\u0663\u0664\x07\x95\x02\x02\u0664\u0666" +
    "\x05\x98M\x02\u0665\u0663\x03\x02\x02\x02\u0665\u0666\x03\x02\x02\x02" +
    "\u0666\u0667\x03\x02\x02\x02\u0667\u0668\x07\xB6\x02\x02\u0668\u0677\x03" +
    "\x02\x02\x02\u0669\u066A\x07T\x02\x02\u066A\u066B\x05\u01B2\xDA\x02\u066B" +
    "\u066C\x07\x96\x02\x02\u066C\u066D\x05\u01B4\xDB\x02\u066D\u066E\x07\x9C" +
    "\x02\x02\u066E\u066F\x07\xA8\x02\x02\u066F\u0672\x05\x9AN\x02\u0670\u0671" +
    "\x07\x95\x02\x02\u0671\u0673\x05\x98M\x02\u0672\u0670\x03\x02\x02\x02" +
    "\u0672\u0673\x03\x02\x02\x02\u0673\u0674\x03\x02\x02\x02\u0674\u0675\x07" +
    "\xB6\x02\x02\u0675\u0677\x03\x02\x02\x02\u0676\u065F\x03\x02\x02\x02\u0676" +
    "\u0669\x03\x02\x02\x02\u0677\x97\x03\x02\x02\x02\u0678\u0679\x05\x9CO" +
    "\x02\u0679\x99\x03\x02\x02\x02\u067A\u067B\x05\x9CO\x02\u067B\x9B\x03" +
    "\x02\x02\x02\u067C\u067D\x05\u0266\u0134\x02\u067D\x9D\x03\x02\x02\x02" +
    "\u067E\u067F\x07\xA6\x02\x02\u067F\u0680\x05\u026A\u0136\x02\u0680\u0681" +
    "\x07\x94\x02\x02\u0681\u0682\x05\u026A\u0136\x02\u0682\u0683\x07\xB4\x02" +
    "\x02\u0683\x9F\x03\x02\x02\x02\u0684\u0685\x07\xA6\x02\x02\u0685\u0686" +
    "\x05\u0276\u013C\x02\u0686\u0687\x07\x94\x02\x02\u0687\u0688\x05\u026E" +
    "\u0138\x02\u0688\u0689\x07\xB4\x02\x02\u0689\xA1\x03\x02\x02\x02\u068A" +
    "\u068C\x073\x02\x02\u068B\u068D\x07\x06\x02\x02\u068C\u068B\x03\x02\x02" +
    "\x02\u068C\u068D\x03\x02\x02\x02\u068D\u068F\x03\x02\x02\x02\u068E\u0690" +
    "\x05\xAAV\x02\u068F\u068E\x03\x02\x02\x02\u068F\u0690\x03\x02\x02\x02" +
    "\u0690\u0691\x03\x02\x02\x02\u0691\u0692\x05\u02C8\u0165\x02\u0692\u0694" +
    "\x07\xB7\x02\x02\u0693\u0695\x05\xA4S\x02\u0694\u0693\x03\x02\x02\x02" +
    "\u0695\u0696\x03\x02\x02\x02\u0696\u0694\x03\x02\x02\x02\u0696\u0697\x03" +
    "\x02\x02\x02\u0697\u0698\x03\x02\x02\x02\u0698\u0699\x05\u0178\xBD\x02" +
    "\u0699\u069A\x07\'\x02\x02\u069A\u06B1\x03\x02\x02\x02\u069B\u069D\x07" +
    "3\x02\x02\u069C\u069E\x07\x06\x02\x02\u069D\u069C\x03\x02\x02\x02\u069D" +
    "\u069E\x03\x02\x02\x02\u069E\u06A0\x03\x02\x02\x02\u069F\u06A1\x05\xAA" +
    "V\x02\u06A0\u069F\x03\x02\x02\x02\u06A0\u06A1\x03\x02\x02\x02\u06A1\u06A2" +
    "\x03\x02\x02\x02\u06A2\u06A3\x05\u02C8\u0165\x02\u06A3\u06A4\x07\xA8\x02" +
    "\x02\u06A4\u06A5\x05\xA6T\x02\u06A5\u06A6\x07\xB6\x02\x02\u06A6\u06AA" +
    "\x07\xB7\x02\x02\u06A7\u06A9\x05\xBC_\x02\u06A8\u06A7\x03\x02\x02\x02" +
    "\u06A9\u06AC\x03\x02\x02\x02\u06AA\u06A8\x03\x02\x02\x02\u06AA\u06AB\x03" +
    "\x02\x02\x02\u06AB\u06AD\x03\x02\x02\x02\u06AC\u06AA\x03\x02\x02\x02\u06AD" +
    "\u06AE\x05\u0178\xBD\x02\u06AE\u06AF\x07\'\x02\x02\u06AF\u06B1\x03\x02" +
    "\x02\x02\u06B0\u068A\x03\x02\x02\x02\u06B0\u069B\x03\x02\x02\x02\u06B1" +
    "\xA3\x03\x02\x02\x02\u06B2\u06BD\x05\xBC_\x02\u06B3\u06B5\x05\u02B8\u015D" +
    "\x02\u06B4\u06B3\x03\x02\x02\x02\u06B5\u06B8\x03\x02\x02\x02\u06B6\u06B4" +
    "\x03\x02\x02\x02\u06B6\u06B7\x03\x02\x02\x02\u06B7\u06B9\x03\x02\x02\x02" +
    "\u06B8\u06B6\x03\x02\x02\x02\u06B9\u06BA\x05\xB4[\x02\u06BA\u06BB\x07" +
    "\xB7\x02\x02\u06BB\u06BD\x03\x02\x02\x02\u06BC\u06B2\x03\x02\x02\x02\u06BC" +
    "\u06B6\x03\x02\x02\x02\u06BD\xA5\x03\x02\x02\x02\u06BE\u06C3\x05\xA8U" +
    "\x02\u06BF\u06C0\x07\x95\x02\x02\u06C0\u06C2\x05\xA8U\x02\u06C1\u06BF" +
    "\x03\x02\x02\x02\u06C2\u06C5\x03\x02\x02\x02\u06C3\u06C1\x03\x02\x02\x02" +
    "\u06C3\u06C4\x03\x02\x02\x02\u06C4\xA7\x03\x02\x02\x02\u06C5\u06C3\x03" +
    "\x02\x02\x02\u06C6\u06C8\x05\u02B8\u015D\x02\u06C7\u06C6\x03\x02\x02\x02" +
    "\u06C8\u06CB\x03\x02\x02\x02\u06C9\u06C7\x03\x02\x02\x02\u06C9\u06CA\x03" +
    "\x02\x02\x02\u06CA\u06CC\x03\x02\x02\x02\u06CB\u06C9\x03\x02\x02\x02\u06CC" +
    "\u06CD\x05\xB4[\x02\u06CD\xA9\x03\x02\x02\x02\u06CE\u06D8\x05\xA0Q\x02" +
    "\u06CF\u06D1\x07k\x02\x02\u06D0\u06D2\x05\xA0Q\x02\u06D1\u06D0\x03\x02" +
    "\x02\x02\u06D1\u06D2\x03\x02\x02\x02\u06D2\u06D8\x03\x02\x02\x02\u06D3" +
    "\u06D8";
  private static readonly _serializedATNSegment4: string =
    "\x07?\x02\x02\u06D4\u06D8\x07_\x02\x02\u06D5\u06D8\x07`\x02\x02\u06D6" +
    "\u06D8\x07u\x02\x02\u06D7\u06CE\x03\x02\x02\x02\u06D7\u06CF\x03\x02\x02" +
    "\x02\u06D7\u06D3\x03\x02\x02\x02\u06D7\u06D4\x03\x02\x02\x02\u06D7\u06D5" +
    "\x03\x02\x02\x02\u06D7\u06D6\x03\x02\x02\x02\u06D8\xAB\x03\x02\x02\x02" +
    "\u06D9\u06DB\x07t\x02\x02\u06DA\u06DC\x07\x06\x02\x02\u06DB\u06DA\x03" +
    "\x02\x02\x02\u06DB\u06DC\x03\x02\x02\x02\u06DC\u06DD\x03\x02\x02\x02\u06DD" +
    "\u06DE\x05\u02F2\u017A\x02\u06DE\u06E2\x07\xB7\x02\x02\u06DF\u06E1\x05" +
    "\xAEX\x02\u06E0\u06DF\x03\x02\x02\x02\u06E1\u06E4\x03\x02\x02\x02\u06E2" +
    "\u06E0\x03\x02\x02\x02\u06E2\u06E3\x03\x02\x02\x02\u06E3\u06E5\x03\x02" +
    "\x02\x02\u06E4\u06E2\x03\x02\x02\x02\u06E5\u06E6\x05\u0176\xBC\x02\u06E6" +
    "\u06E7\x07-\x02\x02\u06E7\u06FD\x03\x02\x02\x02\u06E8\u06EA\x07t\x02\x02" +
    "\u06E9\u06EB\x07\x06\x02\x02\u06EA\u06E9\x03\x02\x02\x02\u06EA\u06EB\x03" +
    "\x02\x02\x02\u06EB\u06EC\x03\x02\x02\x02\u06EC\u06ED\x05\u02F2\u017A\x02" +
    "\u06ED\u06EF\x07\xA8\x02\x02\u06EE\u06F0\x05\xB0Y\x02\u06EF\u06EE\x03" +
    "\x02\x02\x02\u06EF\u06F0\x03\x02\x02\x02\u06F0\u06F1\x03\x02\x02\x02\u06F1" +
    "\u06F2\x07\xB6\x02\x02\u06F2\u06F6\x07\xB7\x02\x02\u06F3\u06F5\x05\xBC" +
    "_\x02\u06F4\u06F3\x03\x02\x02\x02\u06F5\u06F8\x03\x02\x02\x02\u06F6\u06F4" +
    "\x03\x02\x02\x02\u06F6\u06F7\x03\x02\x02\x02\u06F7\u06F9\x03\x02\x02\x02" +
    "\u06F8\u06F6\x03\x02\x02\x02\u06F9\u06FA\x05\u0176\xBC\x02\u06FA\u06FB" +
    "\x07-\x02\x02\u06FB\u06FD\x03\x02\x02\x02\u06FC\u06D9\x03\x02\x02\x02" +
    "\u06FC\u06E8\x03\x02\x02\x02\u06FD\xAD\x03\x02\x02\x02\u06FE\u071B\x05" +
    "\xBC_\x02\u06FF\u0701\x05\u02B8\u015D\x02\u0700\u06FF\x03\x02\x02\x02" +
    "\u0701\u0704\x03\x02\x02\x02\u0702\u0700\x03\x02\x02\x02\u0702\u0703\x03" +
    "\x02\x02\x02\u0703\u0705\x03\x02\x02\x02\u0704\u0702\x03\x02\x02\x02\u0705" +
    "\u0706\x05\xB4[\x02\u0706\u0707\x07\xB7\x02\x02\u0707\u071B\x03\x02\x02" +
    "\x02\u0708\u070A\x05\u02B8\u015D\x02\u0709\u0708\x03\x02\x02\x02\u070A" +
    "\u070D\x03\x02\x02\x02\u070B\u0709\x03\x02\x02\x02\u070B\u070C\x03\x02" +
    "\x02\x02\u070C\u070E\x03\x02\x02\x02\u070D\u070B\x03\x02\x02\x02\u070E" +
    "\u070F\x05\xB6\\\x02\u070F\u0710\x07\xB7\x02\x02\u0710\u071B\x03\x02\x02" +
    "\x02\u0711\u0713\x05\u02B8\u015D\x02\u0712\u0711\x03\x02\x02\x02\u0713" +
    "\u0716\x03\x02\x02\x02\u0714\u0712\x03\x02\x02\x02\u0714\u0715\x03\x02" +
    "\x02\x02\u0715\u0717\x03\x02\x02\x02\u0716\u0714\x03\x02\x02\x02\u0717" +
    "\u0718\x05\xB8]\x02\u0718\u0719\x07\xB7\x02\x02\u0719\u071B\x03\x02\x02" +
    "\x02\u071A\u06FE\x03\x02\x02\x02\u071A\u0702\x03\x02\x02\x02\u071A\u070B" +
    "\x03\x02\x02\x02\u071A\u0714\x03\x02\x02\x02\u071B\xAF\x03\x02\x02\x02" +
    "\u071C\u0721\x05\xB2Z\x02\u071D\u071E\x07\x95\x02\x02\u071E\u0720\x05" +
    "\xB2Z\x02\u071F\u071D\x03\x02\x02\x02\u0720\u0723\x03\x02\x02\x02\u0721" +
    "\u071F\x03\x02\x02\x02\u0721\u0722\x03\x02\x02\x02\u0722\xB1\x03\x02\x02" +
    "\x02\u0723\u0721\x03\x02\x02\x02\u0724\u0726\x05\u02B8\u015D\x02\u0725" +
    "\u0724\x03\x02\x02\x02\u0726\u0729\x03\x02\x02\x02\u0727\u0725\x03\x02" +
    "\x02\x02\u0727\u0728\x03\x02\x02\x02\u0728\u072A\x03\x02\x02\x02\u0729" +
    "\u0727\x03\x02\x02\x02\u072A\u073A\x05\xB4[\x02\u072B\u072D\x05\u02B8" +
    "\u015D\x02\u072C\u072B\x03\x02\x02\x02\u072D\u0730\x03\x02\x02\x02\u072E" +
    "\u072C\x03\x02\x02\x02\u072E\u072F\x03\x02\x02\x02\u072F\u0731\x03\x02" +
    "\x02\x02\u0730\u072E\x03\x02\x02\x02\u0731\u073A\x05\xB6\\\x02\u0732\u0734" +
    "\x05\u02B8\u015D\x02\u0733\u0732\x03\x02\x02\x02\u0734\u0737\x03\x02\x02" +
    "\x02\u0735\u0733\x03\x02\x02\x02\u0735\u0736\x03\x02\x02\x02\u0736\u0738" +
    "\x03\x02\x02\x02\u0737\u0735\x03\x02\x02\x02\u0738\u073A\x05\xB8]\x02" +
    "\u0739\u0727\x03\x02\x02\x02\u0739\u072E\x03\x02\x02\x02\u0739\u0735\x03" +
    "\x02\x02\x02\u073A\xB3\x03\x02\x02\x02\u073B\u073D\x07=\x02\x02\u073C" +
    "\u073E\x07a\x02\x02\u073D\u073C\x03\x02\x02\x02\u073D\u073E\x03\x02\x02" +
    "\x02\u073E\u0740\x03\x02\x02\x02\u073F\u0741\x07k\x02\x02\u0740\u073F" +
    "\x03\x02\x02\x02\u0740\u0741\x03\x02\x02\x02\u0741\u0743\x03\x02\x02\x02" +
    "\u0742\u0744\x05\xA0Q\x02\u0743\u0742\x03\x02\x02\x02\u0743\u0744\x03" +
    "\x02\x02\x02\u0744\u0745\x03\x02\x02\x02\u0745\u074B\x05\x82B\x02\u0746" +
    "\u0747\x07=\x02\x02\u0747\u0748\x05\xBA^\x02\u0748\u0749\x05\x82B\x02" +
    "\u0749\u074B\x03\x02\x02\x02\u074A\u073B\x03\x02\x02\x02\u074A\u0746\x03" +
    "\x02\x02\x02\u074B\xB5\x03\x02\x02\x02\u074C\u074E\x07R\x02\x02\u074D" +
    "\u074F\x07a\x02\x02\u074E\u074D\x03\x02\x02\x02\u074E\u074F\x03\x02\x02" +
    "\x02\u074F\u0751\x03\x02\x02\x02\u0750\u0752\x07k\x02\x02\u0751\u0750" +
    "\x03\x02\x02\x02\u0751\u0752\x03\x02\x02\x02\u0752\u0754\x03\x02\x02\x02" +
    "\u0753\u0755\x05\xA0Q\x02\u0754\u0753\x03\x02\x02\x02\u0754\u0755\x03" +
    "\x02\x02\x02\u0755\u0756\x03\x02\x02\x02\u0756\u075C\x05\x82B\x02\u0757" +
    "\u0758\x07R\x02\x02\u0758\u0759\x05\xBA^\x02\u0759\u075A\x05\x82B\x02" +
    "\u075A\u075C\x03\x02\x02\x02\u075B\u074C\x03\x02\x02\x02\u075B\u0757\x03" +
    "\x02\x02\x02\u075C\xB7\x03\x02\x02\x02\u075D\u075F\x07<\x02\x02\u075E" +
    "\u0760\x07a\x02\x02\u075F\u075E\x03\x02\x02\x02\u075F\u0760\x03\x02\x02" +
    "\x02\u0760\u0762\x03\x02\x02\x02\u0761\u0763\x07k\x02\x02\u0762\u0761" +
    "\x03\x02\x02\x02\u0762\u0763\x03\x02\x02\x02\u0763\u0765\x03\x02\x02\x02" +
    "\u0764\u0766\x05\xA0Q\x02\u0765\u0764\x03\x02\x02\x02\u0765\u0766\x03" +
    "\x02\x02\x02\u0766\u0767\x03\x02\x02\x02\u0767\u076D\x05\x82B\x02\u0768" +
    "\u0769\x07<\x02\x02\u0769\u076A\x05\xBA^\x02\u076A\u076B\x05\x82B\x02" +
    "\u076B\u076D\x03\x02\x02\x02\u076C\u075D\x03\x02\x02\x02\u076C\u0768\x03" +
    "\x02\x02\x02\u076D\xB9\x03\x02\x02\x02\u076E\u076F\t\x03\x02\x02\u076F" +
    "\xBB\x03\x02\x02\x02\u0770\u0772\x05\u02B8\u015D\x02\u0771\u0770\x03\x02" +
    "\x02\x02\u0772\u0775\x03\x02\x02\x02\u0773\u0771\x03\x02\x02\x02\u0773" +
    "\u0774\x03\x02\x02\x02\u0774\u0776\x03\x02\x02\x02\u0775\u0773\x03\x02" +
    "\x02\x02\u0776\u0778\x07a\x02\x02\u0777\u0779\x07k\x02\x02\u0778\u0777" +
    "\x03\x02\x02\x02\u0778\u0779\x03\x02\x02\x02\u0779\u077B\x03\x02\x02\x02" +
    "\u077A\u077C\x05\xA0Q\x02\u077B\u077A\x03\x02\x02\x02\u077B\u077C\x03" +
    "\x02\x02\x02\u077C\u077D\x03\x02\x02\x02\u077D\u077E\x05\xBE`\x02\u077E" +
    "\u077F\x07\xB7\x02\x02\u077F\u07C2\x03\x02\x02\x02\u0780\u0782\x05\u02B8" +
    "\u015D\x02\u0781\u0780\x03\x02\x02\x02\u0782\u0785\x03\x02\x02\x02\u0783" +
    "\u0781\x03\x02\x02\x02\u0783\u0784\x03\x02\x02\x02\u0784\u0786\x03\x02" +
    "\x02\x02\u0785\u0783\x03\x02\x02\x02\u0786\u0787\x07?\x02\x02\u0787\u0788" +
    "\x05\xBE`\x02\u0788\u0789\x07\xB7\x02\x02\u0789\u07C2\x03\x02\x02\x02" +
    "\u078A\u078C\x05\u02B8\u015D\x02\u078B\u078A\x03\x02\x02\x02\u078C\u078F" +
    "\x03\x02\x02\x02\u078D\u078B\x03\x02\x02\x02\u078D\u078E\x03\x02\x02\x02" +
    "\u078E\u0790\x03\x02\x02\x02\u078F\u078D\x03\x02\x02\x02\u0790\u0791\x07" +
    "u\x02\x02\u0791\u0792\x05\xBE`\x02\u0792\u0793\x07\xB7\x02\x02\u0793\u07C2" +
    "\x03\x02\x02\x02\u0794\u0796\x05\u02B8\u015D\x02\u0795\u0794\x03\x02\x02" +
    "\x02\u0796\u0799\x03\x02\x02\x02\u0797\u0795\x03\x02\x02\x02\u0797\u0798" +
    "\x03\x02\x02\x02\u0798\u079A\x03\x02\x02\x02\u0799\u0797\x03\x02\x02\x02" +
    "\u079A\u079B\x07_\x02\x02\u079B\u079C\x05\xC0a\x02\u079C\u079D\x07\xB7" +
    "\x02\x02\u079D\u07C2\x03\x02\x02\x02\u079E\u07A0\x05\u02B8\u015D\x02\u079F" +
    "\u079E\x03\x02\x02\x02\u07A0\u07A3\x03\x02\x02\x02\u07A1\u079F\x03\x02" +
    "\x02\x02\u07A1\u07A2\x03\x02\x02\x02\u07A2\u07A4\x03\x02\x02\x02\u07A3" +
    "\u07A1\x03\x02\x02\x02\u07A4\u07A5\x07`\x02\x02\u07A5\u07A6\x05\xC0a\x02" +
    "\u07A6\u07A7\x07\xB7\x02\x02\u07A7\u07C2\x03\x02\x02\x02\u07A8\u07AA\x05" +
    "\u02B8\u015D\x02\u07A9\u07A8\x03\x02\x02\x02\u07AA\u07AD\x03\x02\x02\x02" +
    "\u07AB\u07A9\x03\x02\x02\x02\u07AB\u07AC\x03\x02\x02\x02\u07AC\u07AE\x03" +
    "\x02\x02\x02\u07AD\u07AB\x03\x02\x02\x02\u07AE\u07C2\x05P)\x02\u07AF\u07B1" +
    "\x05\u02B8\u015D\x02\u07B0\u07AF\x03\x02\x02\x02\u07B1\u07B4\x03\x02\x02" +
    "\x02\u07B2\u07B0\x03\x02\x02\x02\u07B2\u07B3\x03\x02\x02\x02\u07B3\u07B5" +
    "\x03\x02\x02\x02\u07B4\u07B2\x03\x02\x02\x02\u07B5\u07B6\x05B\"\x02\u07B6" +
    "\u07B7\x07\xB7\x02\x02\u07B7\u07C2\x03\x02\x02\x02\u07B8\u07BA\x05\u02B8" +
    "\u015D\x02\u07B9\u07B8\x03\x02\x02\x02\u07BA\u07BD\x03\x02\x02\x02\u07BB" +
    "\u07B9\x03\x02\x02\x02\u07BB\u07BC\x03\x02\x02\x02\u07BC\u07BE\x03\x02" +
    "\x02\x02\u07BD\u07BB\x03\x02\x02\x02\u07BE\u07BF\x05D#\x02\u07BF\u07C0" +
    "\x07\xB7\x02\x02\u07C0\u07C2\x03\x02\x02\x02\u07C1\u0773\x03\x02\x02\x02" +
    "\u07C1\u0783\x03\x02\x02\x02\u07C1\u078D\x03\x02\x02\x02\u07C1\u0797\x03" +
    "\x02\x02\x02\u07C1\u07A1\x03\x02\x02\x02\u07C1\u07AB\x03\x02\x02\x02\u07C1" +
    "\u07B2\x03\x02\x02\x02\u07C1\u07BB\x03\x02\x02\x02\u07C2\xBD\x03\x02\x02" +
    "\x02\u07C3\u07C8\x05\xC2b\x02\u07C4\u07C5\x07\x95\x02\x02\u07C5\u07C7" +
    "\x05\xC2b\x02\u07C6\u07C4\x03\x02\x02\x02\u07C7\u07CA\x03\x02\x02\x02" +
    "\u07C8\u07C6\x03\x02\x02\x02\u07C8\u07C9\x03\x02\x02\x02\u07C9\xBF\x03" +
    "\x02\x02\x02\u07CA\u07C8\x03\x02\x02\x02\u07CB\u07D0\x05\xC4c\x02\u07CC" +
    "\u07CD\x07\x95\x02\x02\u07CD\u07CF\x05\xC4c\x02\u07CE\u07CC\x03\x02\x02" +
    "\x02\u07CF\u07D2\x03\x02\x02\x02\u07D0\u07CE\x03\x02\x02\x02\u07D0\u07D1" +
    "\x03\x02\x02\x02\u07D1\xC1\x03\x02\x02\x02\u07D2\u07D0\x03\x02\x02\x02" +
    "\u07D3\u07D7\x05\u02FC\u017F\x02\u07D4\u07D6\x05\x9EP\x02\u07D5\u07D4" +
    "\x03\x02\x02\x02\u07D6\u07D9\x03\x02\x02\x02\u07D7\u07D5\x03\x02\x02\x02" +
    "\u07D7\u07D8\x03\x02\x02\x02\u07D8\xC3\x03\x02\x02\x02\u07D9\u07D7\x03" +
    "\x02\x02\x02\u07DA\u07DE\x05\u02E8\u0175\x02\u07DB\u07DD\x05\x9EP\x02" +
    "\u07DC\u07DB\x03\x02\x02\x02\u07DD\u07E0\x03\x02\x02\x02\u07DE\u07DC\x03" +
    "\x02\x02\x02\u07DE\u07DF\x03\x02\x02\x02\u07DF\xC5\x03\x02\x02\x02\u07E0" +
    "\u07DE\x03\x02\x02\x02\u07E1\u07E3\x05\xEAv\x02\u07E2\u07E4\x05n8\x02" +
    "\u07E3\u07E2\x03\x02\x02\x02\u07E3\u07E4\x03\x02\x02\x02\u07E4\u07E5\x03" +
    "\x02\x02\x02\u07E5\u07EA\x05\xC8e\x02\u07E6\u07E7\x07\x95\x02\x02\u07E7" +
    "\u07E9\x05\xC8e\x02\u07E8\u07E6\x03\x02\x02\x02\u07E9\u07EC\x03\x02\x02" +
    "\x02\u07EA\u07E8\x03\x02\x02\x02\u07EA\u07EB\x03\x02\x02\x02\u07EB\u07ED" +
    "\x03\x02\x02\x02\u07EC\u07EA\x03\x02\x02\x02\u07ED\u07EE\x07\xB7\x02\x02" +
    "\u07EE\u0866\x03\x02\x02\x02\u07EF\u07F1\x05\xECw\x02\u07F0\u07F2\x05" +
    "f4\x02\u07F1\u07F0\x03\x02\x02\x02\u07F1\u07F2\x03\x02\x02\x02\u07F2\u07F4" +
    "\x03\x02\x02\x02\u07F3\u07F5\x05n8\x02\u07F4\u07F3\x03\x02\x02\x02\u07F4" +
    "\u07F5\x03\x02\x02\x02\u07F5\u07F6\x03\x02\x02\x02\u07F6\u07FB\x05\xCA" +
    "f\x02\u07F7\u07F8\x07\x95\x02\x02\u07F8\u07FA\x05\xCAf\x02\u07F9\u07F7" +
    "\x03\x02\x02\x02\u07FA\u07FD\x03\x02\x02\x02\u07FB\u07F9\x03\x02\x02\x02" +
    "\u07FB\u07FC\x03\x02\x02\x02\u07FC\u07FE\x03\x02\x02\x02\u07FD\u07FB\x03" +
    "\x02\x02\x02\u07FE\u07FF\x07\xB7\x02\x02\u07FF\u0866\x03\x02\x02\x02\u0800" +
    "\u0802\x05\xEEx\x02\u0801\u0803\x05n8\x02\u0802\u0801\x03\x02\x02\x02" +
    "\u0802\u0803\x03\x02\x02\x02\u0803\u0804\x03\x02\x02\x02\u0804\u0809\x05" +
    "\xCCg\x02\u0805\u0806\x07\x95\x02\x02\u0806\u0808\x05\xCCg\x02\u0807\u0805" +
    "\x03\x02\x02\x02\u0808\u080B\x03\x02\x02\x02\u0809\u0807\x03\x02\x02\x02" +
    "\u0809\u080A\x03\x02\x02\x02\u080A\u080C\x03\x02\x02\x02\u080B\u0809\x03" +
    "\x02\x02\x02\u080C\u080D\x07\xB7\x02\x02\u080D\u0866\x03\x02\x02\x02\u080E" +
    "\u0810\x05\xF0y\x02\u080F\u0811\x05f4\x02\u0810\u080F\x03\x02\x02\x02" +
    "\u0810\u0811\x03\x02\x02\x02\u0811\u0813\x03\x02\x02\x02\u0812\u0814\x05" +
    "p9\x02\u0813\u0812\x03\x02\x02\x02\u0813\u0814\x03\x02\x02\x02\u0814\u0815" +
    "\x03\x02\x02\x02\u0815\u081A\x05\xCEh\x02\u0816\u0817\x07\x95\x02\x02" +
    "\u0817\u0819\x05\xCEh\x02\u0818\u0816\x03\x02\x02\x02\u0819\u081C\x03" +
    "\x02\x02\x02\u081A\u0818\x03\x02\x02\x02\u081A\u081B\x03\x02\x02\x02\u081B" +
    "\u081D\x03\x02\x02\x02\u081C\u081A\x03\x02\x02\x02\u081D\u081E\x07\xB7" +
    "\x02\x02\u081E\u0866\x03\x02\x02\x02\u081F\u0821\x05\xF2z\x02\u0820\u0822" +
    "\x05f4\x02\u0821\u0820\x03\x02\x02\x02\u0821\u0822\x03\x02\x02\x02\u0822" +
    "\u0824\x03\x02\x02\x02\u0823\u0825\x05p9\x02\u0824\u0823\x03\x02\x02\x02" +
    "\u0824\u0825\x03\x02\x02\x02\u0825\u0826\x03\x02\x02\x02\u0826\u082B\x05" +
    "\xD0i\x02\u0827\u0828\x07\x95\x02\x02\u0828\u082A\x05\xD0i\x02\u0829\u0827" +
    "\x03\x02\x02\x02\u082A\u082D\x03\x02\x02\x02\u082B\u0829\x03\x02\x02\x02" +
    "\u082B\u082C\x03\x02\x02\x02\u082C\u082E\x03\x02\x02\x02\u082D\u082B\x03" +
    "\x02\x02\x02\u082E\u082F\x07\xB7\x02\x02\u082F\u0866\x03\x02\x02\x02\u0830" +
    "\u0832\x05\xF4{\x02\u0831\u0833\x05p9\x02\u0832\u0831\x03\x02\x02\x02" +
    "\u0832\u0833\x03\x02\x02\x02\u0833\u0834\x03\x02\x02\x02\u0834\u0839\x05" +
    "\xD4k\x02\u0835\u0836\x07\x95\x02\x02\u0836\u0838\x05\xD4k\x02\u0837\u0835" +
    "\x03\x02\x02\x02\u0838\u083B\x03\x02\x02\x02\u0839\u0837\x03\x02\x02\x02" +
    "\u0839\u083A\x03\x02\x02\x02\u083A\u083C\x03\x02\x02\x02\u083B\u0839\x03" +
    "\x02\x02\x02\u083C\u083D\x07\xB7\x02\x02\u083D\u0866\x03\x02\x02\x02\u083E" +
    "\u083F\x05\xF6|\x02\u083F\u0844\x05\xD2j\x02\u0840\u0841\x07\x95\x02\x02" +
    "\u0841\u0843\x05\xD2j\x02\u0842\u0840\x03\x02\x02\x02\u0843\u0846\x03" +
    "\x02\x02\x02\u0844\u0842\x03\x02\x02\x02\u0844\u0845\x03\x02\x02\x02\u0845" +
    "\u0847\x03\x02\x02\x02\u0846\u0844\x03\x02\x02\x02\u0847\u0848\x07\xB7" +
    "\x02\x02\u0848\u0866\x03\x02\x02\x02\u0849\u084B\x07X\x02\x02\u084A\u084C" +
    "\x05\xDAn\x02\u084B\u084A\x03\x02\x02\x02\u084B\u084C\x03\x02\x02\x02" +
    "\u084C\u084D\x03\x02\x02\x02\u084D\u0852\x05\xD6l\x02\u084E\u084F\x07" +
    "\x95\x02\x02\u084F\u0851\x05\xD6l\x02\u0850\u084E\x03\x02\x02\x02\u0851" +
    "\u0854\x03\x02\x02\x02\u0852\u0850\x03\x02\x02\x02\u0852\u0853\x03\x02" +
    "\x02\x02\u0853\u0855\x03\x02\x02\x02\u0854\u0852\x03\x02\x02\x02\u0855" +
    "\u0856\x07\xB7\x02\x02\u0856\u0866\x03\x02\x02\x02\u0857\u0859\x07Z\x02" +
    "\x02\u0858\u085A\x05\xDCo\x02\u0859\u0858\x03\x02\x02\x02\u0859\u085A" +
    "\x03\x02\x02\x02\u085A\u085B\x03\x02\x02\x02\u085B\u0860\x05\xD6l\x02" +
    "\u085C\u085D\x07\x95\x02\x02\u085D\u085F\x05\xD6l\x02\u085E\u085C\x03" +
    "\x02\x02\x02\u085F\u0862\x03\x02\x02\x02\u0860\u085E\x03\x02\x02\x02\u0860" +
    "\u0861\x03\x02\x02\x02\u0861\u0863\x03\x02\x02\x02\u0862\u0860\x03\x02" +
    "\x02\x02\u0863\u0864\x07\xB7\x02\x02\u0864\u0866\x03\x02\x02\x02\u0865" +
    "\u07E1\x03\x02\x02\x02\u0865\u07EF\x03\x02\x02\x02\u0865\u0800\x03\x02" +
    "\x02\x02\u0865\u080E\x03\x02\x02\x02\u0865\u081F\x03\x02\x02\x02\u0865" +
    "\u0830\x03\x02\x02\x02\u0865\u083E\x03\x02\x02\x02\u0865\u0849\x03\x02" +
    "\x02\x02\u0865\u0857\x03\x02\x02\x02\u0866\xC7\x03\x02\x02\x02\u0867\u0869" +
    "\x05\xD8m\x02\u0868\u0867\x03\x02\x02\x02\u0868\u0869\x03\x02\x02\x02" +
    "\u0869\u086A\x03\x02\x02\x02\u086A\u086B\x07\xA8\x02\x02\u086B\u086C\x05" +
    "\xE6t\x02\u086C\u086D\x07\x95\x02\x02\u086D\u086E\x05\xE2r\x02\u086E\u086F" +
    "\x07\x95\x02\x02\u086F\u0870\x05\xE4s\x02\u0870\u0871\x07\x95\x02\x02" +
    "\u0871\u0872\x05\xE8u\x02\u0872\u0873\x07\xB6\x02\x02\u0873\xC9\x03\x02" +
    "\x02\x02\u0874\u0876\x05\xD8m\x02\u0875\u0874\x03\x02\x02\x02\u0875\u0876" +
    "\x03\x02\x02\x02\u0876\u0877\x03\x02\x02\x02\u0877\u0878\x07\xA8\x02\x02" +
    "\u0878\u0879\x05\xE6t\x02\u0879\u087A\x07\x95\x02\x02\u087A\u087B\x05" +
    "\xE2r\x02\u087B\u087C\x07\x95\x02\x02\u087C\u087D\x05\xDEp\x02\u087D\u087E" +
    "\x07\xB6\x02\x02\u087E\xCB\x03\x02\x02\x02\u087F\u0881\x05\xD8m\x02\u0880" +
    "\u087F\x03\x02\x02\x02\u0880\u0881\x03\x02\x02\x02\u0881\u0882\x03\x02" +
    "\x02\x02\u0882\u0883\x07\xA8\x02\x02\u0883\u0884\x05\xE6t\x02\u0884\u0885" +
    "\x07\x95\x02\x02\u0885\u0886\x05\xE2r\x02\u0886\u0887\x07\x95\x02\x02" +
    "\u0887\u0888\x05\xDEp\x02\u0888\u0889\x07\xB6\x02\x02\u0889\xCD\x03\x02" +
    "\x02\x02\u088A\u088C\x05\xD8m\x02\u088B\u088A\x03\x02\x02\x02\u088B\u088C" +
    "\x03\x02\x02\x02\u088C\u088D\x03\x02\x02\x02\u088D\u088E\x07\xA8\x02\x02" +
    "\u088E\u088F\x05\xE6t\x02\u088F\u0890\x07\x95\x02\x02\u0890\u0895\x05" +
    "\xE2r\x02\u0891\u0892\x07\x95\x02\x02\u0892\u0894\x05\xE2r\x02\u0893\u0891" +
    "\x03\x02\x02\x02\u0894\u0897\x03\x02\x02\x02\u0895\u0893\x03\x02\x02\x02" +
    "\u0895\u0896\x03\x02\x02\x02\u0896\u0898\x03\x02\x02\x02\u0897\u0895\x03" +
    "\x02\x02\x02\u0898\u0899\x07\xB6\x02\x02\u0899\xCF\x03\x02\x02\x02\u089A" +
    "\u089C\x05\xD8m\x02\u089B\u089A\x03\x02\x02\x02\u089B\u089C\x03\x02\x02" +
    "\x02\u089C\u089D\x03\x02\x02\x02\u089D\u089E\x07\xA8\x02\x02\u089E\u08A3" +
    "\x05\xE6t\x02\u089F\u08A0\x07\x95\x02\x02\u08A0\u08A2\x05\xE6t\x02\u08A1" +
    "\u089F\x03\x02\x02\x02\u08A2\u08A5\x03\x02\x02\x02\u08A3\u08A1\x03\x02" +
    "\x02\x02\u08A3\u08A4\x03\x02\x02\x02\u08A4\u08A6\x03\x02\x02\x02\u08A5" +
    "\u08A3\x03\x02\x02\x02\u08A6\u08A7\x07\x95\x02\x02\u08A7\u08A8\x05\xE2" +
    "r\x02\u08A8\u08A9\x07\xB6\x02\x02\u08A9\xD1\x03\x02\x02\x02\u08AA\u08AC" +
    "\x05\xD8m\x02\u08AB\u08AA\x03\x02\x02\x02\u08AB\u08AC\x03\x02\x02\x02" +
    "\u08AC\u08AD\x03\x02\x02\x02\u08AD\u08AE\x07\xA8\x02\x02\u08AE\u08AF\x05" +
    "\xE0q\x02\u08AF\u08B0\x07\x95\x02\x02\u08B0\u08B1\x05\xE0q\x02\u08B1\u08B2" +
    "\x07\xB6\x02\x02\u08B2\xD3\x03\x02\x02\x02\u08B3\u08B5\x05\xD8m\x02\u08B4" +
    "\u08B3\x03\x02\x02\x02\u08B4\u08B5\x03\x02\x02\x02\u08B5\u08B6\x03\x02" +
    "\x02\x02\u08B6\u08B7\x07\xA8\x02\x02\u08B7\u08B8\x05\xE0q\x02\u08B8\u08B9" +
    "\x07\x95\x02\x02\u08B9\u08BA\x05\xE0q\x02\u08BA\u08BB\x07\x95\x02\x02" +
    "\u08BB\u08BC\x05\xDEp\x02\u08BC\u08BD\x07\xB6\x02\x02\u08BD\xD5\x03\x02" +
    "\x02\x02\u08BE\u08C0\x05\xD8m\x02\u08BF\u08BE\x03\x02\x02\x02\u08BF\u08C0" +
    "\x03\x02\x02\x02\u08C0\u08C1\x03\x02\x02\x02\u08C1\u08C2\x07\xA8\x02\x02" +
    "\u08C2\u08C3\x05\xE6t\x02\u08C3\u08C4\x07\xB6\x02\x02\u08C4\xD7\x03\x02" +
    "\x02\x02\u08C5\u08C7\x05\u02CA\u0166\x02\u08C6\u08C8\x05\xA0Q\x02\u08C7" +
    "\u08C6\x03\x02\x02\x02\u08C7\u08C8\x03\x02\x02\x02\u08C8\xD9\x03\x02\x02" +
    "\x02\u08C9\u08CA\x07\xA8\x02\x02\u08CA\u08CB\x05h5\x02\u08CB\u08CC\x07" +
    "\x95\x02\x02\u08CC\u08CD\x05j6\x02\u08CD\u08CE\x07\xB6\x02\x02\u08CE\u08DA" +
    "\x03\x02\x02\x02\u08CF\u08D0\x07\xA8\x02\x02\u08D0\u08D1\x05j6\x02\u08D1" +
    "\u08D2\x07\x95\x02\x02\u08D2\u08D3\x05h5\x02\u08D3\u08D4\x07\xB6\x02\x02" +
    "\u08D4\u08DA\x03\x02\x02\x02\u08D5\u08D6\x07\xA8\x02\x02\u08D6\u08D7\x05" +
    "h5\x02\u08D7\u08D8\x07\xB6\x02\x02\u08D8\u08DA\x03\x02\x02\x02\u08D9\u08C9" +
    "\x03\x02\x02\x02\u08D9\u08CF\x03\x02\x02\x02\u08D9\u08D5\x03\x02\x02\x02" +
    "\u08DA\xDB\x03\x02\x02\x02\u08DB\u08DC\x07\xA8\x02\x02\u08DC\u08DD\x05" +
    "h5\x02\u08DD\u08DE\x07\x95\x02\x02\u08DE\u08DF\x05j6\x02\u08DF\u08E0\x07" +
    "\xB6\x02\x02\u08E0\u08EC\x03\x02\x02\x02\u08E1\u08E2\x07\xA8\x02\x02\u08E2" +
    "\u08E3\x05j6\x02\u08E3\u08E4\x07\x95\x02\x02\u08E4\u08E5\x05h5\x02\u08E5" +
    "\u08E6\x07\xB6\x02\x02\u08E6\u08EC\x03\x02\x02\x02\u08E7\u08E8\x07\xA8" +
    "\x02\x02\u08E8\u08E9\x05j6\x02\u08E9\u08EA\x07\xB6\x02\x02\u08EA\u08EC" +
    "\x03\x02\x02\x02\u08EB\u08DB\x03\x02\x02\x02\u08EB\u08E1\x03\x02\x02\x02" +
    "\u08EB\u08E7\x03\x02\x02\x02\u08EC\xDD\x03\x02\x02\x02\u08ED\u08EE\x05" +
    "\u026C\u0137\x02\u08EE\xDF\x03\x02\x02\x02\u08EF\u08F0\x05\u0286\u0144" +
    "\x02\u08F0\xE1\x03\x02\x02\x02\u08F1\u08F2\x05\u026C\u0137\x02\u08F2\xE3" +
    "\x03\x02\x02\x02\u08F3\u08F4\x05\u026C\u0137\x02\u08F4\xE5\x03\x02\x02" +
    "\x02\u08F5\u08F6\x05\u0286\u0144\x02\u08F6\xE7\x03\x02\x02\x02\u08F7\u08F8" +
    "\x05\u026C\u0137\x02\u08F8\xE9\x03\x02\x02\x02\u08F9\u08FA\t\t\x02\x02" +
    "\u08FA\xEB\x03\x02\x02\x02\u08FB\u08FC\t\n\x02\x02\u08FC\xED\x03\x02\x02" +
    "\x02\u08FD\u08FE\t\v\x02\x02\u08FE\xEF\x03\x02\x02\x02\u08FF\u0900\t\f" +
    "\x02\x02\u0900\xF1\x03\x02\x02\x02\u0901\u0902\t\r\x02\x02\u0902\xF3\x03" +
    "\x02\x02\x02\u0903\u0904\t\x0E\x02\x02\u0904\xF5\x03\x02\x02\x02\u0905" +
    "\u0906\t\x0F\x02\x02\u0906\xF7\x03\x02\x02\x02\u0907\u0909\x05\u02DC\u016F" +
    "\x02\u0908\u090A\x05\xFA~\x02\u0909\u0908\x03\x02\x02\x02\u0909\u090A" +
    "\x03\x02\x02\x02\u090A\u090B\x03\x02\x02\x02\u090B\u0910\x05\u0102\x82" +
    "\x02\u090C\u090D\x07\x95\x02\x02\u090D\u090F\x05\u0102\x82\x02\u090E\u090C" +
    "\x03\x02\x02\x02\u090F\u0912\x03\x02\x02\x02\u0910\u090E\x03\x02\x02\x02" +
    "\u0910\u0911\x03\x02\x02\x02\u0911\u0913\x03\x02\x02\x02\u0912\u0910\x03" +
    "\x02\x02\x02\u0913\u0914\x07\xB7\x02\x02\u0914\xF9\x03\x02\x02\x02\u0915" +
    "\u0916\x07\xA5\x02\x02\u0916\u0917\x07\xA8\x02\x02\u0917\u0918\x05\xFC" +
    "\x7F\x02\u0918\u0919\x07\xB6\x02\x02\u0919\xFB\x03\x02\x02\x02\u091A\u091F" +
    "\x05\xFE\x80\x02\u091B\u091C\x07\x95\x02\x02\u091C\u091E\x05\xFE\x80\x02" +
    "\u091D\u091B\x03\x02\x02\x02\u091E\u0921\x03\x02\x02\x02\u091F\u091D\x03" +
    "\x02\x02\x02\u091F\u0920\x03\x02\x02\x02\u0920\u092B\x03\x02\x02\x02\u0921" +
    "\u091F\x03\x02\x02\x02\u0922\u0927\x05\u0100\x81\x02\u0923\u0924\x07\x95" +
    "\x02\x02\u0924\u0926\x05\u0100\x81\x02\u0925\u0923\x03\x02\x02\x02\u0926" +
    "\u0929\x03\x02\x02\x02\u0927\u0925\x03\x02\x02\x02\u0927\u0928\x03\x02" +
    "\x02\x02\u0928\u092B\x03\x02\x02\x02\u0929\u0927\x03\x02\x02\x02\u092A" +
    "\u091A\x03\x02\x02\x02\u092A\u0922\x03\x02\x02\x02\u092B\xFD\x03\x02\x02" +
    "\x02\u092C\u092D\x05\u026C\u0137\x02\u092D\xFF\x03\x02\x02\x02\u092E\u092F" +
    "\x07\x98\x02\x02\u092F\u0930\x05\u02E4\u0173\x02\u0930\u0932\x07\xA8\x02" +
    "\x02\u0931\u0933\x05\u0270\u0139\x02\u0932\u0931\x03\x02\x02\x02\u0932" +
    "\u0933\x03\x02\x02\x02\u0933\u0934\x03\x02\x02\x02\u0934\u0935\x07\xB6" +
    "\x02\x02\u0935\u0101\x03\x02\x02\x02\u0936\u0937\x05\u0104\x83\x02\u0937" +
    "\u0938\x07\xA8\x02\x02\u0938\u0939\x05\u0106\x84\x02\u0939\u093A\x07\xB6" +
    "\x02\x02\u093A\u0103\x03\x02\x02\x02\u093B\u093D\x05\u02DE\u0170\x02\u093C" +
    "\u093E\x05\xA0Q\x02\u093D\u093C\x03\x02\x02\x02\u093D\u093E\x03\x02\x02" +
    "\x02\u093E\u0105\x03\x02\x02\x02\u093F\u0944\x05\u0108\x85\x02\u0940\u0941" +
    "\x07\x95\x02\x02\u0941\u0943\x05\u0108\x85\x02\u0942\u0940\x03\x02\x02" +
    "\x02\u0943\u0946\x03\x02\x02\x02\u0944\u0942\x03\x02\x02\x02\u0944\u0945" +
    "\x03\x02\x02\x02\u0945\u0950\x03\x02\x02\x02\u0946\u0944\x03\x02\x02\x02" +
    "\u0947\u094C\x05\u010A\x86\x02\u0948\u0949\x07\x95\x02\x02\u0949\u094B" +
    "\x05\u010A\x86\x02\u094A\u0948\x03\x02\x02\x02\u094B\u094E\x03\x02\x02" +
    "\x02\u094C\u094A\x03\x02\x02\x02\u094C\u094D\x03\x02\x02\x02\u094D\u0950" +
    "\x03\x02\x02\x02\u094E\u094C\x03\x02\x02\x02\u094F\u093F\x03\x02\x02\x02" +
    "\u094F\u0947\x03\x02\x02\x02\u0950\u0107\x03\x02\x02\x02\u0951\u0953\x05" +
    "\u02B8\u015D\x02\u0952\u0951\x03\x02\x02\x02\u0953\u0956\x03\x02\x02\x02" +
    "\u0954\u0952\x03\x02\x02\x02\u0954\u0955\x03\x02\x02\x02\u0955\u0958\x03" +
    "\x02\x02\x02\u0956\u0954\x03\x02\x02\x02\u0957\u0959\x05\u026C\u0137\x02" +
    "\u0958\u0957\x03\x02\x02\x02\u0958\u0959\x03\x02\x02\x02\u0959\u0109\x03" +
    "\x02\x02\x02\u095A\u095C\x05\u02B8\u015D\x02\u095B\u095A\x03\x02\x02\x02" +
    "\u095C\u095F\x03\x02\x02\x02\u095D\u095B\x03\x02\x02\x02\u095D\u095E\x03" +
    "\x02\x02\x02\u095E\u0960\x03\x02\x02\x02\u095F\u095D\x03\x02\x02\x02\u0960" +
    "\u0961\x07\x98\x02\x02\u0961\u0962\x05\u02E6\u0174\x02\u0962\u0964\x07" +
    "\xA8\x02\x02\u0963\u0965\x05\u026C\u0137\x02\u0964\u0963\x03\x02\x02\x02" +
    "\u0964\u0965\x03\x02\x02\x02\u0965\u0966\x03\x02\x02\x02\u0966\u0967\x07" +
    "\xB6\x02\x02\u0967\u010B\x03\x02\x02\x02\u0968\u096C\x074\x02\x02\u0969" +
    "\u096B\x05(\x15\x02\u096A\u0969\x03\x02\x02\x02\u096B\u096E\x03\x02\x02" +
    "\x02\u096C\u096A\x03\x02\x02\x02\u096C\u096D\x03\x02\x02\x02\u096D\u096F" +
    "\x03\x02\x02\x02\u096E\u096C\x03\x02\x02\x02\u096F\u0970\x07(\x02\x02" +
    "\u0970\u010D\x03\x02\x02\x02\u0971\u0972\x075\x02\x02\u0972\u0973\x05" +
    "\u0110\x89\x02\u0973\u0974\x07\xB7\x02\x02\u0974\u010F\x03\x02\x02\x02" +
    "\u0975\u097A\x05\u02CE\u0168\x02\u0976\u0977\x07\x95\x02\x02\u0977\u0979" +
    "\x05\u02CE\u0168\x02\u0978\u0976\x03\x02\x02\x02\u0979\u097C\x03\x02\x02" +
    "\x02\u097A\u0978\x03\x02\x02\x02\u097A\u097B\x03\x02\x02\x02\u097B\u0111" +
    "\x03\x02\x02\x02\u097C\u097A\x03\x02\x02\x02\u097D\u097E\x07/\x02\x02" +
    "\u097E\u097F\x07\xA8\x02\x02\u097F\u0980\x05\u0114\x8B\x02\u0980\u0981" +
    "\x07\xB7\x02\x02\u0981\u0982\x05\u0116\x8C\x02\u0982\u0983\x07\xB7\x02" +
    "\x02\u0983\u0984\x05\u0118\x8D\x02\u0984\u0985\x07\xB6\x02\x02\u0985\u0986" +
    "\x05\u0122\x92\x02\u0986\u0113\x03\x02\x02\x02\u0987\u0988\x05\u02CE\u0168" +
    "\x02\u0988\u0989\x07\x9C\x02\x02\u0989\u098A\x05\u0264\u0133\x02\u098A" +
    "\u0115\x03\x02\x02\x02\u098B\u098C\x05\u0264\u0133\x02\u098C\u0117\x03" +
    "\x02\x02\x02\u098D\u098E\x05\u02CE\u0168\x02\u098E\u098F\x07\x9C\x02\x02" +
    "\u098F\u0990\x05\u0116\x8C\x02\u0990\u0119\x03\x02\x02\x02\u0991\u0994" +
    "\x05\u011C\x8F\x02\u0992\u0994\x05\u011E\x90\x02\u0993\u0991\x03\x02\x02" +
    "\x02\u0993\u0992\x03\x02\x02\x02\u0994\u011B\x03\x02\x02\x02\u0995\u0996" +
    "\x078\x02\x02\u0996\u0997\x07\xA8\x02\x02\u0997\u0998\x05\u0264\u0133" +
    "\x02\u0998\u0999\x07\xB6\x02\x02\u0999\u099C\x05\u0126\x94\x02\u099A\u099B" +
    "\x07#\x02\x02\u099B\u099D\x05\u0126\x94\x02\u099C\u099A\x03\x02\x02\x02" +
    "\u099C\u099D\x03\x02\x02\x02\u099D\u011D\x03\x02\x02\x02\u099E\u099F\x07" +
    "\v\x02\x02\u099F\u09A0\x07\xA8";
  private static readonly _serializedATNSegment5: string =
    "\x02\x02\u09A0\u09A1\x05\u0264\u0133\x02\u09A1\u09A3\x07\xB6\x02\x02\u09A2" +
    "\u09A4\x05\u0120\x91\x02\u09A3\u09A2\x03\x02\x02\x02\u09A4\u09A5\x03\x02" +
    "\x02\x02\u09A5\u09A3\x03\x02\x02\x02\u09A5\u09A6\x03\x02\x02\x02\u09A6" +
    "\u09A7\x03\x02\x02\x02\u09A7\u09A8\x07%\x02\x02\u09A8\u011F\x03\x02\x02" +
    "\x02\u09A9\u09AE\x05\u0264\u0133\x02\u09AA\u09AB\x07\x95\x02\x02\u09AB" +
    "\u09AD\x05\u0264\u0133\x02\u09AC\u09AA\x03\x02\x02\x02\u09AD\u09B0\x03" +
    "\x02\x02\x02\u09AE\u09AC\x03\x02\x02\x02\u09AE\u09AF\x03\x02\x02\x02\u09AF" +
    "\u09B1\x03\x02\x02\x02\u09B0\u09AE\x03\x02\x02\x02\u09B1\u09B2\x07\x94" +
    "\x02\x02\u09B2\u09B3\x05\u0126\x94\x02\u09B3\u09BA\x03\x02\x02\x02\u09B4" +
    "\u09B6\x07\x12\x02\x02\u09B5\u09B7\x07\x94\x02\x02\u09B6\u09B5\x03\x02" +
    "\x02\x02\u09B6\u09B7\x03\x02\x02\x02\u09B7\u09B8\x03\x02\x02\x02\u09B8" +
    "\u09BA\x05\u0126\x94\x02\u09B9\u09A9\x03\x02\x02\x02\u09B9\u09B4\x03\x02" +
    "\x02\x02\u09BA\u0121\x03\x02\x02\x02\u09BB\u09C8\x05(\x15\x02\u09BC\u09BE" +
    "\x07\x07\x02\x02\u09BD\u09BF\x05\u0124\x93\x02\u09BE\u09BD\x03\x02\x02" +
    "\x02\u09BE\u09BF\x03\x02\x02\x02\u09BF\u09C3\x03\x02\x02\x02\u09C0\u09C2" +
    "\x05(\x15\x02\u09C1\u09C0\x03\x02\x02\x02\u09C2\u09C5\x03\x02\x02\x02" +
    "\u09C3\u09C1\x03\x02\x02\x02\u09C3\u09C4\x03\x02\x02\x02\u09C4\u09C6\x03" +
    "\x02\x02\x02\u09C5\u09C3\x03\x02\x02\x02\u09C6\u09C8\x07$\x02\x02\u09C7" +
    "\u09BB\x03\x02\x02\x02\u09C7\u09BC\x03\x02\x02\x02\u09C8\u0123\x03\x02" +
    "\x02\x02\u09C9\u09CA\x07\x94\x02\x02\u09CA\u09CB\x05\u02CC\u0167\x02\u09CB" +
    "\u0125\x03\x02\x02\x02\u09CC\u09CF\x05\u0122\x92\x02\u09CD\u09CF\x07\xB7" +
    "\x02\x02\u09CE\u09CC\x03\x02\x02\x02\u09CE\u09CD\x03\x02\x02\x02\u09CF" +
    "\u0127\x03\x02\x02\x02\u09D0\u09D2\x05\u02B8\u015D\x02\u09D1\u09D0\x03" +
    "\x02\x02\x02\u09D2\u09D5\x03\x02\x02\x02\u09D3\u09D1\x03\x02\x02\x02\u09D3" +
    "\u09D4\x03\x02\x02\x02\u09D4\u09D6\x03\x02\x02\x02\u09D5\u09D3\x03\x02" +
    "\x02\x02\u09D6\u09D7\x07W\x02\x02\u09D7\u09D8\x05\u02F8\u017D\x02\u09D8" +
    "\u09D9\x07\xA8\x02\x02\u09D9\u09DA\x05\u012A\x96\x02\u09DA\u09DB\x07\xB6" +
    "\x02\x02\u09DB\u09DD\x07\xB7\x02\x02\u09DC\u09DE\x05\u012E\x98\x02\u09DD" +
    "\u09DC\x03\x02\x02\x02\u09DE\u09DF\x03\x02\x02\x02\u09DF\u09DD\x03\x02" +
    "\x02\x02\u09DF\u09E0\x03\x02\x02\x02\u09E0\u09E1\x03\x02\x02\x02\u09E1" +
    "\u09E2\x05\u0136\x9C\x02\u09E2\u09E3\x07*\x02\x02\u09E3\u09F4\x03\x02" +
    "\x02\x02\u09E4\u09E6\x05\u02B8\u015D\x02\u09E5\u09E4\x03\x02\x02\x02\u09E6" +
    "\u09E9\x03\x02\x02\x02\u09E7\u09E5\x03\x02\x02\x02\u09E7\u09E8\x03\x02" +
    "\x02\x02\u09E8\u09EA\x03\x02\x02\x02\u09E9\u09E7\x03\x02\x02\x02\u09EA" +
    "\u09EB\x07W\x02\x02\u09EB\u09EC\x05\u02F8\u017D\x02\u09EC\u09ED\x07\xA8" +
    "\x02\x02\u09ED\u09EE\x05\u012C\x97\x02\u09EE\u09EF\x07\xB6\x02\x02\u09EF" +
    "\u09F0\x07\xB7\x02\x02\u09F0\u09F1\x05\u0136\x9C\x02\u09F1\u09F2\x07*" +
    "\x02\x02\u09F2\u09F4\x03\x02\x02\x02\u09F3\u09D3\x03\x02\x02\x02\u09F3" +
    "\u09E7\x03\x02\x02\x02\u09F4\u0129\x03\x02\x02\x02\u09F5\u09F6\x05\u02E2" +
    "\u0172\x02\u09F6\u09F7\x07\x95\x02\x02\u09F7\u09FC\x05\u02D6\u016C\x02" +
    "\u09F8\u09F9\x07\x95\x02\x02\u09F9\u09FB\x05\u02D6\u016C\x02\u09FA\u09F8" +
    "\x03\x02\x02\x02\u09FB\u09FE\x03\x02\x02\x02\u09FC\u09FA\x03\x02\x02\x02" +
    "\u09FC\u09FD\x03\x02\x02\x02\u09FD\u012B\x03\x02\x02\x02\u09FE\u09FC\x03" +
    "\x02\x02\x02\u09FF\u0A00\x05\u0130\x99\x02\u0A00\u0A01\x07\x95\x02\x02" +
    "\u0A01\u0A06\x05\u0132\x9A\x02\u0A02\u0A03\x07\x95\x02\x02\u0A03\u0A05" +
    "\x05\u0132\x9A\x02\u0A04\u0A02\x03\x02\x02\x02\u0A05\u0A08\x03\x02\x02" +
    "\x02\u0A06\u0A04\x03\x02\x02\x02\u0A06\u0A07\x03\x02\x02\x02\u0A07\u012D" +
    "\x03\x02\x02\x02\u0A08\u0A06\x03\x02\x02\x02\u0A09\u0A0A\x05\u0130\x99" +
    "\x02\u0A0A\u0A0B\x07\xB7\x02\x02\u0A0B\u0A13\x03\x02\x02\x02\u0A0C\u0A0D" +
    "\x05\u0132\x9A\x02\u0A0D\u0A0E\x07\xB7\x02\x02\u0A0E\u0A13\x03\x02\x02" +
    "\x02\u0A0F\u0A10\x05\u0134\x9B\x02\u0A10\u0A11\x07\xB7\x02\x02\u0A11\u0A13" +
    "\x03\x02\x02\x02\u0A12\u0A09\x03\x02\x02\x02\u0A12\u0A0C\x03\x02\x02\x02" +
    "\u0A12\u0A0F\x03\x02\x02\x02\u0A13\u012F\x03\x02\x02\x02\u0A14\u0A16\x05" +
    "\u02B8\u015D\x02\u0A15\u0A14\x03\x02\x02\x02\u0A16\u0A19\x03\x02\x02\x02" +
    "\u0A17\u0A15\x03\x02\x02\x02\u0A17\u0A18\x03\x02\x02\x02\u0A18\u0A1A\x03" +
    "\x02\x02\x02\u0A19\u0A17\x03\x02\x02\x02\u0A1A\u0A1B\x07R\x02\x02\u0A1B" +
    "\u0A2A\x05\u02E6\u0174\x02\u0A1C\u0A1E\x05\u02B8\u015D\x02\u0A1D\u0A1C" +
    "\x03\x02\x02\x02\u0A1E\u0A21\x03\x02\x02\x02\u0A1F\u0A1D\x03\x02\x02\x02" +
    "\u0A1F\u0A20\x03\x02\x02\x02\u0A20\u0A22\x03\x02\x02\x02\u0A21\u0A1F\x03" +
    "\x02\x02\x02\u0A22\u0A23\x07R\x02\x02\u0A23\u0A24\x07a\x02\x02\u0A24\u0A27" +
    "\x05\u02E6\u0174\x02\u0A25\u0A26\x07\x9C\x02\x02\u0A26\u0A28\x05\u0264" +
    "\u0133\x02\u0A27\u0A25\x03\x02\x02\x02\u0A27\u0A28\x03\x02\x02\x02\u0A28" +
    "\u0A2A\x03\x02\x02\x02\u0A29\u0A17\x03\x02\x02\x02\u0A29\u0A1F\x03\x02" +
    "\x02\x02\u0A2A\u0131\x03\x02\x02\x02\u0A2B\u0A2D\x05\u02B8\u015D\x02\u0A2C" +
    "\u0A2B\x03\x02\x02\x02\u0A2D\u0A30\x03\x02\x02\x02\u0A2E\u0A2C\x03\x02" +
    "\x02\x02\u0A2E\u0A2F\x03\x02\x02\x02\u0A2F\u0A31\x03\x02\x02\x02\u0A30" +
    "\u0A2E\x03\x02\x02\x02\u0A31\u0A32\x07=\x02\x02\u0A32\u0A33\x05\x82B\x02" +
    "\u0A33\u0133\x03\x02\x02\x02\u0A34\u0A36\x05\u02B8\u015D\x02\u0A35\u0A34" +
    "\x03\x02\x02\x02\u0A36\u0A39\x03\x02\x02\x02\u0A37\u0A35\x03\x02\x02\x02" +
    "\u0A37\u0A38\x03\x02\x02\x02\u0A38\u0A3A\x03\x02\x02\x02\u0A39\u0A37\x03" +
    "\x02\x02\x02\u0A3A\u0A3B\x07a\x02\x02\u0A3B\u0A3C\x05\u02FC\u017F\x02" +
    "\u0A3C\u0135\x03\x02\x02\x02\u0A3D\u0A40\x05\u0138\x9D\x02\u0A3E\u0A40" +
    "\x05\u013C\x9F\x02\u0A3F\u0A3D\x03\x02\x02\x02\u0A3F\u0A3E\x03\x02\x02" +
    "\x02\u0A40\u0137\x03\x02\x02\x02\u0A41\u0A43\x07s\x02\x02\u0A42\u0A44" +
    "\x05\u013A\x9E\x02\u0A43\u0A42\x03\x02\x02\x02\u0A44\u0A45\x03\x02\x02" +
    "\x02\u0A45\u0A43\x03\x02\x02\x02\u0A45\u0A46\x03\x02\x02\x02\u0A46\u0A47" +
    "\x03\x02\x02\x02\u0A47\u0A48\x07,\x02\x02\u0A48\u0139\x03\x02\x02\x02" +
    "\u0A49\u0A4A\x05\u0146\xA4\x02\u0A4A\u0A4B\x07\x94\x02\x02\u0A4B\u0A4C" +
    "\x05\u0150\xA9\x02\u0A4C\u0A4D\x07\xB7\x02\x02\u0A4D\u013B\x03\x02\x02" +
    "\x02\u0A4E\u0A50\x05\u013E\xA0\x02\u0A4F\u0A4E\x03\x02\x02\x02\u0A4F\u0A50" +
    "\x03\x02\x02\x02\u0A50\u0A51\x03\x02\x02\x02\u0A51\u0A53\x07s\x02\x02" +
    "\u0A52\u0A54\x05\u0142\xA2\x02\u0A53\u0A52\x03\x02\x02\x02\u0A54\u0A55" +
    "\x03\x02\x02\x02\u0A55\u0A53\x03\x02\x02\x02\u0A55\u0A56\x03\x02\x02\x02" +
    "\u0A56\u0A57\x03\x02\x02\x02\u0A57\u0A58\x07,\x02\x02\u0A58\u013D\x03" +
    "\x02\x02\x02\u0A59\u0A5A\x07;\x02\x02\u0A5A\u0A5B\x05\u02E2\u0172\x02" +
    "\u0A5B\u0A5C\x07\x9C\x02\x02\u0A5C\u0A5D\x05\u0140\xA1\x02\u0A5D\u0A5E" +
    "\x07\xB7\x02\x02\u0A5E\u013F\x03\x02\x02\x02\u0A5F\u0A62\x05\u0298\u014D" +
    "\x02\u0A60\u0A62\x05\u02A4\u0153\x02\u0A61\u0A5F\x03\x02\x02\x02\u0A61" +
    "\u0A60\x03\x02\x02\x02\u0A62\u0141\x03\x02\x02\x02\u0A63\u0A64\x05\u0144" +
    "\xA3\x02\u0A64\u0A65\x07\x94\x02\x02\u0A65\u0A66\x05\u014C\xA7\x02\u0A66" +
    "\u0A67\x07\x94\x02\x02\u0A67\u0A68\x05\u014E\xA8\x02\u0A68\u0A69\x07\xB7" +
    "\x02\x02\u0A69\u0143\x03\x02\x02\x02\u0A6A\u0A6D\x05\u0146\xA4\x02\u0A6B" +
    "\u0A6D\x05\u0148\xA5\x02\u0A6C\u0A6A\x03\x02\x02\x02\u0A6C\u0A6B\x03\x02" +
    "\x02\x02\u0A6D\u0145\x03\x02\x02\x02\u0A6E\u0A70\x05\u0152\xAA\x02\u0A6F" +
    "\u0A6E\x03\x02\x02\x02\u0A70\u0A71\x03\x02\x02\x02\u0A71\u0A6F\x03\x02" +
    "\x02\x02\u0A71\u0A72\x03\x02\x02\x02\u0A72\u0147\x03\x02\x02\x02\u0A73" +
    "\u0A75\x05\u0152\xAA\x02\u0A74\u0A73\x03\x02\x02\x02\u0A75\u0A78\x03\x02" +
    "\x02\x02\u0A76\u0A74\x03\x02\x02\x02\u0A76\u0A77\x03\x02\x02\x02\u0A77" +
    "\u0A79\x03\x02\x02\x02\u0A78\u0A76\x03\x02\x02\x02\u0A79\u0A7D\x05\u014A" +
    "\xA6\x02\u0A7A\u0A7C\x05\u0152\xAA\x02\u0A7B\u0A7A\x03\x02\x02\x02\u0A7C" +
    "\u0A7F\x03\x02\x02\x02\u0A7D\u0A7B\x03\x02\x02\x02\u0A7D\u0A7E\x03\x02" +
    "\x02\x02\u0A7E\u0149\x03\x02\x02\x02\u0A7F\u0A7D\x03\x02\x02\x02\u0A80" +
    "\u0A81\x07\xA8\x02\x02\u0A81\u0A82\x05\u0152\xAA\x02\u0A82\u0A83\x05\u0152" +
    "\xAA\x02\u0A83\u0A84\x07\xB6\x02\x02\u0A84\u0A87\x03\x02\x02\x02\u0A85" +
    "\u0A87\x05\u0154\xAB\x02\u0A86\u0A80\x03\x02\x02\x02\u0A86\u0A85\x03\x02" +
    "\x02\x02\u0A87\u014B\x03\x02\x02\x02\u0A88\u0A89\x05\u0152\xAA\x02\u0A89" +
    "\u014D\x03\x02\x02\x02\u0A8A\u0A8D\x05\u0150\xA9\x02\u0A8B\u0A8D\x07\xAD" +
    "\x02\x02\u0A8C\u0A8A\x03\x02\x02\x02\u0A8C\u0A8B\x03\x02\x02\x02\u0A8D" +
    "\u014F\x03\x02\x02\x02\u0A8E\u0A8F\x07\xD5\x02\x02\u0A8F\u0151\x03\x02" +
    "\x02\x02\u0A90\u0A91\t\x10\x02\x02\u0A91\u0153\x03\x02\x02\x02\u0A92\u0A93" +
    "\x07\xD3\x02\x02\u0A93\u0155\x03\x02\x02\x02\u0A94\u0A96\x05\u02F8\u017D" +
    "\x02\u0A95\u0A97\x05f4\x02\u0A96\u0A95\x03\x02\x02\x02\u0A96\u0A97\x03" +
    "\x02\x02\x02\u0A97\u0A99\x03\x02\x02\x02\u0A98\u0A9A\x05p9\x02\u0A99\u0A98" +
    "\x03\x02\x02\x02\u0A99\u0A9A\x03\x02\x02\x02\u0A9A\u0A9B\x03\x02\x02\x02" +
    "\u0A9B\u0AA0\x05\u0158\xAD\x02\u0A9C\u0A9D\x07\x95\x02\x02\u0A9D\u0A9F" +
    "\x05\u0158\xAD\x02\u0A9E\u0A9C\x03\x02\x02\x02\u0A9F\u0AA2\x03\x02\x02" +
    "\x02\u0AA0\u0A9E\x03\x02\x02\x02\u0AA0\u0AA1\x03\x02\x02\x02\u0AA1\u0AA3" +
    "\x03\x02\x02\x02\u0AA2\u0AA0\x03\x02\x02\x02\u0AA3\u0AA4\x07\xB7\x02\x02" +
    "\u0AA4\u0157\x03\x02\x02\x02\u0AA5\u0AA7\x05\u015A\xAE\x02\u0AA6\u0AA5" +
    "\x03\x02\x02\x02\u0AA6\u0AA7\x03\x02\x02\x02\u0AA7\u0AA8\x03\x02\x02\x02" +
    "\u0AA8\u0AA9\x07\xA8\x02\x02\u0AA9\u0AAA\x05\xE6t\x02\u0AAA\u0AAB\x07" +
    "\x95\x02\x02\u0AAB\u0AB0\x05\xE2r\x02\u0AAC\u0AAD\x07\x95\x02\x02\u0AAD" +
    "\u0AAF\x05\xE2r\x02\u0AAE\u0AAC\x03\x02\x02\x02\u0AAF\u0AB2\x03\x02\x02" +
    "\x02\u0AB0\u0AAE\x03\x02\x02\x02\u0AB0\u0AB1\x03\x02\x02\x02\u0AB1\u0AB3" +
    "\x03\x02\x02\x02\u0AB2\u0AB0\x03\x02\x02\x02\u0AB3\u0AB4\x07\xB6\x02\x02" +
    "\u0AB4\u0159\x03\x02\x02\x02\u0AB5\u0AB7\x05\u02FA\u017E\x02\u0AB6\u0AB8" +
    "\x05\xA0Q\x02\u0AB7\u0AB6\x03\x02\x02\x02\u0AB7\u0AB8\x03\x02\x02\x02" +
    "\u0AB8\u015B\x03\x02\x02\x02\u0AB9\u0ABB\x07\x05\x02\x02\u0ABA\u0ABC\x05" +
    "f4\x02\u0ABB\u0ABA\x03\x02\x02\x02\u0ABB\u0ABC\x03\x02\x02\x02\u0ABC\u0ABE" +
    "\x03\x02\x02\x02\u0ABD\u0ABF\x05n8\x02\u0ABE\u0ABD\x03\x02\x02\x02\u0ABE" +
    "\u0ABF\x03\x02\x02\x02\u0ABF\u0AC0\x03\x02\x02\x02\u0AC0\u0AC1\x05\u015E" +
    "\xB0\x02\u0AC1\u0AC2\x07\xB7\x02\x02\u0AC2\u015D\x03\x02\x02\x02\u0AC3" +
    "\u0AC8\x05\u0160\xB1\x02\u0AC4\u0AC5\x07\x95\x02\x02\u0AC5\u0AC7\x05\u0160" +
    "\xB1\x02\u0AC6\u0AC4\x03\x02\x02\x02\u0AC7\u0ACA\x03\x02\x02\x02\u0AC8" +
    "\u0AC6\x03\x02\x02\x02\u0AC8\u0AC9\x03\x02\x02\x02\u0AC9\u015F\x03\x02" +
    "\x02\x02\u0ACA\u0AC8\x03\x02\x02\x02\u0ACB\u0ACC\x05\u0286\u0144\x02\u0ACC" +
    "\u0ACD\x07\x9C\x02\x02\u0ACD\u0ACE\x05\u026C\u0137\x02\u0ACE\u0161\x03" +
    "\x02\x02\x02\u0ACF\u0AD0\x07;\x02\x02\u0AD0\u0AD1\x05\u0174\xBB\x02\u0AD1" +
    "\u0163\x03\x02\x02\x02\u0AD2\u0AD3\x07\x03\x02\x02\u0AD3\u0AD4\x05\u0174" +
    "\xBB\x02\u0AD4\u0165\x03\x02\x02\x02\u0AD5\u0AD6\x05\u028C\u0147\x02\u0AD6" +
    "\u0AD8\x07\x9C\x02\x02\u0AD7\u0AD9\x05\u017C\xBF\x02\u0AD8\u0AD7\x03\x02" +
    "\x02\x02\u0AD8\u0AD9\x03\x02\x02\x02\u0AD9\u0ADA\x03\x02\x02\x02\u0ADA" +
    "\u0ADB\x05\u026C\u0137\x02\u0ADB\u0167\x03\x02\x02\x02\u0ADC\u0ADD\x05" +
    "\u028C\u0147\x02\u0ADD\u0ADF\x07\xAA\x02\x02\u0ADE\u0AE0\x05\u017C\xBF" +
    "\x02\u0ADF\u0ADE\x03\x02\x02\x02\u0ADF\u0AE0\x03\x02\x02\x02\u0AE0\u0AE1" +
    "\x03\x02\x02\x02\u0AE1\u0AE2\x05\u026C\u0137\x02\u0AE2\u0169\x03\x02\x02" +
    "\x02\u0AE3\u0AE4\x07\x05\x02\x02\u0AE4\u0AEC\x05\u016C\xB7\x02\u0AE5\u0AE6" +
    "\x07\x11\x02\x02\u0AE6\u0AEC\x05\u028C\u0147\x02\u0AE7\u0AE8\x070\x02" +
    "\x02\u0AE8\u0AEC\x05\u016C\xB7\x02\u0AE9\u0AEA\x07b\x02\x02\u0AEA\u0AEC" +
    "\x05\u028C\u0147\x02\u0AEB\u0AE3\x03\x02\x02\x02\u0AEB\u0AE5\x03\x02\x02" +
    "\x02\u0AEB\u0AE7\x03\x02\x02\x02\u0AEB\u0AE9\x03\x02\x02\x02\u0AEC\u016B" +
    "\x03\x02\x02\x02\u0AED\u0AEE\x05\u028C\u0147\x02\u0AEE\u0AEF\x07\x9C\x02" +
    "\x02\u0AEF\u0AF0\x05\u026C\u0137\x02\u0AF0\u016D\x03\x02\x02\x02\u0AF1" +
    "\u0AF9\x072\x02\x02\u0AF2\u0AF6\x05\u0170\xB9\x02\u0AF3\u0AF5\x05\xBC" +
    "_\x02\u0AF4\u0AF3\x03\x02\x02\x02\u0AF5\u0AF8\x03\x02\x02\x02\u0AF6\u0AF4" +
    "\x03\x02\x02\x02\u0AF6\u0AF7\x03\x02\x02\x02\u0AF7\u0AFA\x03\x02\x02\x02" +
    "\u0AF8\u0AF6\x03\x02\x02\x02\u0AF9\u0AF2\x03\x02\x02\x02\u0AF9\u0AFA\x03" +
    "\x02\x02\x02\u0AFA\u0AFE\x03\x02\x02\x02\u0AFB\u0AFD\x05\u0174\xBB\x02" +
    "\u0AFC\u0AFB\x03\x02\x02\x02\u0AFD\u0B00\x03\x02\x02\x02\u0AFE\u0AFC\x03" +
    "\x02\x02\x02\u0AFE\u0AFF\x03\x02\x02\x02\u0AFF\u0B01\x03\x02\x02\x02\u0B00" +
    "\u0AFE\x03\x02\x02\x02\u0B01\u0B02\x07@\x02\x02\u0B02\u016F\x03\x02\x02" +
    "\x02\u0B03\u0B04\x07\x94\x02\x02\u0B04\u0B05\x05\u02BE\u0160\x02\u0B05" +
    "\u0171\x03\x02\x02\x02\u0B06\u0B0E\x07\x07\x02\x02\u0B07\u0B0B\x05\u0170" +
    "\xB9\x02\u0B08\u0B0A\x05\xBC_\x02\u0B09\u0B08\x03\x02\x02\x02\u0B0A\u0B0D" +
    "\x03\x02\x02\x02\u0B0B\u0B09\x03\x02\x02\x02\u0B0B\u0B0C\x03\x02\x02\x02" +
    "\u0B0C\u0B0F\x03\x02\x02\x02\u0B0D\u0B0B\x03\x02\x02\x02\u0B0E\u0B07\x03" +
    "\x02\x02\x02\u0B0E\u0B0F\x03\x02\x02\x02\u0B0F\u0B13\x03\x02\x02\x02\u0B10" +
    "\u0B12\x05\u0174\xBB\x02\u0B11\u0B10\x03\x02\x02\x02\u0B12\u0B15\x03\x02" +
    "\x02\x02\u0B13\u0B11\x03\x02\x02\x02\u0B13\u0B14\x03\x02\x02\x02\u0B14" +
    "\u0B16\x03\x02\x02\x02\u0B15\u0B13\x03\x02\x02\x02\u0B16\u0B17\x07$\x02" +
    "\x02\u0B17\u0173\x03\x02\x02\x02\u0B18\u0B1A\x05\u02B8\u015D\x02\u0B19" +
    "\u0B18\x03\x02\x02\x02\u0B1A\u0B1D\x03\x02\x02\x02\u0B1B\u0B19\x03\x02" +
    "\x02\x02\u0B1B\u0B1C\x03\x02\x02\x02\u0B1C\u0B1E\x03\x02\x02\x02\u0B1D" +
    "\u0B1B\x03\x02\x02\x02\u0B1E\u0B1F\x05\u0166\xB4\x02\u0B1F\u0B20\x07\xB7" +
    "\x02\x02\u0B20\u0B81\x03\x02\x02\x02\u0B21\u0B23\x05\u02B8\u015D\x02\u0B22" +
    "\u0B21\x03\x02\x02\x02\u0B23\u0B26\x03\x02\x02\x02\u0B24\u0B22\x03\x02" +
    "\x02\x02\u0B24\u0B25\x03\x02\x02\x02\u0B25\u0B27\x03\x02\x02\x02\u0B26" +
    "\u0B24\x03\x02\x02\x02\u0B27\u0B81\x05\u018E\xC8\x02\u0B28\u0B2A\x05\u02B8" +
    "\u015D\x02\u0B29\u0B28\x03\x02\x02\x02\u0B2A\u0B2D\x03\x02\x02\x02\u0B2B" +
    "\u0B29\x03\x02\x02\x02\u0B2B\u0B2C\x03\x02\x02\x02\u0B2C\u0B2E\x03\x02" +
    "\x02\x02\u0B2D\u0B2B\x03\x02\x02\x02\u0B2E\u0B81\x05\u018C\xC7\x02\u0B2F" +
    "\u0B31\x05\u02B8\u015D\x02\u0B30\u0B2F\x03\x02\x02\x02\u0B31\u0B34\x03" +
    "\x02\x02\x02\u0B32\u0B30\x03\x02\x02\x02\u0B32\u0B33\x03\x02\x02\x02\u0B33" +
    "\u0B35\x03\x02\x02\x02\u0B34\u0B32\x03\x02\x02\x02\u0B35\u0B81\x05\u017E" +
    "\xC0\x02\u0B36\u0B38\x05\u02B8\u015D\x02\u0B37\u0B36\x03\x02\x02\x02\u0B38" +
    "\u0B3B\x03\x02\x02\x02\u0B39\u0B37\x03\x02\x02\x02\u0B39\u0B3A\x03\x02" +
    "\x02\x02\u0B3A\u0B3C\x03\x02\x02\x02\u0B3B\u0B39\x03\x02\x02\x02\u0B3C" +
    "\u0B81\x05\u0182\xC2\x02\u0B3D\u0B3F\x05\u02B8\u015D\x02\u0B3E\u0B3D\x03" +
    "\x02\x02\x02\u0B3F\u0B42\x03\x02\x02\x02\u0B40\u0B3E\x03\x02\x02\x02\u0B40" +
    "\u0B41\x03\x02\x02\x02\u0B41\u0B43\x03\x02\x02\x02\u0B42\u0B40\x03\x02" +
    "\x02\x02\u0B43\u0B81\x05\u0192\xCA\x02\u0B44\u0B46\x05\u02B8\u015D\x02" +
    "\u0B45\u0B44\x03\x02\x02\x02\u0B46\u0B49\x03\x02\x02\x02\u0B47\u0B45\x03" +
    "\x02\x02\x02\u0B47\u0B48\x03\x02\x02\x02\u0B48\u0B4A\x03\x02\x02\x02\u0B49" +
    "\u0B47\x03\x02\x02\x02\u0B4A\u0B4B\x05\u0168\xB5\x02\u0B4B\u0B4C\x07\xB7" +
    "\x02\x02\u0B4C\u0B81\x03\x02\x02\x02\u0B4D\u0B4F\x05\u02B8\u015D\x02\u0B4E" +
    "\u0B4D\x03\x02\x02\x02\u0B4F\u0B52\x03\x02\x02\x02\u0B50\u0B4E\x03\x02" +
    "\x02\x02\u0B50\u0B51\x03\x02\x02\x02\u0B51\u0B53\x03\x02\x02\x02\u0B52" +
    "\u0B50\x03\x02\x02\x02\u0B53\u0B81\x05\u016E\xB8\x02\u0B54\u0B56\x05\u02B8" +
    "\u015D\x02\u0B55\u0B54\x03\x02\x02\x02\u0B56\u0B59\x03\x02\x02\x02\u0B57" +
    "\u0B55\x03\x02\x02\x02\u0B57\u0B58\x03\x02\x02\x02\u0B58\u0B5A\x03\x02" +
    "\x02\x02\u0B59\u0B57\x03\x02\x02\x02\u0B5A\u0B5B\x05\u016A\xB6\x02\u0B5B" +
    "\u0B5C\x07\xB7\x02\x02\u0B5C\u0B81\x03\x02\x02\x02\u0B5D\u0B5F\x05\u02B8" +
    "\u015D\x02\u0B5E\u0B5D\x03\x02\x02\x02\u0B5F\u0B62\x03\x02\x02\x02\u0B60" +
    "\u0B5E\x03\x02\x02\x02\u0B60\u0B61\x03\x02\x02\x02\u0B61\u0B63\x03\x02" +
    "\x02\x02\u0B62\u0B60\x03\x02\x02\x02\u0B63\u0B81\x05\u0188\xC5\x02\u0B64" +
    "\u0B66\x05\u02B8\u015D\x02\u0B65\u0B64\x03\x02\x02\x02\u0B66\u0B69\x03" +
    "\x02\x02\x02\u0B67\u0B65\x03\x02\x02\x02\u0B67\u0B68\x03\x02\x02\x02\u0B68" +
    "\u0B6A\x03\x02\x02\x02\u0B69\u0B67\x03\x02\x02\x02\u0B6A\u0B81\x05\u0172" +
    "\xBA\x02\u0B6B\u0B6D\x05\u02B8\u015D\x02\u0B6C\u0B6B\x03\x02\x02\x02\u0B6D" +
    "\u0B70\x03\x02\x02\x02\u0B6E\u0B6C\x03\x02\x02\x02\u0B6E\u0B6F\x03\x02" +
    "\x02\x02\u0B6F\u0B71\x03\x02\x02\x02\u0B70\u0B6E\x03\x02\x02\x02\u0B71" +
    "\u0B81\x05\u0194\xCB\x02\u0B72\u0B74\x05\u02B8\u015D\x02\u0B73\u0B72\x03" +
    "\x02\x02\x02\u0B74\u0B77\x03\x02\x02\x02\u0B75\u0B73\x03\x02\x02\x02\u0B75" +
    "\u0B76\x03\x02\x02\x02\u0B76\u0B78\x03\x02\x02\x02\u0B77\u0B75\x03\x02" +
    "\x02\x02\u0B78\u0B81\x05\u019A\xCE\x02\u0B79\u0B7B\x05\u02B8\u015D\x02" +
    "\u0B7A\u0B79\x03\x02\x02\x02\u0B7B\u0B7E\x03\x02\x02\x02\u0B7C\u0B7A\x03" +
    "\x02\x02\x02\u0B7C\u0B7D\x03\x02\x02\x02\u0B7D\u0B7F\x03\x02\x02\x02\u0B7E" +
    "\u0B7C\x03\x02\x02\x02\u0B7F\u0B81\x05\u018A\xC6\x02\u0B80\u0B1B\x03\x02" +
    "\x02\x02\u0B80\u0B24\x03\x02\x02\x02\u0B80\u0B2B\x03\x02\x02\x02\u0B80" +
    "\u0B32\x03\x02\x02\x02\u0B80\u0B39\x03\x02\x02\x02\u0B80\u0B40\x03\x02" +
    "\x02\x02\u0B80\u0B47\x03\x02\x02\x02\u0B80\u0B50\x03\x02\x02\x02\u0B80" +
    "\u0B57\x03\x02\x02\x02\u0B80\u0B60\x03\x02\x02\x02\u0B80\u0B67\x03\x02" +
    "\x02\x02\u0B80\u0B6E\x03\x02\x02\x02\u0B80\u0B75\x03\x02\x02\x02\u0B80" +
    "\u0B7C\x03\x02\x02\x02\u0B81\u0175\x03\x02\x02\x02\u0B82\u0B8B\x05\u0174" +
    "\xBB\x02\u0B83\u0B85\x05\u02B8\u015D\x02\u0B84\u0B83\x03\x02\x02\x02\u0B85" +
    "\u0B88\x03\x02\x02\x02\u0B86\u0B84\x03\x02\x02\x02\u0B86\u0B87\x03\x02" +
    "\x02\x02\u0B87\u0B89\x03\x02\x02\x02\u0B88\u0B86\x03\x02\x02\x02\u0B89" +
    "\u0B8B\x07\xB7\x02\x02\u0B8A\u0B82\x03\x02\x02\x02\u0B8A\u0B86\x03\x02" +
    "\x02\x02\u0B8B\u0177\x03\x02\x02\x02\u0B8C\u0B8D\x05\u0174\xBB\x02\u0B8D" +
    "\u0179\x03\x02\x02\x02\u0B8E\u0B8F\x07\xA5\x02\x02\u0B8F\u0B96\x05r:\x02" +
    "\u0B90\u0B91\x07\xA5\x02\x02\u0B91\u0B92\x07\xA8\x02\x02\u0B92\u0B93\x05" +
    "\u0270\u0139\x02\u0B93\u0B94\x07\xB6\x02\x02\u0B94\u0B96\x03\x02\x02\x02" +
    "\u0B95\u0B8E\x03\x02\x02\x02\u0B95\u0B90\x03\x02\x02\x02\u0B96\u017B\x03" +
    "\x02\x02\x02\u0B97\u0BA0\x05\u017A\xBE\x02\u0B98\u0BA0\x05\u0180\xC1\x02" +
    "\u0B99\u0B9A\x07c\x02\x02\u0B9A\u0B9B\x07\xA8\x02\x02\u0B9B\u0B9C\x05" +
    "\u026C\u0137\x02\u0B9C\u0B9D\x07\xB6\x02\x02\u0B9D\u0B9E\x05\u0180\xC1" +
    "\x02\u0B9E\u0BA0\x03\x02\x02\x02\u0B9F\u0B97\x03\x02\x02\x02\u0B9F\u0B98" +
    "\x03\x02\x02\x02\u0B9F\u0B99\x03\x02\x02\x02\u0BA0\u017D\x03\x02\x02\x02" +
    "\u0BA1\u0BA2\x07\x15\x02\x02\u0BA2\u0BA3\x05\u02D0\u0169\x02\u0BA3\u0BA4" +
    "\x07\xB7\x02\x02\u0BA4\u017F\x03\x02\x02\x02\u0BA5\u0BA6\x07\x91\x02\x02" +
    "\u0BA6\u0BB3\x05\u02D0\u0169\x02\u0BA7\u0BA8\x07\x91\x02\x02\u0BA8\u0BA9" +
    "\x07\xA8\x02\x02\u0BA9\u0BAA\x05\u0184\xC3\x02\u0BAA\u0BAB\x07\xB6\x02" +
    "\x02\u0BAB\u0BB3\x03\x02\x02\x02\u0BAC\u0BAD\x07\x91\x02\x02\u0BAD\u0BB3" +
    "\x07\x8E\x02\x02\u0BAE\u0BAF\x07\x91\x02\x02\u0BAF\u0BB0\x07\xA8\x02\x02" +
    "\u0BB0\u0BB1\x07\x8E\x02\x02\u0BB1\u0BB3\x07\xB6\x02\x02\u0BB2\u0BA5\x03" +
    "\x02\x02\x02\u0BB2\u0BA7\x03\x02\x02\x02\u0BB2\u0BAC\x03\x02\x02\x02\u0BB2" +
    "\u0BAE\x03\x02\x02\x02\u0BB3\u0181\x03\x02\x02\x02\u0BB4\u0BB5\x07\xAF" +
    "\x02\x02\u0BB5\u0BB7\x05\u02D0\u0169\x02\u0BB6\u0BB8\x05\u0284\u0143\x02" +
    "\u0BB7\u0BB6\x03\x02\x02\x02\u0BB7\u0BB8\x03\x02\x02\x02\u0BB8\u0BB9\x03" +
    "\x02\x02\x02\u0BB9\u0BBA\x07\xB7\x02\x02\u0BBA\u0183\x03\x02\x02\x02\u0BBB" +
    "\u0BBC\b\xC3\x01\x02\u0BBC\u0BC2\x05\u026C\u0137\x02\u0BBD\u0BBE\x07V" +
    "\x02\x02\u0BBE\u0BC2\x05\u026C\u0137\x02\u0BBF\u0BC0\x07J\x02\x02\u0BC0" +
    "\u0BC2\x05\u026C\u0137\x02\u0BC1\u0BBB\x03\x02\x02\x02\u0BC1\u0BBD\x03" +
    "\x02\x02\x02\u0BC1\u0BBF\x03\x02\x02\x02\u0BC2\u0BCB\x03\x02\x02\x02\u0BC3" +
    "\u0BC4\f\x04\x02\x02\u0BC4\u0BC5\x07Q\x02\x02\u0BC5\u0BCA\x05\u0184\xC3" +
    "\x05\u0BC6\u0BC7\f\x03\x02\x02\u0BC7\u0BC8\x07\x95\x02\x02\u0BC8\u0BCA" +
    "\x05\u0184\xC3\x04\u0BC9\u0BC3\x03\x02\x02\x02\u0BC9\u0BC6\x03\x02\x02" +
    "\x02\u0BCA\u0BCD\x03\x02\x02\x02\u0BCB\u0BC9\x03\x02\x02\x02\u0BCB\u0BCC" +
    "\x03\x02\x02\x02\u0BCC\u0185\x03\x02\x02\x02\u0BCD\u0BCB\x03\x02\x02\x02" +
    "\u0BCE\u0BD1\x05\u017A\xBE\x02\u0BCF\u0BD1\x05\u0180\xC1\x02\u0BD0\u0BCE" +
    "\x03\x02\x02\x02\u0BD0\u0BCF\x03\x02\x02\x02\u0BD1\u0187\x03\x02\x02\x02" +
    "\u0BD2\u0BD3\x05\u0186\xC4\x02\u0BD3\u0BD4\x05\u0176\xBC\x02\u0BD4\u0189" +
    "\x03\x02\x02\x02\u0BD5\u0BD6\x07\x82\x02\x02\u0BD6\u0BD7\x07\xA8\x02\x02" +
    "\u0BD7\u0BD8\x05\u026C\u0137\x02\u0BD8\u0BD9\x07\xB6\x02\x02\u0BD9\u0BDA" +
    "\x05\u0176\xBC\x02\u0BDA\u018B\x03\x02\x02\x02\u0BDB\u0BDC\x078\x02\x02" +
    "\u0BDC\u0BDD\x07\xA8\x02\x02\u0BDD\u0BDE\x05\u026C\u0137\x02\u0BDE\u0BDF" +
    "\x07\xB6\x02\x02\u0BDF\u0BE2\x05\u0176\xBC\x02\u0BE0\u0BE1\x07#\x02\x02" +
    "\u0BE1\u0BE3\x05\u0176\xBC\x02\u0BE2\u0BE0\x03\x02\x02\x02\u0BE2\u0BE3" +
    "\x03\x02\x02\x02\u0BE3\u018D\x03\x02\x02\x02\u0BE4\u0BE5\x07\v\x02\x02" +
    "\u0BE5\u0BE6\x07\xA8\x02\x02\u0BE6\u0BE7\x05\u026C\u0137\x02\u0BE7\u0BE9" +
    "\x07\xB6\x02\x02\u0BE8\u0BEA\x05\u0190\xC9\x02\u0BE9\u0BE8\x03\x02\x02" +
    "\x02\u0BEA\u0BEB\x03\x02\x02\x02\u0BEB\u0BE9\x03\x02\x02\x02\u0BEB\u0BEC" +
    "\x03\x02\x02\x02\u0BEC\u0BED\x03\x02\x02\x02\u0BED\u0BEE\x07%\x02\x02" +
    "\u0BEE\u0C06\x03\x02\x02\x02\u0BEF\u0BF0\x07\r\x02\x02\u0BF0\u0BF1\x07" +
    "\xA8\x02\x02\u0BF1\u0BF2\x05\u026C\u0137\x02\u0BF2\u0BF4\x07\xB6\x02\x02" +
    "\u0BF3\u0BF5\x05\u0190\xC9\x02\u0BF4\u0BF3\x03\x02\x02\x02\u0BF5\u0BF6" +
    "\x03\x02\x02\x02\u0BF6\u0BF4\x03\x02\x02\x02\u0BF6\u0BF7\x03\x02\x02\x02" +
    "\u0BF7\u0BF8\x03\x02\x02\x02\u0BF8\u0BF9\x07%\x02\x02\u0BF9\u0C06\x03" +
    "\x02\x02\x02\u0BFA\u0BFB\x07\f\x02\x02\u0BFB\u0BFC\x07\xA8\x02\x02\u0BFC" +
    "\u0BFD\x05\u026C\u0137\x02\u0BFD\u0BFF\x07\xB6\x02\x02\u0BFE\u0C00\x05" +
    "\u0190\xC9\x02\u0BFF\u0BFE\x03\x02\x02\x02\u0C00\u0C01\x03\x02\x02\x02" +
    "\u0C01\u0BFF\x03\x02\x02\x02\u0C01\u0C02\x03\x02\x02\x02\u0C02\u0C03\x03" +
    "\x02\x02\x02\u0C03\u0C04\x07%\x02\x02\u0C04\u0C06\x03\x02\x02\x02\u0C05" +
    "\u0BE4\x03\x02\x02\x02\u0C05\u0BEF\x03\x02\x02\x02\u0C05\u0BFA\x03\x02" +
    "\x02\x02\u0C06\u018F\x03\x02\x02\x02\u0C07\u0C0C\x05\u026C\u0137\x02\u0C08" +
    "\u0C09\x07\x95\x02\x02\u0C09\u0C0B\x05\u026C\u0137\x02\u0C0A\u0C08\x03" +
    "\x02\x02\x02\u0C0B\u0C0E\x03\x02\x02\x02\u0C0C\u0C0A\x03\x02\x02\x02\u0C0C" +
    "\u0C0D\x03\x02\x02\x02\u0C0D\u0C0F\x03\x02\x02\x02\u0C0E\u0C0C\x03\x02" +
    "\x02\x02\u0C0F\u0C10\x07\x94\x02\x02\u0C10\u0C11\x05\u0176\xBC\x02\u0C11" +
    "\u0C18\x03\x02\x02\x02\u0C12\u0C14\x07\x12\x02\x02\u0C13\u0C15\x07\x94" +
    "\x02\x02\u0C14\u0C13\x03\x02\x02\x02\u0C14\u0C15\x03\x02\x02\x02\u0C15" +
    "\u0C16\x03\x02\x02\x02\u0C16\u0C18\x05\u0176\xBC\x02\u0C17\u0C07\x03\x02" +
    "\x02\x02\u0C17\u0C12\x03\x02\x02\x02\u0C18\u0191\x03\x02\x02\x02\u0C19" +
    "\u0C1A\x071\x02\x02\u0C1A\u0C32\x05\u0174\xBB\x02\u0C1B\u0C1C\x07c\x02" +
    "\x02\u0C1C\u0C1D\x07\xA8\x02\x02\u0C1D\u0C1E\x05\u026C\u0137\x02\u0C1E" +
    "\u0C1F\x07\xB6\x02\x02\u0C1F\u0C20\x05\u0174\xBB\x02\u0C20\u0C32\x03\x02" +
    "\x02\x02\u0C21\u0C22\x07\x86\x02\x02\u0C22\u0C23\x07\xA8\x02\x02\u0C23" +
    "\u0C24\x05\u026C\u0137\x02\u0C24\u0C25\x07\xB6\x02\x02\u0C25\u0C26\x05" +
    "\u0174\xBB\x02\u0C26\u0C32\x03\x02\x02\x02\u0C27\u0C28\x07/\x02\x02\u0C28" +
    "\u0C29\x07\xA8\x02\x02\u0C29\u0C2A\x05\u016C\xB7\x02\u0C2A\u0C2B\x07\xB7" +
    "\x02\x02\u0C2B\u0C2C\x05\u026C\u0137\x02\u0C2C\u0C2D\x07\xB7\x02\x02\u0C2D" +
    "\u0C2E\x05\u016C\xB7\x02\u0C2E\u0C2F\x07\xB6\x02\x02\u0C2F\u0C30\x05\u0174" +
    "\xBB\x02\u0C30\u0C32\x03\x02\x02\x02\u0C31\u0C19\x03\x02\x02\x02\u0C31" +
    "\u0C1B\x03\x02\x02\x02\u0C31\u0C21\x03\x02\x02\x02\u0C31\u0C27\x03\x02" +
    "\x02\x02\u0C32\u0193\x03\x02\x02\x02\u0C33\u0C35\x05\u02F0\u0179\x02\u0C34" +
    "\u0C36\x05\u0196\xCC\x02\u0C35\u0C34\x03\x02\x02\x02\u0C35\u0C36\x03\x02" +
    "\x02\x02\u0C36\u0C37\x03\x02\x02\x02\u0C37\u0C38\x07\xB7\x02\x02\u0C38" +
    "\u0195\x03\x02\x02\x02\u0C39\u0C3A\x07\xA8\x02\x02\u0C3A\u0C3F\x05\u0198" +
    "\xCD\x02\u0C3B\u0C3C\x07\x95\x02\x02\u0C3C\u0C3E\x05\u0198\xCD\x02\u0C3D" +
    "\u0C3B\x03\x02\x02\x02\u0C3E\u0C41\x03\x02\x02\x02\u0C3F\u0C3D\x03\x02" +
    "\x02\x02\u0C3F\u0C40\x03\x02\x02\x02\u0C40\u0C42\x03\x02\x02\x02\u0C41" +
    "\u0C3F\x03\x02\x02\x02\u0C42\u0C43\x07\xB6\x02\x02\u0C43\u0197\x03\x02" +
    "\x02\x02\u0C44\u0C46\x05\u026C\u0137\x02\u0C45\u0C44\x03\x02\x02\x02\u0C45" +
    "\u0C46\x03\x02\x02\x02\u0C46\u0199\x03\x02\x02\x02\u0C47\u0C49\x05\u02D0" +
    "\u0169\x02\u0C48\u0C4A\x05\u019C\xCF\x02\u0C49\u0C48\x03\x02\x02\x02\u0C49" +
    "\u0C4A\x03\x02\x02\x02\u0C4A\u0C4B\x03\x02\x02\x02\u0C4B\u0C4C\x07\xB7" +
    "\x02\x02\u0C4C\u019B\x03\x02\x02\x02\u0C4D\u0C4E\x07\xA8\x02\x02\u0C4E" +
    "\u0C53\x05\u026C\u0137\x02\u0C4F\u0C50\x07\x95\x02\x02\u0C50\u0C52\x05" +
    "\u026C\u0137\x02\u0C51\u0C4F\x03\x02\x02\x02\u0C52\u0C55\x03\x02\x02\x02" +
    "\u0C53\u0C51\x03\x02\x02\x02\u0C53\u0C54\x03\x02\x02\x02\u0C54\u0C56\x03" +
    "\x02\x02\x02\u0C55\u0C53\x03\x02\x02\x02\u0C56\u0C57\x07\xB6\x02\x02\u0C57" +
    "\u019D\x03\x02\x02\x02\u0C58\u0C5C\x07m\x02\x02\u0C59\u0C5B\x05\u01A0" +
    "\xD1\x02\u0C5A\u0C59\x03\x02\x02\x02\u0C5B\u0C5E\x03\x02\x02\x02\u0C5C" +
    "\u0C5A\x03\x02\x02\x02\u0C5C\u0C5D\x03\x02\x02\x02\u0C5D\u0C5F\x03\x02" +
    "\x02\x02\u0C5E\u0C5C\x03\x02\x02\x02\u0C5F\u0C60\x07+\x02\x02\u0C60\u019F" +
    "\x03\x02\x02\x02\u0C61\u0C67\x05F$\x02\u0C62\u0C67\x05\u01A2\xD2\x02\u0C63" +
    "\u0C67\x05\u01A4\xD3\x02\u0C64\u0C67\x05\u01A6\xD4\x02\u0C65\u0C67\x05" +
    "\u01EE\xF8\x02\u0C66\u0C61\x03\x02\x02\x02\u0C66\u0C62\x03\x02\x02\x02" +
    "\u0C66\u0C63\x03\x02\x02\x02\u0C66\u0C64\x03\x02\x02\x02\u0C66\u0C65\x03" +
    "\x02\x02\x02\u0C67\u01A1\x03\x02\x02\x02\u0C68\u0C69\x07]\x02\x02\u0C69" +
    "\u0C6A\x05\u01B0\xD9\x02\u0C6A\u0C6B\x07\xB7\x02\x02\u0C6B\u0C71\x03\x02" +
    "\x02\x02\u0C6C\u0C6D\x07\\\x02\x02";
  private static readonly _serializedATNSegment6: string =
    "\u0C6D\u0C6E\x05\u01B0\xD9\x02\u0C6E\u0C6F\x07\xB7\x02\x02\u0C6F\u0C71" +
    "\x03\x02\x02\x02\u0C70\u0C68\x03\x02\x02\x02\u0C70\u0C6C\x03\x02\x02\x02" +
    "\u0C71\u01A3\x03\x02\x02\x02\u0C72\u0C73\x07j\x02\x02\u0C73\u0C74\x05" +
    "\u01B0\xD9\x02\u0C74\u0C75\x07\xB7\x02\x02\u0C75\u0C7B\x03\x02\x02\x02" +
    "\u0C76\u0C77\x07M\x02\x02\u0C77\u0C78\x05\u01B0\xD9\x02\u0C78\u0C79\x07" +
    "\xB7\x02\x02\u0C79\u0C7B\x03\x02\x02\x02\u0C7A\u0C72\x03\x02\x02\x02\u0C7A" +
    "\u0C76\x03\x02\x02\x02\u0C7B\u01A5\x03\x02\x02\x02\u0C7C\u0C7D\x05\u01A8" +
    "\xD5\x02\u0C7D\u0C7E\x07\xB7\x02\x02\u0C7E\u0C86\x03\x02\x02\x02\u0C7F" +
    "\u0C80\x05\u01E0\xF1\x02\u0C80\u0C81\x07\xB7\x02\x02\u0C81\u0C86\x03\x02" +
    "\x02\x02\u0C82\u0C83\x05\u01EA\xF6\x02\u0C83\u0C84\x07\xB7\x02\x02\u0C84" +
    "\u0C86\x03\x02\x02\x02\u0C85\u0C7C\x03\x02\x02\x02\u0C85\u0C7F\x03\x02" +
    "\x02\x02\u0C85\u0C82\x03\x02\x02\x02\u0C86\u01A7\x03\x02\x02\x02\u0C87" +
    "\u0C88\x05\u01AA\xD6\x02\u0C88\u0C89\x07\x9C\x02\x02\u0C89\u0C8A\x05\u01BA" +
    "\xDE\x02\u0C8A\u0C90\x03\x02\x02\x02\u0C8B\u0C8C\x05\u01AC\xD7\x02\u0C8C" +
    "\u0C8D\x07\x9C\x02\x02\u0C8D\u0C8E\x05\u01BA\xDE\x02\u0C8E\u0C90\x03\x02" +
    "\x02\x02\u0C8F\u0C87\x03\x02\x02\x02\u0C8F\u0C8B\x03\x02\x02\x02\u0C90" +
    "\u01A9\x03\x02\x02\x02\u0C91\u0C92\x07\xA8\x02\x02\u0C92\u0C94\x05\u01B2" +
    "\xDA\x02\u0C93\u0C95\x05\u01EC\xF7\x02\u0C94\u0C93\x03\x02\x02\x02\u0C94" +
    "\u0C95\x03\x02\x02\x02\u0C95\u0C96\x03\x02\x02\x02\u0C96\u0C97\x07\x9F" +
    "\x02\x02\u0C97\u0C98\x05\u01B4\xDB\x02\u0C98\u0C99\x07\xB6\x02\x02\u0C99" +
    "\u01AB\x03\x02\x02\x02\u0C9A\u0C9B\x07\xA8\x02\x02\u0C9B\u0C9D\x05\u01AE" +
    "\xD8\x02\u0C9C\u0C9E\x05\u01EC\xF7\x02\u0C9D\u0C9C\x03\x02\x02\x02\u0C9D" +
    "\u0C9E\x03\x02\x02\x02\u0C9E\u0C9F\x03\x02\x02\x02\u0C9F\u0CA0\x07\x90" +
    "\x02\x02\u0CA0\u0CA1\x05\u01B0\xD9\x02\u0CA1\u0CA2\x07\xB6\x02\x02\u0CA2" +
    "\u01AD\x03\x02\x02\x02\u0CA3\u0CA8\x05\u01B2\xDA\x02\u0CA4\u0CA5\x07\x95" +
    "\x02\x02\u0CA5\u0CA7\x05\u01B2\xDA\x02\u0CA6\u0CA4\x03\x02\x02\x02\u0CA7" +
    "\u0CAA\x03\x02\x02\x02\u0CA8\u0CA6\x03\x02\x02\x02\u0CA8\u0CA9\x03\x02" +
    "\x02\x02\u0CA9\u01AF\x03\x02\x02\x02\u0CAA\u0CA8\x03\x02\x02\x02\u0CAB" +
    "\u0CB0\x05\u01B4\xDB\x02\u0CAC\u0CAD\x07\x95\x02\x02\u0CAD\u0CAF\x05\u01B4" +
    "\xDB\x02\u0CAE\u0CAC\x03\x02\x02\x02\u0CAF\u0CB2\x03\x02\x02\x02\u0CB0" +
    "\u0CAE\x03\x02\x02\x02\u0CB0\u0CB1\x03\x02\x02\x02\u0CB1\u01B1\x03\x02" +
    "\x02\x02\u0CB2\u0CB0\x03\x02\x02\x02\u0CB3\u0CB8\x05\u01B6\xDC\x02\u0CB4" +
    "\u0CB5\x07\xA6\x02\x02\u0CB5\u0CB6\x05\u0268\u0135\x02\u0CB6\u0CB7\x07" +
    "\xB4\x02\x02\u0CB7\u0CB9\x03\x02\x02\x02\u0CB8\u0CB4\x03\x02\x02\x02\u0CB8" +
    "\u0CB9\x03\x02\x02\x02\u0CB9\u01B3\x03\x02\x02\x02\u0CBA\u0CBF\x05\u01B8" +
    "\xDD\x02\u0CBB\u0CBC\x07\xA6\x02\x02\u0CBC\u0CBD\x05\u0268\u0135\x02\u0CBD" +
    "\u0CBE\x07\xB4\x02\x02\u0CBE\u0CC0\x03\x02\x02\x02\u0CBF\u0CBB\x03\x02" +
    "\x02\x02\u0CBF\u0CC0\x03\x02\x02\x02\u0CC0\u01B5\x03\x02\x02\x02\u0CC1" +
    "\u0CC2\x05\u02E6\u0174\x02\u0CC2\u01B7\x03\x02\x02\x02\u0CC3\u0CC4\x05" +
    "\u02E6\u0174\x02\u0CC4\u01B9\x03\x02\x02\x02\u0CC5\u0CCB\x05\u01BC\xDF" +
    "\x02\u0CC6\u0CC7\x07\xA8\x02\x02\u0CC7\u0CC8\x05\u01BC\xDF\x02\u0CC8\u0CC9" +
    "\x07\xB6\x02\x02\u0CC9\u0CCB\x03\x02\x02\x02\u0CCA\u0CC5\x03\x02\x02\x02" +
    "\u0CCA\u0CC6\x03\x02\x02\x02\u0CCB\u01BB\x03\x02\x02\x02\u0CCC\u0CEF\x05" +
    "\u01BE\xE0\x02\u0CCD\u0CCE\x05\u01C0\xE1\x02\u0CCE\u0CCF\x07\x95\x02\x02" +
    "\u0CCF\u0CD2\x05\u01C2\xE2\x02\u0CD0\u0CD1\x07\x95\x02\x02\u0CD1\u0CD3" +
    "\x05\u01C4\xE3\x02\u0CD2\u0CD0\x03\x02\x02\x02\u0CD2\u0CD3\x03\x02\x02" +
    "\x02\u0CD3\u0CEF\x03\x02\x02\x02\u0CD4\u0CD5\x05\u01C6\xE4\x02\u0CD5\u0CD6" +
    "\x07\x95\x02\x02\u0CD6\u0CD7\x05\u01C8\xE5\x02\u0CD7\u0CD8\x07\x95\x02" +
    "\x02\u0CD8\u0CD9\x05\u01CA\xE6\x02\u0CD9\u0CDA\x07\x95\x02\x02\u0CDA\u0CDB" +
    "\x05\u01CC\xE7\x02\u0CDB\u0CDC\x07\x95\x02\x02\u0CDC\u0CDD\x05\u01CE\xE8" +
    "\x02\u0CDD\u0CDE\x07\x95\x02\x02\u0CDE\u0CEC\x05\u01D0\xE9\x02\u0CDF\u0CE0" +
    "\x07\x95\x02\x02\u0CE0\u0CE1\x05\u01D2\xEA\x02\u0CE1\u0CE2\x07\x95\x02" +
    "\x02\u0CE2\u0CE3\x05\u01D4\xEB\x02\u0CE3\u0CE4\x07\x95\x02\x02\u0CE4\u0CE5" +
    "\x05\u01D6\xEC\x02\u0CE5\u0CE6\x07\x95\x02\x02\u0CE6\u0CE7\x05\u01D8\xED" +
    "\x02\u0CE7\u0CE8\x07\x95\x02\x02\u0CE8\u0CE9\x05\u01DA\xEE\x02\u0CE9\u0CEA" +
    "\x07\x95\x02\x02\u0CEA\u0CEB\x05\u01DC\xEF\x02\u0CEB\u0CED\x03\x02\x02" +
    "\x02\u0CEC\u0CDF\x03\x02\x02\x02\u0CEC\u0CED\x03\x02\x02\x02\u0CED\u0CEF" +
    "\x03\x02\x02\x02\u0CEE\u0CCC\x03\x02\x02\x02\u0CEE\u0CCD\x03\x02\x02\x02" +
    "\u0CEE\u0CD4\x03\x02\x02\x02\u0CEF\u01BD\x03\x02\x02\x02\u0CF0\u0CF1\x05" +
    "\u01DE\xF0\x02\u0CF1\u01BF\x03\x02\x02\x02\u0CF2\u0CF3\x05\u01DE\xF0\x02" +
    "\u0CF3\u01C1\x03\x02\x02\x02\u0CF4\u0CF5\x05\u01DE\xF0\x02\u0CF5\u01C3" +
    "\x03\x02\x02\x02\u0CF6\u0CF7\x05\u01DE\xF0\x02\u0CF7\u01C5\x03\x02\x02" +
    "\x02\u0CF8\u0CF9\x05\u01DE\xF0\x02\u0CF9\u01C7\x03\x02\x02\x02\u0CFA\u0CFB" +
    "\x05\u01DE\xF0\x02\u0CFB\u01C9\x03\x02\x02\x02\u0CFC\u0CFD\x05\u01DE\xF0" +
    "\x02\u0CFD\u01CB\x03\x02\x02\x02\u0CFE\u0CFF\x05\u01DE\xF0\x02\u0CFF\u01CD" +
    "\x03\x02\x02\x02\u0D00\u0D01\x05\u01DE\xF0\x02\u0D01\u01CF\x03\x02\x02" +
    "\x02\u0D02\u0D03\x05\u01DE\xF0\x02\u0D03\u01D1\x03\x02\x02\x02\u0D04\u0D05" +
    "\x05\u01DE\xF0\x02\u0D05\u01D3\x03\x02\x02\x02\u0D06\u0D07\x05\u01DE\xF0" +
    "\x02\u0D07\u01D5\x03\x02\x02\x02\u0D08\u0D09\x05\u01DE\xF0\x02\u0D09\u01D7" +
    "\x03\x02\x02\x02\u0D0A\u0D0B\x05\u01DE\xF0\x02\u0D0B\u01D9\x03\x02\x02" +
    "\x02\u0D0C\u0D0D\x05\u01DE\xF0\x02\u0D0D\u01DB\x03\x02\x02\x02\u0D0E\u0D0F" +
    "\x05\u01DE\xF0\x02\u0D0F\u01DD\x03\x02\x02\x02\u0D10\u0D11\x05\u0266\u0134" +
    "\x02\u0D11\u01DF\x03\x02\x02\x02\u0D12\u0D13\x05\u01E2\xF2\x02\u0D13\u0D14" +
    "\x07\x9C\x02\x02\u0D14\u0D15\x05\u01BA\xDE\x02\u0D15\u0D1B\x03\x02\x02" +
    "\x02\u0D16\u0D17\x05\u01E4\xF3\x02\u0D17\u0D18\x07\x9C\x02\x02\u0D18\u0D19" +
    "\x05\u01BA\xDE\x02\u0D19\u0D1B\x03\x02\x02\x02\u0D1A\u0D12\x03\x02\x02" +
    "\x02\u0D1A\u0D16\x03\x02\x02\x02\u0D1B\u01E1\x03\x02\x02\x02\u0D1C\u0D1E" +
    "\x07\xA8\x02\x02\u0D1D\u0D1F\x05\u01E8\xF5\x02\u0D1E\u0D1D\x03\x02\x02" +
    "\x02\u0D1E\u0D1F\x03\x02\x02\x02\u0D1F\u0D20\x03\x02\x02\x02\u0D20\u0D21" +
    "\x05\u01B2\xDA\x02\u0D21\u0D22\x07\x9F\x02\x02\u0D22\u0D23\x07\xA8\x02" +
    "\x02\u0D23\u0D25\x05\u01B4\xDB\x02\u0D24\u0D26\x05\u01EC\xF7\x02\u0D25" +
    "\u0D24\x03\x02\x02\x02\u0D25\u0D26\x03\x02\x02\x02\u0D26\u0D27\x03\x02" +
    "\x02\x02\u0D27\u0D28\x07\x94\x02\x02\u0D28\u0D29\x05\u01E6\xF4\x02\u0D29" +
    "\u0D2A\x07\xB6\x02\x02\u0D2A\u0D2B\x07\xB6\x02\x02\u0D2B\u01E3\x03\x02" +
    "\x02\x02\u0D2C\u0D2E\x07\xA8\x02\x02\u0D2D\u0D2F\x05\u01E8\xF5\x02\u0D2E" +
    "\u0D2D\x03\x02\x02\x02\u0D2E\u0D2F\x03\x02\x02\x02\u0D2F\u0D30\x03\x02" +
    "\x02\x02\u0D30\u0D31\x05\u01AE\xD8\x02\u0D31\u0D32\x07\x90\x02\x02\u0D32" +
    "\u0D33\x07\xA8\x02\x02\u0D33\u0D35\x05\u01B0\xD9\x02\u0D34\u0D36\x05\u01EC" +
    "\xF7\x02\u0D35\u0D34\x03\x02\x02\x02\u0D35\u0D36\x03\x02\x02\x02\u0D36" +
    "\u0D37\x03\x02\x02\x02\u0D37\u0D38\x07\x94\x02\x02\u0D38\u0D39\x05\u01E6" +
    "\xF4\x02\u0D39\u0D3A\x07\xB6\x02\x02\u0D3A\u0D3B\x07\xB6\x02\x02\u0D3B" +
    "\u01E5\x03\x02\x02\x02\u0D3C\u0D3D\x05\u026C\u0137\x02\u0D3D\u01E7\x03" +
    "\x02\x02\x02\u0D3E\u0D3F\t\x11\x02\x02\u0D3F\u01E9\x03\x02\x02\x02\u0D40" +
    "\u0D41\x078\x02\x02\u0D41\u0D42\x07\xA8\x02\x02\u0D42\u0D43\x05\u0272" +
    "\u013A\x02\u0D43\u0D44\x07\xB6\x02\x02\u0D44\u0D45\x05\u01A8\xD5\x02\u0D45" +
    "\u0D4F\x03\x02\x02\x02\u0D46\u0D47\x078\x02\x02\u0D47\u0D48\x07\xA8\x02" +
    "\x02\u0D48\u0D49\x05\u0272\u013A\x02\u0D49\u0D4A\x07\xB6\x02\x02\u0D4A" +
    "\u0D4B\x05\u01E0\xF1\x02\u0D4B\u0D4F\x03\x02\x02\x02\u0D4C\u0D4D\x079" +
    "\x02\x02\u0D4D\u0D4F\x05\u01A8\xD5\x02\u0D4E\u0D40\x03\x02\x02\x02\u0D4E" +
    "\u0D46\x03\x02\x02\x02\u0D4E\u0D4C\x03\x02\x02\x02\u0D4F\u01EB\x03\x02" +
    "\x02\x02\u0D50\u0D51\t\x12\x02\x02\u0D51\u01ED\x03\x02\x02\x02\u0D52\u0D5F" +
    "\x05\u01F0\xF9\x02\u0D53\u0D5F\x05\u01F4\xFB\x02\u0D54\u0D5F\x05\u01F6" +
    "\xFC\x02\u0D55\u0D5F\x05\u0202\u0102\x02\u0D56\u0D5F\x05\u0204\u0103\x02" +
    "\u0D57\u0D5F\x05\u0206\u0104\x02\u0D58\u0D5F\x05\u0208\u0105\x02\u0D59" +
    "\u0D5F\x05\u020A\u0106\x02\u0D5A\u0D5F\x05\u0212\u010A\x02\u0D5B\u0D5F" +
    "\x05\u0214\u010B\x02\u0D5C\u0D5F\x05\u0216\u010C\x02\u0D5D\u0D5F\x05\u021A" +
    "\u010E\x02\u0D5E\u0D52\x03\x02\x02\x02\u0D5E\u0D53\x03\x02\x02\x02\u0D5E" +
    "\u0D54\x03\x02\x02\x02\u0D5E\u0D55\x03\x02\x02\x02\u0D5E\u0D56\x03\x02" +
    "\x02\x02\u0D5E\u0D57\x03\x02\x02\x02\u0D5E\u0D58\x03\x02\x02\x02\u0D5E" +
    "\u0D59\x03\x02\x02\x02\u0D5E\u0D5A\x03\x02\x02\x02\u0D5E\u0D5B\x03\x02" +
    "\x02\x02\u0D5E\u0D5C\x03\x02\x02\x02\u0D5E\u0D5D\x03\x02\x02\x02\u0D5F" +
    "\u01EF\x03\x02\x02\x02\u0D60\u0D61\x07\x1D\x02\x02\u0D61\u0D62\x07\xA8" +
    "\x02\x02\u0D62\u0D63\x05\u0220\u0111\x02\u0D63\u0D64\x07\x95\x02\x02\u0D64" +
    "\u0D65\x05\u022C\u0117\x02\u0D65\u0D66\x07\x95\x02\x02\u0D66\u0D68\x05" +
    "\u0236\u011C\x02\u0D67\u0D69\x05\u01F2\xFA\x02\u0D68\u0D67\x03\x02\x02" +
    "\x02\u0D68\u0D69\x03\x02\x02\x02\u0D69\u0D6A\x03\x02\x02\x02\u0D6A\u0D6B" +
    "\x07\xB6\x02\x02\u0D6B\u0D6C\x07\xB7\x02\x02\u0D6C\u01F1\x03\x02\x02\x02" +
    "\u0D6D\u0D6F\x07\x95\x02\x02\u0D6E\u0D70\x05\u022A\u0116\x02\u0D6F\u0D6E" +
    "\x03\x02\x02\x02\u0D6F\u0D70\x03\x02\x02\x02\u0D70\u01F3\x03\x02\x02\x02" +
    "\u0D71\u0D72\x07\x17\x02\x02\u0D72\u0D73\x07\xA8\x02\x02\u0D73\u0D74\x05" +
    "\u022C\u0117\x02\u0D74\u0D75\x07\x95\x02\x02\u0D75\u0D76\x05\u0220\u0111" +
    "\x02\u0D76\u0D77\x07\x95\x02\x02\u0D77\u0D79\x05\u0236\u011C\x02\u0D78" +
    "\u0D7A\x05\u01F2\xFA\x02\u0D79\u0D78\x03\x02\x02\x02\u0D79\u0D7A\x03\x02" +
    "\x02\x02\u0D7A\u0D7B\x03\x02\x02\x02\u0D7B\u0D7C\x07\xB6\x02\x02\u0D7C" +
    "\u0D7D\x07\xB7\x02\x02\u0D7D\u01F5\x03\x02\x02\x02\u0D7E\u0D7F\x07\x1E" +
    "\x02\x02\u0D7F\u0D80\x07\xA8\x02\x02\u0D80\u0D81\x05\u022C\u0117\x02\u0D81" +
    "\u0D82\x07\x95\x02\x02\u0D82\u0D83\x05\u0220\u0111\x02\u0D83\u0D84\x07" +
    "\x95\x02\x02\u0D84\u0D85\x05\u0236\u011C\x02\u0D85\u0D86\x07\x95\x02\x02" +
    "\u0D86\u0D88\x05\u0236\u011C\x02\u0D87\u0D89\x05\u01F8\xFD\x02\u0D88\u0D87" +
    "\x03\x02\x02\x02\u0D88\u0D89\x03\x02\x02\x02\u0D89\u0D8A\x03\x02\x02\x02" +
    "\u0D8A\u0D8B\x07\xB6\x02\x02\u0D8B\u0D8C\x07\xB7\x02\x02\u0D8C\u01F7\x03" +
    "\x02\x02\x02\u0D8D\u0D8F\x07\x95\x02\x02\u0D8E\u0D90\x05\u022A\u0116\x02" +
    "\u0D8F\u0D8E\x03\x02\x02\x02\u0D8F\u0D90\x03\x02\x02\x02\u0D90\u0D92\x03" +
    "\x02\x02\x02\u0D91\u0D93\x05\u01FA\xFE\x02\u0D92\u0D91\x03\x02\x02\x02" +
    "\u0D92\u0D93\x03\x02\x02\x02\u0D93\u01F9\x03\x02\x02\x02\u0D94\u0D96\x07" +
    "\x95\x02\x02\u0D95\u0D97\x05\u0230\u0119\x02\u0D96\u0D95\x03\x02\x02\x02" +
    "\u0D96\u0D97\x03\x02\x02\x02\u0D97\u0D99\x03\x02\x02\x02\u0D98\u0D9A\x05" +
    "\u01FC\xFF\x02\u0D99\u0D98\x03\x02\x02\x02\u0D99\u0D9A\x03\x02\x02\x02" +
    "\u0D9A\u01FB\x03\x02\x02\x02\u0D9B\u0D9D\x07\x95\x02\x02\u0D9C\u0D9E\x05" +
    "\u021C\u010F\x02\u0D9D\u0D9C\x03\x02\x02\x02\u0D9D\u0D9E\x03\x02\x02\x02" +
    "\u0D9E\u0DA0\x03\x02\x02\x02\u0D9F\u0DA1\x05\u01FE\u0100\x02\u0DA0\u0D9F" +
    "\x03\x02\x02\x02\u0DA0\u0DA1\x03\x02\x02\x02\u0DA1\u01FD\x03\x02\x02\x02" +
    "\u0DA2\u0DA4\x07\x95\x02\x02\u0DA3\u0DA5\x05\u0224\u0113\x02\u0DA4\u0DA3" +
    "\x03\x02\x02\x02\u0DA4\u0DA5\x03\x02\x02\x02\u0DA5\u0DA7\x03\x02\x02\x02" +
    "\u0DA6\u0DA8\x05\u0200\u0101\x02\u0DA7\u0DA6\x03\x02\x02\x02\u0DA7\u0DA8" +
    "\x03\x02\x02\x02\u0DA8\u01FF\x03\x02\x02\x02\u0DA9\u0DAB\x07\x95\x02\x02" +
    "\u0DAA\u0DAC\x05\u0222\u0112\x02\u0DAB\u0DAA\x03\x02\x02\x02\u0DAB\u0DAC" +
    "\x03\x02\x02\x02\u0DAC\u0201\x03\x02\x02\x02\u0DAD\u0DAE\x07\x1A\x02\x02" +
    "\u0DAE\u0DAF\x07\xA8\x02\x02\u0DAF\u0DB0\x05\u022C\u0117\x02\u0DB0\u0DB1" +
    "\x07\x95\x02\x02\u0DB1\u0DB2\x05\u0220\u0111\x02\u0DB2\u0DB3\x07\x95\x02" +
    "\x02\u0DB3\u0DB5\x05\u0236\u011C\x02\u0DB4\u0DB6\x05\u01F2\xFA\x02\u0DB5" +
    "\u0DB4\x03\x02\x02\x02\u0DB5\u0DB6\x03\x02\x02\x02\u0DB6\u0DB7\x03\x02" +
    "\x02\x02\u0DB7\u0DB8\x07\xB6\x02\x02\u0DB8\u0DB9\x07\xB7\x02\x02\u0DB9" +
    "\u0203\x03\x02\x02\x02\u0DBA\u0DBB\x07\x1C\x02\x02\u0DBB\u0DBC\x07\xA8" +
    "\x02\x02\u0DBC\u0DBD\x05\u022C\u0117\x02\u0DBD\u0DBE\x07\x95\x02\x02\u0DBE" +
    "\u0DBF\x05\u0220\u0111\x02\u0DBF\u0DC0\x07\x95\x02\x02\u0DC0\u0DC2\x05" +
    "\u0236\u011C\x02\u0DC1\u0DC3\x05\u01F2\xFA\x02\u0DC2\u0DC1\x03\x02\x02" +
    "\x02\u0DC2\u0DC3\x03\x02\x02\x02\u0DC3\u0DC4\x03\x02\x02\x02\u0DC4\u0DC5" +
    "\x07\xB6\x02\x02\u0DC5\u0DC6\x07\xB7\x02\x02\u0DC6\u0205\x03\x02\x02\x02" +
    "\u0DC7\u0DC8\x07\x1B\x02\x02\u0DC8\u0DC9\x07\xA8\x02\x02\u0DC9\u0DCA\x05" +
    "\u022C\u0117\x02\u0DCA\u0DCB\x07\x95\x02\x02\u0DCB\u0DCC\x05\u0220\u0111" +
    "\x02\u0DCC\u0DCD\x07\x95\x02\x02\u0DCD\u0DCE\x05\u0236\u011C\x02\u0DCE" +
    "\u0DCF\x07\x95\x02\x02\u0DCF\u0DD1\x05\u0236\u011C\x02\u0DD0\u0DD2\x05" +
    "\u01F8\xFD\x02\u0DD1\u0DD0\x03\x02\x02\x02\u0DD1\u0DD2\x03\x02\x02\x02" +
    "\u0DD2\u0DD3\x03\x02\x02\x02\u0DD3\u0DD4\x07\xB6\x02\x02\u0DD4\u0DD5\x07" +
    "\xB7\x02\x02\u0DD5\u0207\x03\x02\x02\x02\u0DD6\u0DD7\x07\x1F\x02\x02\u0DD7" +
    "\u0DD8\x07\xA8\x02\x02\u0DD8\u0DD9\x05\u022C\u0117\x02\u0DD9\u0DDA\x07" +
    "\x95\x02\x02\u0DDA\u0DDB\x05\u0220\u0111\x02\u0DDB\u0DDC\x07\x95\x02\x02" +
    "\u0DDC\u0DDE\x05\u0236\u011C\x02\u0DDD\u0DDF\x05\u01F2\xFA\x02\u0DDE\u0DDD" +
    "\x03\x02\x02\x02\u0DDE\u0DDF\x03\x02\x02\x02\u0DDF\u0DE0\x03\x02\x02\x02" +
    "\u0DE0\u0DE1\x07\xB6\x02\x02\u0DE1\u0DE2\x07\xB7\x02\x02\u0DE2\u0209\x03" +
    "\x02\x02\x02\u0DE3\u0DE4\x07 \x02\x02\u0DE4\u0DE5\x07\xA8\x02\x02\u0DE5" +
    "\u0DE6\x05\u022C\u0117\x02\u0DE6\u0DE7\x07\x95\x02\x02\u0DE7\u0DE8\x05" +
    "\u0220\u0111\x02\u0DE8\u0DE9\x07\x95\x02\x02\u0DE9\u0DEB\x05\u0236\u011C" +
    "\x02\u0DEA\u0DEC\x05\u020C\u0107\x02\u0DEB\u0DEA\x03\x02\x02\x02\u0DEB" +
    "\u0DEC\x03\x02\x02\x02\u0DEC\u0DED\x03\x02\x02\x02\u0DED\u0DEE\x07\xB6" +
    "\x02\x02\u0DEE\u0DEF\x07\xB7\x02\x02\u0DEF\u020B\x03\x02\x02\x02\u0DF0" +
    "\u0DF2\x07\x95\x02\x02\u0DF1\u0DF3\x05\u022A\u0116\x02\u0DF2\u0DF1\x03" +
    "\x02\x02\x02\u0DF2\u0DF3\x03\x02\x02\x02\u0DF3\u0DF5\x03\x02\x02\x02\u0DF4" +
    "\u0DF6\x05\u020E\u0108\x02\u0DF5\u0DF4\x03\x02\x02\x02\u0DF5\u0DF6\x03" +
    "\x02\x02\x02\u0DF6\u020D\x03\x02\x02\x02\u0DF7\u0DF9\x07\x95\x02\x02\u0DF8" +
    "\u0DFA\x05\u0228\u0115\x02\u0DF9\u0DF8\x03\x02\x02\x02\u0DF9\u0DFA\x03" +
    "\x02\x02\x02\u0DFA\u0DFC\x03\x02\x02\x02\u0DFB\u0DFD\x05\u0210\u0109\x02" +
    "\u0DFC\u0DFB\x03\x02\x02\x02\u0DFC\u0DFD\x03\x02\x02\x02\u0DFD\u020F\x03" +
    "\x02\x02\x02\u0DFE\u0E00\x07\x95\x02\x02\u0DFF\u0E01\x05\u022E\u0118\x02" +
    "\u0E00\u0DFF\x03\x02\x02\x02\u0E00\u0E01\x03\x02\x02\x02\u0E01\u0211\x03" +
    "\x02\x02\x02\u0E02\u0E03\x07\x16\x02\x02\u0E03\u0E04\x07\xA8\x02\x02\u0E04" +
    "\u0E05\x05\u022C\u0117\x02\u0E05\u0E06\x07\x95\x02\x02\u0E06\u0E07\x05" +
    "\u0220\u0111\x02\u0E07\u0E08\x07\x95\x02\x02\u0E08\u0E09\x05\u0236\u011C" +
    "\x02\u0E09\u0E0A\x07\x95\x02\x02\u0E0A\u0E0C\x05\u0236\u011C\x02\u0E0B" +
    "\u0E0D\x05\u020C\u0107\x02\u0E0C\u0E0B\x03\x02\x02\x02\u0E0C\u0E0D\x03" +
    "\x02\x02\x02\u0E0D\u0E0E\x03\x02\x02\x02\u0E0E\u0E0F\x07\xB6\x02\x02\u0E0F" +
    "\u0E10\x07\xB7\x02\x02\u0E10\u0213\x03\x02\x02\x02\u0E11\u0E12\x07\x19" +
    "\x02\x02\u0E12\u0E13\x07\xA8\x02\x02\u0E13\u0E14\x05\u021E\u0110\x02\u0E14" +
    "\u0E15\x07\x95\x02\x02\u0E15\u0E17\x05\u0236\u011C\x02\u0E16\u0E18\x05" +
    "\u01F2\xFA\x02\u0E17\u0E16\x03\x02\x02\x02\u0E17\u0E18\x03\x02\x02\x02" +
    "\u0E18\u0E19\x03\x02\x02\x02\u0E19\u0E1A\x07\xB6\x02\x02\u0E1A\u0E1B\x07" +
    "\xB7\x02\x02\u0E1B\u0215\x03\x02\x02\x02\u0E1C\u0E1D\x07!\x02\x02\u0E1D" +
    "\u0E1E\x07\xA8\x02\x02\u0E1E\u0E1F\x05\u021E\u0110\x02\u0E1F\u0E20\x07" +
    "\x95\x02\x02\u0E20\u0E22\x05\u0236\u011C\x02\u0E21\u0E23\x05\u0218\u010D" +
    "\x02\u0E22\u0E21\x03\x02\x02\x02\u0E22\u0E23\x03\x02\x02\x02\u0E23\u0E24" +
    "\x03\x02\x02\x02\u0E24\u0E25\x07\xB6\x02\x02\u0E25\u0E26\x07\xB7\x02\x02" +
    "\u0E26\u0217\x03\x02\x02\x02\u0E27\u0E28\x07\x95\x02\x02\u0E28\u0E2B\x05" +
    "\u0234\u011B\x02\u0E29\u0E2A\x07\x95\x02\x02\u0E2A\u0E2C\x05\u022A\u0116" +
    "\x02\u0E2B\u0E29\x03\x02\x02\x02\u0E2B\u0E2C\x03\x02\x02\x02\u0E2C\u0219" +
    "\x03\x02\x02\x02\u0E2D\u0E2E\x07\x18\x02\x02\u0E2E\u0E2F\x07\xA8\x02\x02" +
    "\u0E2F\u0E30\x05\u022C\u0117\x02\u0E30\u0E31\x07\x95\x02\x02\u0E31\u0E32" +
    "\x05\u0220\u0111\x02\u0E32\u0E33\x07\x95\x02\x02\u0E33\u0E34\x05\u0232" +
    "\u011A\x02\u0E34\u0E35\x07\x95\x02\x02\u0E35\u0E37\x05\u0226\u0114\x02" +
    "\u0E36\u0E38\x05\u01F2\xFA\x02\u0E37\u0E36\x03\x02\x02\x02\u0E37\u0E38" +
    "\x03\x02\x02\x02\u0E38\u0E39\x03\x02\x02\x02\u0E39\u0E3A\x07\xB6\x02\x02" +
    "\u0E3A\u0E3B\x07\xB7\x02\x02\u0E3B\u021B\x03\x02\x02\x02\u0E3C\u0E3D\x05" +
    "\u0270\u0139\x02\u0E3D\u021D\x03\x02\x02\x02\u0E3E\u0E3F\x05\u023A\u011E" +
    "\x02\u0E3F\u021F\x03\x02\x02\x02\u0E40\u0E41\x05\u0238\u011D\x02\u0E41" +
    "\u0221\x03\x02\x02\x02\u0E42\u0E47\x05\u02F4\u017B\x02\u0E43\u0E44\x07" +
    "\xA6\x02\x02\u0E44\u0E45\x05\u0266\u0134\x02\u0E45\u0E46\x07\xB4\x02\x02" +
    "\u0E46\u0E48\x03\x02\x02\x02\u0E47\u0E43\x03\x02\x02\x02\u0E47\u0E48\x03" +
    "\x02\x02\x02\u0E48\u0223\x03\x02\x02\x02\u0E49\u0E4E\x05\u02F4\u017B\x02" +
    "\u0E4A\u0E4B\x07\xA6\x02\x02\u0E4B\u0E4C\x05\u0266\u0134\x02\u0E4C\u0E4D" +
    "\x07\xB4\x02\x02\u0E4D\u0E4F\x03\x02\x02\x02\u0E4E\u0E4A\x03\x02\x02\x02" +
    "\u0E4E\u0E4F\x03\x02\x02\x02\u0E4F\u0225\x03\x02\x02\x02\u0E50\u0E51\x05" +
    "\u0270\u0139\x02\u0E51\u0227\x03\x02\x02\x02\u0E52\u0E53\x05\u0264\u0133" +
    "\x02\u0E53\u0229\x03\x02\x02\x02\u0E54\u0E55\x05\u02FC\u017F\x02\u0E55" +
    "\u022B\x03\x02\x02\x02\u0E56\u0E57\x05\u0238\u011D\x02\u0E57\u022D\x03" +
    "\x02\x02\x02\u0E58\u0E59\x05\u0264\u0133\x02\u0E59\u022F\x03\x02\x02\x02" +
    "\u0E5A\u0E5B\x05\u0270\u0139\x02\u0E5B\u0231\x03\x02\x02\x02\u0E5C\u0E5D" +
    "\x05\u0270\u0139\x02\u0E5D\u0233\x03\x02\x02\x02\u0E5E\u0E5F\x05\u0264" +
    "\u0133\x02\u0E5F\u0235\x03\x02\x02\x02\u0E60\u0E61\x05\u026C\u0137\x02" +
    "\u0E61\u0237\x03\x02\x02\x02\u0E62\u0E64\x05\u023C\u011F\x02\u0E63\u0E62" +
    "\x03\x02\x02\x02\u0E63\u0E64\x03\x02\x02\x02\u0E64\u0E65\x03\x02\x02\x02" +
    "\u0E65\u0E68\x05\u023E\u0120\x02\u0E66\u0E67\x07\x8D\x02\x02\u0E67\u0E69" +
    "\x05\u0244\u0123\x02\u0E68\u0E66\x03\x02\x02\x02\u0E68\u0E69\x03\x02\x02" +
    "\x02\u0E69\u0239\x03\x02\x02\x02\u0E6A\u0E6B\x05\u023C\u011F\x02\u0E6B" +
    "\u0E6E\x05\u023E\u0120\x02\u0E6C\u0E6D\x07\x8D\x02\x02\u0E6D\u0E6F\x05" +
    "\u0244\u0123\x02\u0E6E\u0E6C\x03\x02\x02\x02\u0E6E\u0E6F\x03\x02\x02\x02" +
    "\u0E6F\u023B\x03\x02\x02\x02\u0E70\u0E74\x07V\x02\x02\u0E71\u0E74\x07" +
    "J\x02\x02\u0E72\u0E74\x05\u0240\u0121\x02\u0E73\u0E70\x03\x02\x02\x02" +
    "\u0E73\u0E71\x03\x02\x02\x02\u0E73\u0E72\x03\x02\x02\x02\u0E74\u023D\x03" +
    "\x02\x02\x02\u0E75\u0E78\x05\u01B2\xDA\x02\u0E76\u0E78\x05\u01B4\xDB\x02" +
    "\u0E77\u0E75\x03\x02\x02\x02\u0E77\u0E76\x03\x02\x02\x02\u0E78\u023F\x03" +
    "\x02\x02\x02\u0E79\u0E7A\x07\"\x02\x02\u0E7A\u0E7B\x07\xA6\x02\x02\u0E7B" +
    "\u0E80\x05\u0242\u0122\x02\u0E7C\u0E7D\x07\x95\x02\x02\u0E7D\u0E7F\x05" +
    "\u0242\u0122\x02\u0E7E\u0E7C\x03\x02\x02\x02\u0E7F\u0E82\x03\x02\x02\x02" +
    "\u0E80\u0E7E\x03\x02\x02\x02\u0E80\u0E81\x03\x02\x02\x02\u0E81\u0E83\x03" +
    "\x02\x02\x02\u0E82\u0E80\x03\x02\x02\x02\u0E83\u0E84\x07\xB4\x02\x02\u0E84" +
    "\u0241\x03\x02\x02\x02\u0E85\u0E86\x07\xCF\x02\x02\u0E86\u0243\x03\x02" +
    "\x02\x02\u0E87\u0E8D\x05\u0246\u0124\x02\u0E88\u0E89\x07\xA8\x02\x02\u0E89" +
    "\u0E8A\x05\u0246\u0124\x02\u0E8A\u0E8B\x07\xB6\x02\x02\u0E8B\u0E8D\x03" +
    "\x02\x02\x02\u0E8C\u0E87\x03\x02\x02\x02\u0E8C\u0E88\x03\x02\x02\x02\u0E8D" +
    "\u0245\x03\x02\x02\x02\u0E8E\u0EA2\x05\u026C\u0137\x02\u0E8F\u0E90\x07" +
    "\xB9\x02\x02\u0E90\u0EA2\x05\u026C\u0137\x02\u0E91\u0E92\x05\u026C\u0137" +
    "\x02\u0E92\u0E93\x07\x9D\x02\x02\u0E93\u0E94\x05\u0248\u0125\x02\u0E94" +
    "\u0EA2\x03\x02\x02\x02\u0E95\u0E96\x05\u026C\u0137\x02\u0E96\u0E97\x07" +
    "\x9E\x02\x02\u0E97\u0E98\x05\u0248\u0125\x02\u0E98\u0EA2\x03\x02\x02\x02" +
    "\u0E99\u0E9A\x05\u026C\u0137\x02\u0E9A\u0E9B\x07\x9A\x02\x02\u0E9B\u0E9C" +
    "\x05\u0248\u0125\x02\u0E9C\u0EA2\x03\x02\x02\x02\u0E9D\u0E9E\x05\u026C" +
    "\u0137\x02\u0E9E\u0E9F\x07\x9B\x02\x02\u0E9F\u0EA0\x05\u0248\u0125\x02" +
    "\u0EA0\u0EA2\x03\x02\x02\x02\u0EA1\u0E8E\x03\x02\x02\x02\u0EA1\u0E8F\x03" +
    "\x02\x02\x02\u0EA1\u0E91\x03\x02\x02\x02\u0EA1\u0E95\x03\x02\x02\x02\u0EA1" +
    "\u0E99\x03\x02\x02\x02\u0EA1\u0E9D\x03\x02\x02\x02\u0EA2\u0247\x03\x02" +
    "\x02\x02\u0EA3\u0EA6\x05\u0298\u014D\x02\u0EA4\u0EA6\x05\u02A4\u0153\x02" +
    "\u0EA5\u0EA3\x03\x02\x02\x02\u0EA5\u0EA4\x03\x02\x02\x02\u0EA6\u0249\x03" +
    "\x02\x02\x02\u0EA7\u0EA8\x07\xA7\x02\x02\u0EA8\u0EAD\x05\u026C\u0137\x02" +
    "\u0EA9\u0EAA\x07\x95\x02\x02\u0EAA\u0EAC\x05\u026C\u0137\x02\u0EAB\u0EA9" +
    "\x03\x02\x02\x02\u0EAC\u0EAF\x03\x02\x02\x02\u0EAD\u0EAB\x03\x02\x02\x02" +
    "\u0EAD\u0EAE\x03\x02\x02\x02\u0EAE\u0EB0\x03\x02\x02\x02\u0EAF\u0EAD\x03" +
    "\x02\x02\x02\u0EB0\u0EB1\x07\xB5\x02\x02\u0EB1\u024B\x03\x02\x02\x02\u0EB2" +
    "\u0EB3\x07\xA7\x02\x02\u0EB3\u0EB8\x05\u0264\u0133\x02\u0EB4\u0EB5\x07" +
    "\x95\x02\x02\u0EB5\u0EB7\x05\u0264\u0133\x02\u0EB6\u0EB4\x03\x02\x02\x02" +
    "\u0EB7\u0EBA\x03\x02\x02\x02\u0EB8\u0EB6\x03\x02\x02\x02\u0EB8\u0EB9\x03" +
    "\x02\x02\x02\u0EB9\u0EBB\x03\x02\x02\x02\u0EBA\u0EB8\x03\x02\x02\x02\u0EBB" +
    "\u0EBC\x07\xB5\x02\x02\u0EBC\u024D\x03\x02\x02\x02\u0EBD\u0EBE\x07\xA7" +
    "\x02\x02\u0EBE\u0EBF\x05\u0264\u0133\x02\u0EBF\u0EC0\x05\u024C\u0127\x02" +
    "\u0EC0\u0EC1\x07\xB5\x02\x02\u0EC1\u024F\x03\x02\x02\x02\u0EC2\u0EC3\x07" +
    "\xA7\x02\x02\u0EC3\u0EC8\x05\u0272\u013A\x02\u0EC4\u0EC5\x07\x95\x02\x02" +
    "\u0EC5\u0EC7\x05\u0272\u013A\x02\u0EC6\u0EC4\x03\x02\x02\x02\u0EC7\u0ECA" +
    "\x03\x02\x02\x02\u0EC8\u0EC6\x03\x02\x02\x02\u0EC8\u0EC9\x03\x02\x02\x02" +
    "\u0EC9\u0ECB\x03\x02\x02\x02\u0ECA\u0EC8\x03\x02\x02\x02\u0ECB\u0ECC\x07" +
    "\xB5\x02\x02\u0ECC\u0251\x03\x02\x02\x02\u0ECD\u0ECE\x07\xA7\x02\x02\u0ECE" +
    "\u0ECF\x05\u0264\u0133\x02\u0ECF\u0ED0\x05\u0250\u0129\x02\u0ED0\u0ED1" +
    "\x07\xB5\x02\x02\u0ED1\u0253\x03\x02\x02\x02\u0ED2\u0ED3\x07\xA7\x02\x02" +
    "\u0ED3\u0ED4\x05\u0264\u0133\x02\u0ED4\u0ED5\x05\u024A\u0126\x02\u0ED5" +
    "\u0ED6\x07\xB5\x02\x02\u0ED6\u0255\x03\x02\x02\x02\u0ED7\u0EDB\x05\u02C8" +
    "\u0165\x02\u0ED8\u0EDA\x05\u02B8\u015D\x02\u0ED9\u0ED8\x03\x02\x02\x02" +
    "\u0EDA\u0EDD\x03\x02\x02\x02\u0EDB\u0ED9\x03\x02\x02\x02\u0EDB\u0EDC\x03" +
    "\x02\x02\x02\u0EDC\u0EDE\x03\x02\x02\x02\u0EDD\u0EDB\x03\x02\x02\x02\u0EDE" +
    "\u0EDF\x07\xA8\x02\x02\u0EDF\u0EE4\x05\u0264\u0133\x02\u0EE0\u0EE1\x07" +
    "\x95\x02\x02\u0EE1\u0EE3\x05\u0264\u0133\x02\u0EE2\u0EE0\x03\x02\x02\x02" +
    "\u0EE3\u0EE6\x03\x02\x02\x02\u0EE4\u0EE2\x03\x02\x02\x02\u0EE4\u0EE5\x03" +
    "\x02\x02\x02\u0EE5\u0EE7\x03\x02\x02\x02\u0EE6\u0EE4\x03\x02\x02\x02\u0EE7" +
    "\u0EE8\x07\xB6\x02\x02\u0EE8\u0257\x03\x02\x02\x02\u0EE9\u0EEA\x05\u02EE" +
    "\u0178\x02\u0EEA\u0EEB\x07\xA8\x02\x02\u0EEB\u0EF0\x05\u0264\u0133\x02" +
    "\u0EEC\u0EED\x07\x95\x02\x02\u0EED\u0EEF\x05\u0264\u0133\x02\u0EEE\u0EEC" +
    "\x03\x02\x02\x02\u0EEF\u0EF2\x03\x02\x02\x02\u0EF0\u0EEE\x03\x02\x02\x02" +
    "\u0EF0\u0EF1\x03\x02\x02\x02\u0EF1\u0EF3\x03\x02\x02\x02\u0EF2\u0EF0\x03" +
    "\x02\x02\x02\u0EF3\u0EF4\x07\xB6\x02\x02\u0EF4\u0259\x03\x02\x02\x02\u0EF5" +
    "\u0EF9\x05\u02D0\u0169\x02\u0EF6\u0EF8\x05\u02B8\u015D\x02\u0EF7\u0EF6" +
    "\x03\x02\x02\x02\u0EF8\u0EFB\x03\x02\x02\x02\u0EF9\u0EF7\x03\x02\x02\x02" +
    "\u0EF9\u0EFA\x03\x02\x02\x02\u0EFA\u0EFC\x03\x02\x02\x02\u0EFB\u0EF9\x03" +
    "\x02\x02\x02\u0EFC\u0EFD\x07\xA8\x02\x02\u0EFD\u0F02\x05\u026C\u0137\x02" +
    "\u0EFE\u0EFF\x07\x95\x02\x02\u0EFF\u0F01\x05\u026C\u0137\x02\u0F00\u0EFE" +
    "\x03\x02\x02\x02\u0F01\u0F04\x03\x02\x02\x02\u0F02\u0F00\x03\x02\x02\x02" +
    "\u0F02\u0F03\x03\x02\x02\x02\u0F03\u0F05\x03\x02\x02\x02\u0F04\u0F02\x03" +
    "\x02\x02\x02\u0F05\u0F06\x07\xB6\x02\x02\u0F06\u025B\x03\x02\x02\x02\u0F07" +
    "\u0F09\x05\u02EE\u0178\x02\u0F08\u0F0A\x05\u025E\u0130\x02\u0F09\u0F08" +
    "\x03\x02\x02\x02\u0F09\u0F0A\x03\x02\x02\x02\u0F0A\u025D\x03\x02\x02\x02" +
    "\u0F0B\u0F0C\x07\xA8\x02\x02\u0F0C\u0F11\x05\u026C\u0137\x02\u0F0D\u0F0E" +
    "\x07\x95\x02\x02\u0F0E\u0F10\x05\u026C\u0137\x02\u0F0F\u0F0D\x03\x02\x02" +
    "\x02\u0F10\u0F13\x03\x02\x02\x02\u0F11\u0F0F\x03\x02\x02\x02\u0F11\u0F12" +
    "\x03\x02\x02\x02\u0F12\u0F14\x03\x02\x02\x02\u0F13\u0F11\x03\x02\x02\x02" +
    "\u0F14\u0F15\x07\xB6\x02\x02\u0F15\u025F\x03\x02\x02\x02\u0F16\u0F17\x05" +
    "\u026C\u0137\x02\u0F17\u0261\x03\x02\x02\x02\u0F18\u0F19\x05\u0264\u0133" +
    "\x02\u0F19\u0263\x03\x02\x02\x02\u0F1A\u0F1B\b\u0133\x01\x02\u0F1B\u0F26" +
    "\x05\u027C\u013F\x02\u0F1C\u0F20\x05\u028E\u0148\x02\u0F1D\u0F1F\x05\u02B8" +
    "\u015D\x02\u0F1E\u0F1D\x03\x02\x02\x02\u0F1F\u0F22\x03\x02\x02\x02\u0F20" +
    "\u0F1E\x03\x02\x02\x02\u0F20\u0F21\x03\x02\x02\x02\u0F21\u0F23\x03\x02" +
    "\x02\x02\u0F22\u0F20\x03\x02\x02\x02\u0F23\u0F24\x05\u027C\u013F\x02\u0F24" +
    "\u0F26\x03\x02\x02\x02\u0F25\u0F1A\x03\x02\x02\x02\u0F25\u0F1C\x03\x02" +
    "\x02\x02\u0F26\u0F98\x03\x02\x02\x02\u0F27\u0F28\f\x0E\x02\x02\u0F28\u0F2C" +
    "\x07\x8F\x02\x02\u0F29\u0F2B\x05\u02B8\u015D\x02\u0F2A\u0F29\x03\x02\x02" +
    "\x02\u0F2B\u0F2E\x03\x02\x02\x02\u0F2C\u0F2A\x03\x02\x02\x02\u0F2C\u0F2D" +
    "\x03\x02\x02\x02\u0F2D\u0F2F\x03\x02\x02\x02\u0F2E\u0F2C\x03\x02\x02\x02" +
    "\u0F2F\u0F97\x05\u0264\u0133\x0F\u0F30\u0F31\f\r\x02\x02\u0F31\u0F35\t" +
    "\x13\x02\x02\u0F32\u0F34\x05\u02B8\u015D\x02\u0F33\u0F32\x03\x02\x02\x02" +
    "\u0F34\u0F37\x03\x02\x02\x02\u0F35\u0F33\x03\x02\x02\x02\u0F35\u0F36\x03" +
    "\x02\x02\x02\u0F36\u0F38\x03\x02\x02\x02\u0F37\u0F35\x03\x02\x02\x02\u0F38" +
    "\u0F97\x05\u0264\u0133\x0E\u0F39\u0F3A\f\f\x02\x02\u0F3A\u0F3E\t\x12\x02" +
    "\x02\u0F3B\u0F3D\x05\u02B8\u015D\x02\u0F3C\u0F3B\x03\x02\x02\x02\u0F3D" +
    "\u0F40\x03\x02\x02\x02\u0F3E\u0F3C\x03\x02\x02\x02\u0F3E\u0F3F\x03\x02" +
    "\x02\x02\u0F3F\u0F41\x03\x02\x02\x02\u0F40\u0F3E\x03\x02\x02\x02\u0F41" +
    "\u0F97\x05\u0264\u0133\r\u0F42\u0F43\f\v\x02\x02\u0F43\u0F47\t\x14\x02" +
    "\x02\u0F44\u0F46\x05\u02B8\u015D\x02\u0F45\u0F44\x03\x02\x02\x02\u0F46" +
    "\u0F49\x03\x02\x02\x02\u0F47\u0F45\x03\x02\x02\x02\u0F47\u0F48\x03\x02" +
    "\x02\x02\u0F48\u0F4A\x03\x02\x02\x02\u0F49\u0F47\x03\x02\x02\x02\u0F4A" +
    "\u0F97\x05\u0264\u0133\f\u0F4B\u0F4C\f\n\x02\x02\u0F4C\u0F50\t\x15\x02" +
    "\x02\u0F4D\u0F4F\x05\u02B8\u015D\x02\u0F4E\u0F4D\x03\x02\x02\x02\u0F4F" +
    "\u0F52\x03\x02\x02\x02\u0F50\u0F4E";
  private static readonly _serializedATNSegment7: string =
    "\x03\x02\x02\x02\u0F50\u0F51\x03\x02\x02\x02\u0F51\u0F53\x03\x02\x02\x02" +
    "\u0F52\u0F50\x03\x02\x02\x02\u0F53\u0F97\x05\u0264\u0133\v\u0F54\u0F55" +
    "\f\t\x02\x02\u0F55\u0F59\t\x16\x02\x02\u0F56\u0F58\x05\u02B8\u015D\x02" +
    "\u0F57\u0F56\x03\x02\x02\x02\u0F58\u0F5B\x03\x02\x02\x02\u0F59\u0F57\x03" +
    "\x02\x02\x02\u0F59\u0F5A\x03\x02\x02\x02\u0F5A\u0F5C\x03\x02\x02\x02\u0F5B" +
    "\u0F59\x03\x02\x02\x02\u0F5C\u0F97\x05\u0264\u0133\n\u0F5D\u0F5E\f\b\x02" +
    "\x02\u0F5E\u0F62\x07\x8B\x02\x02\u0F5F\u0F61\x05\u02B8\u015D\x02\u0F60" +
    "\u0F5F\x03\x02\x02\x02\u0F61\u0F64\x03\x02\x02\x02\u0F62\u0F60\x03\x02" +
    "\x02\x02\u0F62\u0F63\x03\x02\x02\x02\u0F63\u0F65\x03\x02\x02\x02\u0F64" +
    "\u0F62\x03\x02\x02\x02\u0F65\u0F97\x05\u0264\u0133\t\u0F66\u0F67\f\x07" +
    "\x02\x02\u0F67\u0F6B\t\x17\x02\x02\u0F68\u0F6A\x05\u02B8\u015D\x02\u0F69" +
    "\u0F68\x03\x02\x02\x02\u0F6A\u0F6D\x03\x02\x02\x02\u0F6B\u0F69\x03\x02" +
    "\x02\x02\u0F6B\u0F6C\x03\x02\x02\x02\u0F6C\u0F6E\x03\x02\x02\x02\u0F6D" +
    "\u0F6B\x03\x02\x02\x02\u0F6E\u0F97\x05\u0264\u0133\b\u0F6F\u0F70\f\x06" +
    "\x02\x02\u0F70\u0F74\x07\xBD\x02\x02\u0F71\u0F73\x05\u02B8\u015D\x02\u0F72" +
    "\u0F71\x03\x02\x02\x02\u0F73\u0F76\x03\x02\x02\x02\u0F74\u0F72\x03\x02" +
    "\x02\x02\u0F74\u0F75\x03\x02\x02\x02\u0F75\u0F77\x03\x02\x02\x02\u0F76" +
    "\u0F74\x03\x02\x02\x02\u0F77\u0F97\x05\u0264\u0133\x07\u0F78\u0F79\f\x05" +
    "\x02\x02\u0F79\u0F7D\x07\x8C\x02\x02\u0F7A\u0F7C\x05\u02B8\u015D\x02\u0F7B" +
    "\u0F7A\x03\x02\x02\x02\u0F7C\u0F7F\x03\x02\x02\x02\u0F7D\u0F7B\x03\x02" +
    "\x02\x02\u0F7D\u0F7E\x03\x02\x02\x02\u0F7E\u0F80\x03\x02\x02\x02\u0F7F" +
    "\u0F7D\x03\x02\x02\x02\u0F80\u0F97\x05\u0264\u0133\x06\u0F81\u0F82\f\x04" +
    "\x02\x02\u0F82\u0F86\x07\xBE\x02\x02\u0F83\u0F85\x05\u02B8\u015D\x02\u0F84" +
    "\u0F83\x03\x02\x02\x02\u0F85\u0F88\x03\x02\x02\x02\u0F86\u0F84\x03\x02" +
    "\x02\x02\u0F86\u0F87\x03\x02\x02\x02\u0F87\u0F89\x03\x02\x02\x02\u0F88" +
    "\u0F86\x03\x02\x02\x02\u0F89\u0F97\x05\u0264\u0133\x05\u0F8A\u0F8B\f\x03" +
    "\x02\x02\u0F8B\u0F8F\x07\xB3\x02\x02\u0F8C\u0F8E\x05\u02B8\u015D\x02\u0F8D" +
    "\u0F8C\x03\x02\x02\x02\u0F8E\u0F91\x03\x02\x02\x02\u0F8F\u0F8D\x03\x02" +
    "\x02\x02\u0F8F\u0F90\x03\x02\x02\x02\u0F90\u0F92\x03\x02\x02\x02\u0F91" +
    "\u0F8F\x03\x02\x02\x02\u0F92\u0F93\x05\u0264\u0133\x02\u0F93\u0F94\x07" +
    "\x94\x02\x02\u0F94\u0F95\x05\u0264\u0133\x03\u0F95\u0F97\x03\x02\x02\x02" +
    "\u0F96\u0F27\x03\x02\x02\x02\u0F96\u0F30\x03\x02\x02\x02\u0F96\u0F39\x03" +
    "\x02\x02\x02\u0F96\u0F42\x03\x02\x02\x02\u0F96\u0F4B\x03\x02\x02\x02\u0F96" +
    "\u0F54\x03\x02\x02\x02\u0F96\u0F5D\x03\x02\x02\x02\u0F96\u0F66\x03\x02" +
    "\x02\x02\u0F96\u0F6F\x03\x02\x02\x02\u0F96\u0F78\x03\x02\x02\x02\u0F96" +
    "\u0F81\x03\x02\x02\x02\u0F96\u0F8A\x03\x02\x02\x02\u0F97\u0F9A\x03\x02" +
    "\x02\x02\u0F98\u0F96\x03\x02\x02\x02\u0F98\u0F99\x03\x02\x02\x02\u0F99" +
    "\u0265\x03\x02\x02\x02\u0F9A\u0F98\x03\x02\x02\x02\u0F9B\u0FA1\x05\u0264" +
    "\u0133\x02\u0F9C\u0F9D\x07\x94\x02\x02\u0F9D\u0F9E\x05\u0264\u0133\x02" +
    "\u0F9E\u0F9F\x07\x94\x02\x02\u0F9F\u0FA0\x05\u0264\u0133\x02\u0FA0\u0FA2" +
    "\x03\x02\x02\x02\u0FA1\u0F9C\x03\x02\x02\x02\u0FA1\u0FA2\x03\x02\x02\x02" +
    "\u0FA2\u0267\x03\x02\x02\x02\u0FA3\u0FB1\x05\u0264\u0133\x02\u0FA4\u0FA5" +
    "\x05\u0276\u013C\x02\u0FA5\u0FA6\x07\x94\x02\x02\u0FA6\u0FA7\x05\u026E" +
    "\u0138\x02\u0FA7\u0FB1\x03\x02\x02\x02\u0FA8\u0FA9\x05\u0262\u0132\x02" +
    "\u0FA9\u0FAA\x07\xB2\x02\x02\u0FAA\u0FAB\x05\u027A\u013E\x02\u0FAB\u0FB1" +
    "\x03\x02\x02\x02\u0FAC\u0FAD\x05\u0262\u0132\x02\u0FAD\u0FAE\x07\xAE\x02" +
    "\x02\u0FAE\u0FAF\x05\u027A\u013E\x02\u0FAF\u0FB1\x03\x02\x02\x02\u0FB0" +
    "\u0FA3\x03\x02\x02\x02\u0FB0\u0FA4\x03\x02\x02\x02\u0FB0\u0FA8\x03\x02" +
    "\x02\x02\u0FB0\u0FAC\x03\x02\x02\x02\u0FB1\u0269\x03\x02\x02\x02\u0FB2" +
    "\u0FB3\x05\u0264\u0133\x02\u0FB3\u026B\x03\x02\x02\x02\u0FB4\u0FB5\b\u0137" +
    "\x01\x02\u0FB5\u0FC0\x05\u0280\u0141\x02\u0FB6\u0FBA\x05\u028E\u0148\x02" +
    "\u0FB7\u0FB9\x05\u02B8\u015D\x02\u0FB8\u0FB7\x03\x02\x02\x02\u0FB9\u0FBC" +
    "\x03\x02\x02\x02\u0FBA\u0FB8\x03\x02\x02\x02\u0FBA\u0FBB\x03\x02\x02\x02" +
    "\u0FBB\u0FBD\x03\x02\x02\x02\u0FBC\u0FBA\x03\x02\x02\x02\u0FBD\u0FBE\x05" +
    "\u0280\u0141\x02\u0FBE\u0FC0\x03\x02\x02\x02\u0FBF\u0FB4\x03\x02\x02\x02" +
    "\u0FBF\u0FB6\x03\x02\x02\x02\u0FC0\u1032\x03\x02\x02\x02\u0FC1\u0FC2\f" +
    "\x0E\x02\x02\u0FC2\u0FC6\x07\x8F\x02\x02\u0FC3\u0FC5\x05\u02B8\u015D\x02" +
    "\u0FC4\u0FC3\x03\x02\x02\x02\u0FC5\u0FC8\x03\x02\x02\x02\u0FC6\u0FC4\x03" +
    "\x02\x02\x02\u0FC6\u0FC7\x03\x02\x02\x02\u0FC7\u0FC9\x03\x02\x02\x02\u0FC8" +
    "\u0FC6\x03\x02\x02\x02\u0FC9\u1031\x05\u026C\u0137\x0F\u0FCA\u0FCB\f\r" +
    "\x02\x02\u0FCB\u0FCF\t\x13\x02\x02\u0FCC\u0FCE\x05\u02B8\u015D\x02\u0FCD" +
    "\u0FCC\x03\x02\x02\x02\u0FCE\u0FD1\x03\x02\x02\x02\u0FCF\u0FCD\x03\x02" +
    "\x02\x02\u0FCF\u0FD0\x03\x02\x02\x02\u0FD0\u0FD2\x03\x02\x02\x02\u0FD1" +
    "\u0FCF\x03\x02\x02\x02\u0FD2\u1031\x05\u026C\u0137\x0E\u0FD3\u0FD4\f\f" +
    "\x02\x02\u0FD4\u0FD8\t\x12\x02\x02\u0FD5\u0FD7\x05\u02B8\u015D\x02\u0FD6" +
    "\u0FD5\x03\x02\x02\x02\u0FD7\u0FDA\x03\x02\x02\x02\u0FD8\u0FD6\x03\x02" +
    "\x02\x02\u0FD8\u0FD9\x03\x02\x02\x02\u0FD9\u0FDB\x03\x02\x02\x02\u0FDA" +
    "\u0FD8\x03\x02\x02\x02\u0FDB\u1031\x05\u026C\u0137\r\u0FDC\u0FDD\f\v\x02" +
    "\x02\u0FDD\u0FE1\t\x14\x02\x02\u0FDE\u0FE0\x05\u02B8\u015D\x02\u0FDF\u0FDE" +
    "\x03\x02\x02\x02\u0FE0\u0FE3\x03\x02\x02\x02\u0FE1\u0FDF\x03\x02\x02\x02" +
    "\u0FE1\u0FE2\x03\x02\x02\x02\u0FE2\u0FE4\x03\x02\x02\x02\u0FE3\u0FE1\x03" +
    "\x02\x02\x02\u0FE4\u1031\x05\u026C\u0137\f\u0FE5\u0FE6\f\n\x02\x02\u0FE6" +
    "\u0FEA\t\x15\x02\x02\u0FE7\u0FE9\x05\u02B8\u015D\x02\u0FE8\u0FE7\x03\x02" +
    "\x02\x02\u0FE9\u0FEC\x03\x02\x02\x02\u0FEA\u0FE8\x03\x02\x02\x02\u0FEA" +
    "\u0FEB\x03\x02\x02\x02\u0FEB\u0FED\x03\x02\x02\x02\u0FEC\u0FEA\x03\x02" +
    "\x02\x02\u0FED\u1031\x05\u026C\u0137\v\u0FEE\u0FEF\f\t\x02\x02\u0FEF\u0FF3" +
    "\t\x16\x02\x02\u0FF0\u0FF2\x05\u02B8\u015D\x02\u0FF1\u0FF0\x03\x02\x02" +
    "\x02\u0FF2\u0FF5\x03\x02\x02\x02\u0FF3\u0FF1\x03\x02\x02\x02\u0FF3\u0FF4" +
    "\x03\x02\x02\x02\u0FF4\u0FF6\x03\x02\x02\x02\u0FF5\u0FF3\x03\x02\x02\x02" +
    "\u0FF6\u1031\x05\u026C\u0137\n\u0FF7\u0FF8\f\b\x02\x02\u0FF8\u0FFC\x07" +
    "\x8B\x02\x02\u0FF9\u0FFB\x05\u02B8\u015D\x02\u0FFA\u0FF9\x03\x02\x02\x02" +
    "\u0FFB\u0FFE\x03\x02\x02\x02\u0FFC\u0FFA\x03\x02\x02\x02\u0FFC\u0FFD\x03" +
    "\x02\x02\x02\u0FFD\u0FFF\x03\x02\x02\x02\u0FFE\u0FFC\x03\x02\x02\x02\u0FFF" +
    "\u1031\x05\u026C\u0137\t\u1000\u1001\f\x07\x02\x02\u1001\u1005\t\x17\x02" +
    "\x02\u1002\u1004\x05\u02B8\u015D\x02\u1003\u1002\x03\x02\x02\x02\u1004" +
    "\u1007\x03\x02\x02\x02\u1005\u1003\x03\x02\x02\x02\u1005\u1006\x03\x02" +
    "\x02\x02\u1006\u1008\x03\x02\x02\x02\u1007\u1005\x03\x02\x02\x02\u1008" +
    "\u1031\x05\u026C\u0137\b\u1009\u100A\f\x06\x02\x02\u100A\u100E\x07\xBD" +
    "\x02\x02\u100B\u100D\x05\u02B8\u015D\x02\u100C\u100B\x03\x02\x02\x02\u100D" +
    "\u1010\x03\x02\x02\x02\u100E\u100C\x03\x02\x02\x02\u100E\u100F\x03\x02" +
    "\x02\x02\u100F\u1011\x03\x02\x02\x02\u1010\u100E\x03\x02\x02\x02\u1011" +
    "\u1031\x05\u026C\u0137\x07\u1012\u1013\f\x05\x02\x02\u1013\u1017\x07\x8C" +
    "\x02\x02\u1014\u1016\x05\u02B8\u015D\x02\u1015\u1014\x03\x02\x02\x02\u1016" +
    "\u1019\x03\x02\x02\x02\u1017\u1015\x03\x02\x02\x02\u1017\u1018\x03\x02" +
    "\x02\x02\u1018\u101A\x03\x02\x02\x02\u1019\u1017\x03\x02\x02\x02\u101A" +
    "\u1031\x05\u026C\u0137\x06\u101B\u101C\f\x04\x02\x02\u101C\u1020\x07\xBE" +
    "\x02\x02\u101D\u101F\x05\u02B8\u015D\x02\u101E\u101D\x03\x02\x02\x02\u101F" +
    "\u1022\x03\x02\x02\x02\u1020\u101E\x03\x02\x02\x02\u1020\u1021\x03\x02" +
    "\x02\x02\u1021\u1023\x03\x02\x02\x02\u1022\u1020\x03\x02\x02\x02\u1023" +
    "\u1031\x05\u026C\u0137\x05\u1024\u1025\f\x03\x02\x02\u1025\u1029\x07\xB3" +
    "\x02\x02\u1026\u1028\x05\u02B8\u015D\x02\u1027\u1026\x03\x02\x02\x02\u1028" +
    "\u102B\x03\x02\x02\x02\u1029\u1027\x03\x02\x02\x02\u1029\u102A\x03\x02" +
    "\x02\x02\u102A\u102C\x03\x02\x02\x02\u102B\u1029\x03\x02\x02\x02\u102C" +
    "\u102D\x05\u026C\u0137\x02\u102D\u102E\x07\x94\x02\x02\u102E\u102F\x05" +
    "\u026C\u0137\x03\u102F\u1031\x03\x02\x02\x02\u1030\u0FC1\x03\x02\x02\x02" +
    "\u1030\u0FCA\x03\x02\x02\x02\u1030\u0FD3\x03\x02\x02\x02\u1030\u0FDC\x03" +
    "\x02\x02\x02\u1030\u0FE5\x03\x02\x02\x02\u1030\u0FEE\x03\x02\x02\x02\u1030" +
    "\u0FF7\x03\x02\x02\x02\u1030\u1000\x03\x02\x02\x02\u1030\u1009\x03\x02" +
    "\x02\x02\u1030\u1012\x03\x02\x02\x02\u1030\u101B\x03\x02\x02\x02\u1030" +
    "\u1024\x03\x02\x02\x02\u1031\u1034\x03\x02\x02\x02\u1032\u1030\x03\x02" +
    "\x02\x02\u1032\u1033\x03\x02\x02\x02\u1033\u026D\x03\x02\x02\x02\u1034" +
    "\u1032\x03\x02\x02\x02\u1035\u1036\x05\u0264\u0133\x02\u1036\u026F\x03" +
    "\x02\x02\x02\u1037\u103D\x05\u026C\u0137\x02\u1038\u1039\x07\x94\x02\x02" +
    "\u1039\u103A\x05\u026C\u0137\x02\u103A\u103B\x07\x94\x02\x02\u103B\u103C" +
    "\x05\u026C\u0137\x02\u103C\u103E\x03\x02\x02\x02\u103D\u1038\x03\x02\x02" +
    "\x02\u103D\u103E\x03\x02\x02\x02\u103E\u0271\x03\x02\x02\x02\u103F\u1040" +
    "\b\u013A\x01\x02\u1040\u104B\x05\u027E\u0140\x02\u1041\u1045\x05\u0290" +
    "\u0149\x02\u1042\u1044\x05\u02B8\u015D\x02\u1043\u1042\x03\x02\x02\x02" +
    "\u1044\u1047\x03\x02\x02\x02\u1045\u1043\x03\x02\x02\x02\u1045\u1046\x03" +
    "\x02\x02\x02\u1046\u1048\x03\x02\x02\x02\u1047\u1045\x03\x02\x02\x02\u1048" +
    "\u1049\x05\u027E\u0140\x02\u1049\u104B\x03\x02\x02\x02\u104A\u103F\x03" +
    "\x02\x02\x02\u104A\u1041\x03\x02\x02\x02\u104B\u1090\x03\x02\x02\x02\u104C" +
    "\u104D\f\t\x02\x02\u104D\u1051\t\x18\x02\x02\u104E\u1050\x05\u02B8\u015D" +
    "\x02\u104F\u104E\x03\x02\x02\x02\u1050\u1053\x03\x02\x02\x02\u1051\u104F" +
    "\x03\x02\x02\x02\u1051\u1052\x03\x02\x02\x02\u1052\u1054\x03\x02\x02\x02" +
    "\u1053\u1051\x03\x02\x02\x02\u1054\u108F\x05\u0272\u013A\n\u1055\u1056" +
    "\f\b\x02\x02\u1056\u105A\x07\x8B\x02\x02\u1057\u1059\x05\u02B8\u015D\x02" +
    "\u1058\u1057\x03\x02\x02\x02\u1059\u105C\x03\x02\x02\x02\u105A\u1058\x03" +
    "\x02\x02\x02\u105A\u105B\x03\x02\x02\x02\u105B\u105D\x03\x02\x02\x02\u105C" +
    "\u105A\x03\x02\x02\x02\u105D\u108F\x05\u0272\u013A\t\u105E\u105F\f\x07" +
    "\x02\x02\u105F\u1063\t\x17\x02\x02\u1060\u1062\x05\u02B8\u015D\x02\u1061" +
    "\u1060\x03\x02\x02\x02\u1062\u1065\x03\x02\x02\x02\u1063\u1061\x03\x02" +
    "\x02\x02\u1063\u1064\x03\x02\x02\x02\u1064\u1066\x03\x02\x02\x02\u1065" +
    "\u1063\x03\x02\x02\x02\u1066\u108F\x05\u0272\u013A\b\u1067\u1068\f\x06" +
    "\x02\x02\u1068\u106C\x07\xBD\x02\x02\u1069\u106B\x05\u02B8\u015D\x02\u106A" +
    "\u1069\x03\x02\x02\x02\u106B\u106E\x03\x02\x02\x02\u106C\u106A\x03\x02" +
    "\x02\x02\u106C\u106D\x03\x02\x02\x02\u106D\u106F\x03\x02\x02\x02\u106E" +
    "\u106C\x03\x02\x02\x02\u106F\u108F\x05\u0272\u013A\x07\u1070\u1071\f\x05" +
    "\x02\x02\u1071\u1075\x07\x8C\x02\x02\u1072\u1074\x05\u02B8\u015D\x02\u1073" +
    "\u1072\x03\x02\x02\x02\u1074\u1077\x03\x02\x02\x02\u1075\u1073\x03\x02" +
    "\x02\x02\u1075\u1076\x03\x02\x02\x02\u1076\u1078\x03\x02\x02\x02\u1077" +
    "\u1075\x03\x02\x02\x02\u1078\u108F\x05\u0272\u013A\x06\u1079\u107A\f\x04" +
    "\x02\x02\u107A\u107E\x07\xBE\x02\x02\u107B\u107D\x05\u02B8\u015D\x02\u107C" +
    "\u107B\x03\x02\x02\x02\u107D\u1080\x03\x02\x02\x02\u107E\u107C\x03\x02" +
    "\x02\x02\u107E\u107F\x03\x02\x02\x02\u107F\u1081\x03\x02\x02\x02\u1080" +
    "\u107E\x03\x02\x02\x02\u1081\u108F\x05\u0272\u013A\x05\u1082\u1083\f\x03" +
    "\x02\x02\u1083\u1087\x07\xB3\x02\x02\u1084\u1086\x05\u02B8\u015D\x02\u1085" +
    "\u1084\x03\x02\x02\x02\u1086\u1089\x03\x02\x02\x02\u1087\u1085\x03\x02" +
    "\x02\x02\u1087\u1088\x03\x02\x02\x02\u1088\u108A\x03\x02\x02\x02\u1089" +
    "\u1087\x03\x02\x02\x02\u108A\u108B\x05\u0272\u013A\x02\u108B\u108C\x07" +
    "\x94\x02\x02\u108C\u108D\x05\u0272\u013A\x03\u108D\u108F\x03\x02\x02\x02" +
    "\u108E\u104C\x03\x02\x02\x02\u108E\u1055\x03\x02\x02\x02\u108E\u105E\x03" +
    "\x02\x02\x02\u108E\u1067\x03\x02\x02\x02\u108E\u1070\x03\x02\x02\x02\u108E" +
    "\u1079\x03\x02\x02\x02\u108E\u1082\x03\x02\x02\x02\u108F\u1092\x03\x02" +
    "\x02\x02\u1090\u108E\x03\x02\x02\x02\u1090\u1091\x03\x02\x02\x02\u1091" +
    "\u0273\x03\x02\x02\x02\u1092\u1090\x03\x02\x02\x02\u1093\u1099\x05\u0272" +
    "\u013A\x02\u1094\u1095\x07\x94\x02\x02\u1095\u1096\x05\u0272\u013A\x02" +
    "\u1096\u1097\x07\x94\x02\x02\u1097\u1098\x05\u0272\u013A\x02\u1098\u109A" +
    "\x03\x02\x02\x02\u1099\u1094\x03\x02\x02\x02\u1099\u109A\x03\x02\x02\x02" +
    "\u109A\u0275\x03\x02\x02\x02\u109B\u109C\x05\u0264\u0133\x02\u109C\u0277" +
    "\x03\x02\x02\x02\u109D\u10AB\x05\u026C\u0137\x02\u109E\u109F\x05\u0276" +
    "\u013C\x02\u109F\u10A0\x07\x94\x02\x02\u10A0\u10A1\x05\u026E\u0138\x02" +
    "\u10A1\u10AB\x03\x02\x02\x02\u10A2\u10A3\x05\u0260\u0131\x02\u10A3\u10A4" +
    "\x07\xB2\x02\x02\u10A4\u10A5\x05\u027A\u013E\x02\u10A5\u10AB\x03\x02\x02" +
    "\x02\u10A6\u10A7\x05\u0260\u0131\x02\u10A7\u10A8\x07\xAE\x02\x02\u10A8" +
    "\u10A9\x05\u027A\u013E\x02\u10A9\u10AB\x03\x02\x02\x02\u10AA\u109D\x03" +
    "\x02\x02\x02\u10AA\u109E\x03\x02\x02\x02\u10AA\u10A2\x03\x02\x02\x02\u10AA" +
    "\u10A6\x03\x02\x02\x02\u10AB\u0279\x03\x02\x02\x02\u10AC\u10AD\x05\u0264" +
    "\u0133\x02\u10AD\u027B\x03\x02\x02\x02\u10AE\u10C0\x05\u0292\u014A\x02" +
    "\u10AF\u10B4\x05\u02D4\u016B\x02\u10B0\u10B1\x07\xA6\x02\x02\u10B1\u10B2" +
    "\x05\u0268\u0135\x02\u10B2\u10B3\x07\xB4\x02\x02\u10B3\u10B5\x03\x02\x02" +
    "\x02\u10B4\u10B0\x03\x02\x02\x02\u10B4\u10B5\x03\x02\x02\x02\u10B5\u10C0" +
    "\x03\x02\x02\x02\u10B6\u10C0\x05\u024C\u0127\x02\u10B7\u10C0\x05\u024E" +
    "\u0128\x02\u10B8\u10C0\x05\u0256\u012C\x02\u10B9\u10C0\x05\u0258\u012D" +
    "\x02\u10BA\u10BB\x07\xA8\x02\x02\u10BB\u10BC\x05\u0266\u0134\x02\u10BC" +
    "\u10BD\x07\xB6\x02\x02\u10BD\u10C0\x03\x02\x02\x02\u10BE\u10C0\x05\u02B6" +
    "\u015C\x02\u10BF\u10AE\x03\x02\x02\x02\u10BF\u10AF\x03\x02\x02\x02\u10BF" +
    "\u10B6\x03\x02\x02\x02\u10BF\u10B7\x03\x02\x02\x02\u10BF\u10B8\x03\x02" +
    "\x02\x02\u10BF\u10B9\x03\x02\x02\x02\u10BF\u10BA\x03\x02\x02\x02\u10BF" +
    "\u10BE\x03\x02\x02\x02\u10C0\u027D\x03\x02\x02\x02\u10C1\u10CC\x05\u0292" +
    "\u014A\x02\u10C2\u10CC\x05\u02D4\u016B\x02\u10C3\u10CC\x05\u0250\u0129" +
    "\x02\u10C4\u10CC\x05\u0252\u012A\x02\u10C5\u10CC\x05\u025A\u012E\x02\u10C6" +
    "\u10CC\x05\u025C\u012F\x02\u10C7\u10C8\x07\xA8\x02\x02\u10C8\u10C9\x05" +
    "\u0274\u013B\x02\u10C9\u10CA\x07\xB6\x02\x02\u10CA\u10CC\x03\x02\x02\x02" +
    "\u10CB\u10C1\x03\x02\x02\x02\u10CB\u10C2\x03\x02\x02\x02\u10CB\u10C3\x03" +
    "\x02\x02\x02\u10CB\u10C4\x03\x02\x02\x02\u10CB\u10C5\x03\x02\x02\x02\u10CB" +
    "\u10C6\x03\x02\x02\x02\u10CB\u10C7\x03\x02\x02\x02\u10CC\u027F\x03\x02" +
    "\x02\x02\u10CD\u10DC\x05\u0292\u014A\x02\u10CE\u10D0\x05\u02D0\u0169\x02" +
    "\u10CF\u10D1\x05\u0282\u0142\x02\u10D0\u10CF\x03\x02\x02\x02\u10D0\u10D1" +
    "\x03\x02\x02\x02\u10D1\u10DC\x03\x02\x02\x02\u10D2\u10DC\x05\u024A\u0126" +
    "\x02\u10D3\u10DC\x05\u0254\u012B\x02\u10D4\u10DC\x05\u025A\u012E\x02\u10D5" +
    "\u10DC\x05\u025C\u012F\x02\u10D6\u10D7\x07\xA8\x02\x02\u10D7\u10D8\x05" +
    "\u0270\u0139\x02\u10D8\u10D9\x07\xB6\x02\x02\u10D9\u10DC\x03\x02\x02\x02" +
    "\u10DA\u10DC\x05\u02B6\u015C\x02\u10DB\u10CD\x03\x02\x02\x02\u10DB\u10CE" +
    "\x03\x02\x02\x02\u10DB\u10D2\x03\x02\x02\x02\u10DB\u10D3\x03\x02\x02\x02" +
    "\u10DB\u10D4\x03\x02\x02\x02\u10DB\u10D5\x03\x02\x02\x02\u10DB\u10D6\x03" +
    "\x02\x02\x02\u10DB\u10DA\x03\x02\x02\x02\u10DC\u0281\x03\x02\x02\x02\u10DD" +
    "\u10DF\x05\u0284\u0143\x02\u10DE\u10DD\x03\x02\x02\x02\u10DE\u10DF\x03" +
    "\x02\x02\x02\u10DF\u10E0\x03\x02\x02\x02\u10E0\u10E1\x07\xA6\x02\x02\u10E1" +
    "\u10E2\x05\u0278\u013D\x02\u10E2\u10E3\x07\xB4\x02\x02\u10E3\u0283\x03" +
    "\x02\x02\x02\u10E4\u10E5\x07\xA6\x02\x02\u10E5\u10E6\x05\u026C\u0137\x02" +
    "\u10E6\u10E7\x07\xB4\x02\x02\u10E7\u10E9\x03\x02\x02\x02\u10E8\u10E4\x03" +
    "\x02\x02\x02\u10E9\u10EA\x03\x02\x02\x02\u10EA\u10E8\x03\x02\x02\x02\u10EA" +
    "\u10EB\x03\x02\x02\x02\u10EB\u0285\x03\x02\x02\x02\u10EC\u10EE\x05\u02D0" +
    "\u0169\x02\u10ED\u10EF\x05\u0288\u0145\x02\u10EE\u10ED\x03\x02\x02\x02" +
    "\u10EE\u10EF\x03\x02\x02\x02\u10EF\u10FC\x03\x02\x02\x02\u10F0\u10F1\x07" +
    "\xA7\x02\x02\u10F1\u10F6\x05\u0286\u0144\x02\u10F2\u10F3\x07\x95\x02\x02" +
    "\u10F3\u10F5\x05\u0286\u0144\x02\u10F4\u10F2\x03\x02\x02\x02\u10F5\u10F8" +
    "\x03\x02\x02\x02\u10F6\u10F4\x03\x02\x02\x02\u10F6\u10F7\x03\x02\x02\x02" +
    "\u10F7\u10F9\x03\x02\x02\x02\u10F8\u10F6\x03\x02\x02\x02\u10F9\u10FA\x07" +
    "\xB5\x02\x02\u10FA\u10FC\x03\x02\x02\x02\u10FB\u10EC\x03\x02\x02\x02\u10FB" +
    "\u10F0\x03\x02\x02\x02\u10FC\u0287\x03\x02\x02\x02\u10FD\u10FF\x05\u028A" +
    "\u0146\x02\u10FE\u10FD\x03\x02\x02\x02\u10FE\u10FF\x03\x02\x02\x02\u10FF" +
    "\u1100\x03\x02\x02\x02\u1100\u1101\x07\xA6\x02\x02\u1101\u1102\x05\u0268" +
    "\u0135\x02\u1102\u1103\x07\xB4\x02\x02\u1103\u0289\x03\x02\x02\x02\u1104" +
    "\u1105\x07\xA6\x02\x02\u1105\u1106\x05\u0264\u0133\x02\u1106\u1107\x07" +
    "\xB4\x02\x02\u1107\u1109\x03\x02\x02\x02\u1108\u1104\x03\x02\x02\x02\u1109" +
    "\u110A\x03\x02\x02\x02\u110A\u1108\x03\x02\x02\x02\u110A\u110B\x03\x02" +
    "\x02\x02\u110B\u028B\x03\x02\x02\x02\u110C\u110E\x05\u02D0\u0169\x02\u110D" +
    "\u110F\x05\u0282\u0142\x02\u110E\u110D\x03\x02\x02\x02\u110E\u110F\x03" +
    "\x02\x02\x02\u110F\u111C\x03\x02\x02\x02\u1110\u1111\x07\xA7\x02\x02\u1111" +
    "\u1116\x05\u028C\u0147\x02\u1112\u1113\x07\x95\x02\x02\u1113\u1115\x05" +
    "\u028C\u0147\x02\u1114\u1112\x03\x02\x02\x02\u1115\u1118\x03\x02\x02\x02" +
    "\u1116\u1114\x03\x02\x02\x02\u1116\u1117\x03\x02\x02\x02\u1117\u1119\x03" +
    "\x02\x02\x02\u1118\u1116\x03\x02\x02\x02\u1119\u111A\x07\xB5\x02\x02\u111A" +
    "\u111C\x03\x02\x02\x02\u111B\u110C\x03\x02\x02\x02\u111B\u1110\x03\x02" +
    "\x02\x02\u111C\u028D\x03\x02\x02\x02\u111D\u111E\t\x19\x02\x02\u111E\u028F" +
    "\x03\x02\x02\x02\u111F\u1120\t\x1A\x02\x02\u1120\u0291\x03\x02\x02\x02" +
    "\u1121\u1127\x05\u0296\u014C\x02\u1122\u1127\x05\u029A\u014E\x02\u1123" +
    "\u1127\x05\u0298\u014D\x02\u1124\u1127\x05\u029C\u014F\x02\u1125\u1127" +
    "\x05\u0294\u014B\x02\u1126\u1121\x03\x02\x02\x02\u1126\u1122\x03\x02\x02" +
    "\x02\u1126\u1123\x03\x02\x02\x02\u1126\u1124\x03\x02\x02\x02\u1126\u1125" +
    "\x03\x02\x02\x02\u1127\u0293\x03\x02\x02\x02\u1128\u112B\x05\u02A0\u0151" +
    "\x02\u1129\u112B\x05\u02A2\u0152\x02\u112A\u1128\x03\x02\x02\x02\u112A" +
    "\u1129\x03\x02\x02\x02\u112B\u0295\x03\x02\x02\x02\u112C\u1134\x05\u02A4" +
    "\u0153\x02\u112D\u112F\x05\u029E\u0150\x02\u112E\u112D\x03\x02\x02\x02" +
    "\u112E\u112F\x03\x02\x02\x02\u112F\u1130\x03\x02\x02\x02\u1130\u1131\x05" +
    "\u02AE\u0158\x02\u1131\u1132\x05\u02A6\u0154\x02\u1132\u1134\x03\x02\x02" +
    "\x02\u1133\u112C\x03\x02\x02\x02\u1133\u112E\x03\x02\x02\x02\u1134\u0297" +
    "\x03\x02\x02\x02\u1135\u1137\x05\u029E\u0150\x02\u1136\u1135\x03\x02\x02" +
    "\x02\u1136\u1137\x03\x02\x02\x02\u1137\u1138\x03\x02\x02\x02\u1138\u1139" +
    "\x05\u02B0\u0159\x02\u1139\u113A\x05\u02A8\u0155\x02\u113A\u0299\x03\x02" +
    "\x02\x02\u113B\u113D\x05\u029E\u0150\x02\u113C\u113B\x03\x02\x02\x02\u113C" +
    "\u113D\x03\x02\x02\x02\u113D\u113E\x03\x02\x02\x02\u113E\u113F\x05\u02B2" +
    "\u015A\x02\u113F\u1140\x05\u02AA\u0156\x02\u1140\u029B\x03\x02\x02\x02" +
    "\u1141\u1143\x05\u029E\u0150\x02\u1142\u1141\x03\x02\x02\x02\u1142\u1143" +
    "\x03\x02\x02\x02\u1143\u1144\x03\x02\x02\x02\u1144\u1145\x05\u02B4\u015B" +
    "\x02\u1145\u1146\x05\u02AC\u0157\x02\u1146\u029D\x03\x02\x02\x02\u1147" +
    "\u1148\x07\xCB\x02\x02\u1148\u029F\x03\x02\x02\x02\u1149\u114A\x07\xC4" +
    "\x02\x02\u114A\u02A1\x03\x02\x02\x02\u114B\u114C\x07\xC3\x02\x02\u114C" +
    "\u02A3\x03\x02\x02\x02\u114D\u114E\x07\xCB\x02\x02\u114E\u02A5\x03\x02" +
    "\x02\x02\u114F\u1150\t\x1B\x02\x02\u1150\u02A7\x03\x02\x02\x02\u1151\u1152" +
    "\x07\xCD\x02\x02\u1152\u02A9\x03\x02\x02\x02\u1153\u1154\x07\xD2\x02\x02" +
    "\u1154\u02AB\x03\x02\x02\x02\u1155\u1156\x07\xD0\x02\x02\u1156\u02AD\x03" +
    "\x02\x02\x02\u1157\u1158\x07\xC1\x02\x02\u1158\u02AF\x03\x02\x02\x02\u1159" +
    "\u115A\x07\xBF\x02\x02\u115A\u02B1\x03\x02\x02\x02\u115B\u115C\x07\xC7" +
    "\x02\x02\u115C\u02B3\x03\x02\x02\x02\u115D\u115E\x07\xC5\x02\x02\u115E" +
    "\u02B5\x03\x02\x02\x02\u115F\u1160\x07\xC9\x02\x02\u1160\u02B7\x03\x02" +
    "\x02\x02\u1161\u1162\x07\xA8\x02\x02\u1162\u1163\x07\x8E\x02\x02\u1163" +
    "\u1168\x05\u02BA\u015E\x02\u1164\u1165\x07\x95\x02\x02\u1165\u1167\x05" +
    "\u02BA\u015E\x02\u1166\u1164\x03\x02\x02\x02\u1167\u116A\x03\x02\x02\x02" +
    "\u1168\u1166\x03\x02\x02\x02\u1168\u1169\x03\x02\x02\x02\u1169\u116B\x03" +
    "\x02\x02\x02\u116A\u1168\x03\x02\x02\x02\u116B\u116C\x07\x8E\x02\x02\u116C" +
    "\u116D\x07\xB6\x02\x02\u116D\u02B9\x03\x02\x02\x02\u116E\u1171\x05\u02BC" +
    "\u015F\x02\u116F\u1170\x07\x9C\x02\x02\u1170\u1172\x05\u0264\u0133\x02" +
    "\u1171\u116F\x03\x02\x02\x02\u1171\u1172\x03\x02\x02\x02\u1172\u02BB\x03" +
    "\x02\x02\x02\u1173\u1174\x05\u02D4\u016B\x02\u1174\u02BD\x03\x02\x02\x02" +
    "\u1175\u1176\x05\u02D4\u016B\x02\u1176\u02BF\x03\x02\x02\x02\u1177\u1178" +
    "\x05\u02D4\u016B\x02\u1178\u02C1\x03\x02\x02\x02\u1179\u117A\x05\u02D4" +
    "\u016B\x02\u117A\u02C3\x03\x02\x02\x02\u117B\u117C\x07\xC2\x02\x02\u117C" +
    "\u02C5\x03\x02\x02\x02\u117D\u117E\x05\u02D4\u016B\x02\u117E\u02C7\x03" +
    "\x02\x02\x02\u117F\u1180\x05\u02D4\u016B\x02\u1180\u02C9\x03\x02\x02\x02" +
    "\u1181\u1182\x05\u02D4\u016B\x02\u1182\u02CB\x03\x02\x02\x02\u1183\u1184" +
    "\x05\u02D4\u016B\x02\u1184\u02CD\x03\x02\x02\x02\u1185\u1186\x05\u02D4" +
    "\u016B\x02\u1186\u02CF\x03\x02\x02\x02\u1187\u1189\x05\u02D2\u016A\x02" +
    "\u1188\u1187\x03\x02\x02\x02\u1189\u118C\x03\x02\x02\x02\u118A\u1188\x03" +
    "\x02\x02\x02\u118A\u118B\x03\x02\x02\x02\u118B\u118D\x03\x02\x02\x02\u118C" +
    "\u118A\x03\x02\x02\x02\u118D\u118E\x05\u02D4\u016B\x02\u118E\u02D1\x03" +
    "\x02\x02\x02\u118F\u1191\x05\u02D4\u016B\x02\u1190\u1192\x05\u028A\u0146" +
    "\x02\u1191\u1190\x03\x02\x02\x02\u1191\u1192\x03\x02\x02\x02\u1192\u1193" +
    "\x03\x02\x02\x02\u1193\u1194\x07\x98\x02\x02\u1194\u02D3\x03\x02\x02\x02" +
    "\u1195\u1198\x05\u02C4\u0163\x02\u1196\u1198\x05\u02EA\u0176\x02\u1197" +
    "\u1195\x03\x02\x02\x02\u1197\u1196\x03\x02\x02\x02\u1198\u02D5\x03\x02" +
    "\x02\x02\u1199\u119A\x05\u02D4\u016B\x02\u119A\u02D7\x03\x02\x02\x02\u119B" +
    "\u119C\x05\u02D4\u016B\x02\u119C\u02D9\x03\x02\x02\x02\u119D\u119E\x05" +
    "\u02D4\u016B\x02\u119E\u02DB\x03\x02\x02\x02\u119F\u11A0\x05\u02D4\u016B" +
    "\x02\u11A0\u02DD\x03\x02\x02\x02\u11A1\u11A2\x05\u02D4\u016B\x02\u11A2" +
    "\u02DF\x03\x02\x02\x02\u11A3\u11A4\x05\u02D4\u016B\x02\u11A4\u02E1\x03" +
    "\x02\x02\x02\u11A5\u11A6\x05\u02D4\u016B\x02\u11A6\u02E3\x03\x02\x02\x02" +
    "\u11A7\u11A8\x05\u02D4\u016B\x02\u11A8\u02E5\x03\x02\x02\x02\u11A9\u11AA" +
    "\x05\u02D4\u016B\x02\u11AA\u02E7\x03\x02\x02\x02\u11AB\u11AC\x05\u02D4" +
    "\u016B\x02\u11AC\u02E9\x03\x02\x02\x02\u11AD\u11AE\x07\xC8\x02\x02\u11AE" +
    "\u02EB\x03\x02\x02\x02\u11AF\u11B0\x05\u02D4\u016B\x02\u11B0\u02ED\x03" +
    "\x02\x02\x02\u11B1\u11B2\x07\xCA\x02\x02\u11B2\u02EF\x03\x02\x02\x02\u11B3" +
    "\u11B4\x07\xCA\x02\x02\u11B4\u02F1\x03\x02\x02\x02\u11B5\u11B6\x05\u02D4" +
    "\u016B\x02\u11B6\u02F3\x03\x02\x02\x02\u11B7\u11B8\x05\u02D4\u016B\x02" +
    "\u11B8\u02F5\x03\x02\x02\x02\u11B9\u11BA\x05\u02D4\u016B\x02\u11BA\u02F7" +
    "\x03\x02\x02\x02\u11BB\u11BC\x05\u02D4\u016B\x02\u11BC\u02F9\x03\x02\x02" +
    "\x02\u11BD\u11BE\x05\u02D4\u016B\x02\u11BE\u02FB\x03\x02\x02\x02\u11BF" +
    "\u11C0\x05\u02D4\u016B\x02\u11C0\u02FD\x03\x02\x02\x02\u01D8\u0301\u0309" +
    "\u0312\u0316\u0320\u032C\u0334\u0339\u033F\u0342\u0348\u0356\u0361\u036C" +
    "\u037A\u037D\u0380\u0388\u0393\u0398\u039F\u03A4\u03AB\u03B2\u03B6\u03C1" +
    "\u03CA\u03CE\u03D3\u03DA\u03E3\u03EA\u03F1\u03F8\u03FF\u0406\u040D\u0414" +
    "\u041B\u041F\u042B\u0438\u0441\u0449\u0461\u046D\u0474\u047C\u0483\u0488" +
    "\u048C\u048F\u0496\u049A\u049D\u04A4\u04A8\u04B1\u04B4\u04B7\u04BD\u04C0" +
    "\u04C3\u04C9\u04CC\u04CF\u04D5\u04D8\u04DF\u04EB\u04EE\u04F5\u04F8\u04FB" +
    "\u0502\u0505\u0509\u0510\u0513\u0516\u051A\u0521\u0524\u0527\u052E\u0531" +
    "\u0534\u053B\u053E\u0541\u0545\u054C\u054F\u0552\u0556\u055B\u0567\u056A" +
    "\u057B\u0582\u0588\u058F\u05B5\u05C4\u05CF\u05D1\u05D5\u05DE\u05E2\u05E7" +
    "\u05EE\u05F6\u05FD\u0605\u060D\u0614\u061C\u0624\u062C\u0634\u063C\u0644" +
    "\u064A\u065D\u0665\u0672\u0676\u068C\u068F\u0696\u069D\u06A0\u06AA\u06B0" +
    "\u06B6\u06BC\u06C3\u06C9\u06D1\u06D7\u06DB\u06E2\u06EA\u06EF\u06F6\u06FC" +
    "\u0702\u070B\u0714\u071A\u0721\u0727\u072E\u0735\u0739\u073D\u0740\u0743" +
    "\u074A\u074E\u0751\u0754\u075B\u075F\u0762\u0765\u076C\u0773\u0778\u077B" +
    "\u0783\u078D\u0797\u07A1\u07AB\u07B2\u07BB\u07C1\u07C8\u07D0\u07D7\u07DE" +
    "\u07E3\u07EA\u07F1\u07F4\u07FB\u0802\u0809\u0810\u0813\u081A\u0821\u0824" +
    "\u082B\u0832\u0839\u0844\u084B\u0852\u0859\u0860\u0865\u0868\u0875\u0880" +
    "\u088B\u0895\u089B\u08A3\u08AB\u08B4\u08BF\u08C7\u08D9\u08EB\u0909\u0910" +
    "\u091F\u0927\u092A\u0932\u093D\u0944\u094C\u094F\u0954\u0958\u095D\u0964" +
    "\u096C\u097A\u0993\u099C\u09A5\u09AE\u09B6\u09B9\u09BE\u09C3\u09C7\u09CE" +
    "\u09D3\u09DF\u09E7\u09F3\u09FC\u0A06\u0A12\u0A17\u0A1F\u0A27\u0A29\u0A2E" +
    "\u0A37\u0A3F\u0A45\u0A4F\u0A55\u0A61\u0A6C\u0A71\u0A76\u0A7D\u0A86\u0A8C" +
    "\u0A96\u0A99\u0AA0\u0AA6\u0AB0\u0AB7\u0ABB\u0ABE\u0AC8\u0AD8\u0ADF\u0AEB" +
    "\u0AF6\u0AF9\u0AFE\u0B0B\u0B0E\u0B13\u0B1B\u0B24\u0B2B\u0B32\u0B39\u0B40" +
    "\u0B47\u0B50\u0B57\u0B60\u0B67\u0B6E\u0B75\u0B7C\u0B80\u0B86\u0B8A\u0B95" +
    "\u0B9F\u0BB2\u0BB7\u0BC1\u0BC9\u0BCB\u0BD0\u0BE2\u0BEB\u0BF6\u0C01\u0C05" +
    "\u0C0C\u0C14\u0C17\u0C31\u0C35\u0C3F\u0C45\u0C49\u0C53\u0C5C\u0C66\u0C70" +
    "\u0C7A\u0C85\u0C8F\u0C94\u0C9D\u0CA8\u0CB0\u0CB8\u0CBF\u0CCA\u0CD2\u0CEC" +
    "\u0CEE\u0D1A\u0D1E\u0D25\u0D2E\u0D35\u0D4E\u0D5E\u0D68\u0D6F\u0D79\u0D88" +
    "\u0D8F\u0D92\u0D96\u0D99\u0D9D\u0DA0\u0DA4\u0DA7\u0DAB\u0DB5\u0DC2\u0DD1" +
    "\u0DDE\u0DEB\u0DF2\u0DF5\u0DF9\u0DFC\u0E00\u0E0C\u0E17\u0E22\u0E2B\u0E37" +
    "\u0E47\u0E4E\u0E63\u0E68\u0E6E\u0E73\u0E77\u0E80\u0E8C\u0EA1\u0EA5\u0EAD" +
    "\u0EB8\u0EC8\u0EDB\u0EE4\u0EF0\u0EF9\u0F02\u0F09\u0F11\u0F20\u0F25\u0F2C" +
    "\u0F35\u0F3E\u0F47\u0F50\u0F59\u0F62\u0F6B\u0F74\u0F7D\u0F86\u0F8F\u0F96" +
    "\u0F98\u0FA1\u0FB0\u0FBA\u0FBF\u0FC6\u0FCF\u0FD8\u0FE1\u0FEA\u0FF3\u0FFC" +
    "\u1005\u100E\u1017\u1020\u1029\u1030\u1032\u103D\u1045\u104A\u1051\u105A" +
    "\u1063\u106C\u1075\u107E\u1087\u108E\u1090\u1099\u10AA\u10B4\u10BF\u10CB" +
    "\u10D0\u10DB\u10DE\u10EA\u10EE\u10F6\u10FB\u10FE\u110A\u110E\u1116\u111B" +
    "\u1126\u112A\u112E\u1133\u1136\u113C\u1142\u1168\u1171\u118A\u1191\u1197";
  public static readonly _serializedATN: string = Utils.join(
    [
      VerilogParser._serializedATNSegment0,
      VerilogParser._serializedATNSegment1,
      VerilogParser._serializedATNSegment2,
      VerilogParser._serializedATNSegment3,
      VerilogParser._serializedATNSegment4,
      VerilogParser._serializedATNSegment5,
      VerilogParser._serializedATNSegment6,
      VerilogParser._serializedATNSegment7,
    ],
    "",
  );
  public static __ATN: ATN;
  public static get _ATN(): ATN {
    if (!VerilogParser.__ATN) {
      VerilogParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(VerilogParser._serializedATN));
    }

    return VerilogParser.__ATN;
  }

}

export class Library_textContext extends ParserRuleContext {
  public EOF(): TerminalNode {
    return this.getToken(VerilogParser.EOF, 0);
  }

  public library_description(): Library_descriptionContext[];
  public library_description(i: number): Library_descriptionContext;
  public library_description(i?: number): Library_descriptionContext | Library_descriptionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Library_descriptionContext);
    } else {
      return this.getRuleContext(i, Library_descriptionContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_library_text;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterLibrary_text) {
      listener.enterLibrary_text(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitLibrary_text) {
      listener.exitLibrary_text(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitLibrary_text) {
      return visitor.visitLibrary_text(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Library_descriptionContext extends ParserRuleContext {
  public library_declaration(): Library_declarationContext | undefined {
    return this.tryGetRuleContext(0, Library_declarationContext);
  }

  public include_statement(): Include_statementContext | undefined {
    return this.tryGetRuleContext(0, Include_statementContext);
  }

  public config_declaration(): Config_declarationContext | undefined {
    return this.tryGetRuleContext(0, Config_declarationContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_library_description;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterLibrary_description) {
      listener.enterLibrary_description(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitLibrary_description) {
      listener.exitLibrary_description(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitLibrary_description) {
      return visitor.visitLibrary_description(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Library_declarationContext extends ParserRuleContext {
  public LIBRARY(): TerminalNode {
    return this.getToken(VerilogParser.LIBRARY, 0);
  }

  public library_identifier(): Library_identifierContext {
    return this.getRuleContext(0, Library_identifierContext);
  }

  public file_path_spec(): File_path_specContext[];
  public file_path_spec(i: number): File_path_specContext;
  public file_path_spec(i?: number): File_path_specContext | File_path_specContext[] {
    if (i === undefined) {
      return this.getRuleContexts(File_path_specContext);
    } else {
      return this.getRuleContext(i, File_path_specContext);
    }
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  public library_incdir(): Library_incdirContext | undefined {
    return this.tryGetRuleContext(0, Library_incdirContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_library_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterLibrary_declaration) {
      listener.enterLibrary_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitLibrary_declaration) {
      listener.exitLibrary_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitLibrary_declaration) {
      return visitor.visitLibrary_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Library_incdirContext extends ParserRuleContext {
  public MIINCDIR(): TerminalNode {
    return this.getToken(VerilogParser.MIINCDIR, 0);
  }

  public file_path_spec(): File_path_specContext[];
  public file_path_spec(i: number): File_path_specContext;
  public file_path_spec(i?: number): File_path_specContext | File_path_specContext[] {
    if (i === undefined) {
      return this.getRuleContexts(File_path_specContext);
    } else {
      return this.getRuleContext(i, File_path_specContext);
    }
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_library_incdir;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterLibrary_incdir) {
      listener.enterLibrary_incdir(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitLibrary_incdir) {
      listener.exitLibrary_incdir(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitLibrary_incdir) {
      return visitor.visitLibrary_incdir(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Include_statementContext extends ParserRuleContext {
  public INCLUDE(): TerminalNode {
    return this.getToken(VerilogParser.INCLUDE, 0);
  }

  public file_path_spec(): File_path_specContext {
    return this.getRuleContext(0, File_path_specContext);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_include_statement;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterInclude_statement) {
      listener.enterInclude_statement(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitInclude_statement) {
      listener.exitInclude_statement(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitInclude_statement) {
      return visitor.visitInclude_statement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class File_path_specContext extends ParserRuleContext {
  public FILE_PATH_SPEC(): TerminalNode {
    return this.getToken(VerilogParser.FILE_PATH_SPEC, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_file_path_spec;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterFile_path_spec) {
      listener.enterFile_path_spec(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitFile_path_spec) {
      listener.exitFile_path_spec(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitFile_path_spec) {
      return visitor.visitFile_path_spec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Source_textContext extends ParserRuleContext {
  public EOF(): TerminalNode {
    return this.getToken(VerilogParser.EOF, 0);
  }

  public description(): DescriptionContext[];
  public description(i: number): DescriptionContext;
  public description(i?: number): DescriptionContext | DescriptionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(DescriptionContext);
    } else {
      return this.getRuleContext(i, DescriptionContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_source_text;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterSource_text) {
      listener.enterSource_text(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitSource_text) {
      listener.exitSource_text(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitSource_text) {
      return visitor.visitSource_text(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class DescriptionContext extends ParserRuleContext {
  public module_declaration(): Module_declarationContext | undefined {
    return this.tryGetRuleContext(0, Module_declarationContext);
  }

  public udp_declaration(): Udp_declarationContext | undefined {
    return this.tryGetRuleContext(0, Udp_declarationContext);
  }

  public config_declaration(): Config_declarationContext | undefined {
    return this.tryGetRuleContext(0, Config_declarationContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_description;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterDescription) {
      listener.enterDescription(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitDescription) {
      listener.exitDescription(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitDescription) {
      return visitor.visitDescription(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Module_declarationContext extends ParserRuleContext {
  public module_keyword(): Module_keywordContext {
    return this.getRuleContext(0, Module_keywordContext);
  }

  public module_identifier(): Module_identifierContext {
    return this.getRuleContext(0, Module_identifierContext);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public ENDMODULE(): TerminalNode {
    return this.getToken(VerilogParser.ENDMODULE, 0);
  }

  public attribute_instance(): Attribute_instanceContext[];
  public attribute_instance(i: number): Attribute_instanceContext;
  public attribute_instance(i?: number): Attribute_instanceContext | Attribute_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Attribute_instanceContext);
    } else {
      return this.getRuleContext(i, Attribute_instanceContext);
    }
  }

  public module_parameter_port_list(): Module_parameter_port_listContext | undefined {
    return this.tryGetRuleContext(0, Module_parameter_port_listContext);
  }

  public list_of_port_declarations(): List_of_port_declarationsContext | undefined {
    return this.tryGetRuleContext(0, List_of_port_declarationsContext);
  }

  public module_item(): Module_itemContext[];
  public module_item(i: number): Module_itemContext;
  public module_item(i?: number): Module_itemContext | Module_itemContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Module_itemContext);
    } else {
      return this.getRuleContext(i, Module_itemContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_module_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterModule_declaration) {
      listener.enterModule_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitModule_declaration) {
      listener.exitModule_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitModule_declaration) {
      return visitor.visitModule_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Module_keywordContext extends ParserRuleContext {
  public MODULE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.MODULE, 0);
  }

  public MACROMODULE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.MACROMODULE, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_module_keyword;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterModule_keyword) {
      listener.enterModule_keyword(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitModule_keyword) {
      listener.exitModule_keyword(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitModule_keyword) {
      return visitor.visitModule_keyword(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Module_parameter_port_listContext extends ParserRuleContext {
  public HA(): TerminalNode {
    return this.getToken(VerilogParser.HA, 0);
  }

  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public parameter_declaration(): Parameter_declarationContext[];
  public parameter_declaration(i: number): Parameter_declarationContext;
  public parameter_declaration(i?: number): Parameter_declarationContext | Parameter_declarationContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Parameter_declarationContext);
    } else {
      return this.getRuleContext(i, Parameter_declarationContext);
    }
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_module_parameter_port_list;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterModule_parameter_port_list) {
      listener.enterModule_parameter_port_list(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitModule_parameter_port_list) {
      listener.exitModule_parameter_port_list(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitModule_parameter_port_list) {
      return visitor.visitModule_parameter_port_list(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class List_of_port_declarationsContext extends ParserRuleContext {
  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public port_declaration(): Port_declarationContext[];
  public port_declaration(i: number): Port_declarationContext;
  public port_declaration(i?: number): Port_declarationContext | Port_declarationContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Port_declarationContext);
    } else {
      return this.getRuleContext(i, Port_declarationContext);
    }
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  public port(): PortContext[];
  public port(i: number): PortContext;
  public port(i?: number): PortContext | PortContext[] {
    if (i === undefined) {
      return this.getRuleContexts(PortContext);
    } else {
      return this.getRuleContext(i, PortContext);
    }
  }

  public port_implicit(): Port_implicitContext | undefined {
    return this.tryGetRuleContext(0, Port_implicitContext);
  }

  public port_explicit(): Port_explicitContext | undefined {
    return this.tryGetRuleContext(0, Port_explicitContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_list_of_port_declarations;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterList_of_port_declarations) {
      listener.enterList_of_port_declarations(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitList_of_port_declarations) {
      listener.exitList_of_port_declarations(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitList_of_port_declarations) {
      return visitor.visitList_of_port_declarations(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class PortContext extends ParserRuleContext {
  public port_implicit(): Port_implicitContext | undefined {
    return this.tryGetRuleContext(0, Port_implicitContext);
  }

  public port_explicit(): Port_explicitContext | undefined {
    return this.tryGetRuleContext(0, Port_explicitContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_port;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterPort) {
      listener.enterPort(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitPort) {
      listener.exitPort(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitPort) {
      return visitor.visitPort(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Port_implicitContext extends ParserRuleContext {
  public port_expression(): Port_expressionContext {
    return this.getRuleContext(0, Port_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_port_implicit;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterPort_implicit) {
      listener.enterPort_implicit(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitPort_implicit) {
      listener.exitPort_implicit(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitPort_implicit) {
      return visitor.visitPort_implicit(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Port_explicitContext extends ParserRuleContext {
  public DT(): TerminalNode {
    return this.getToken(VerilogParser.DT, 0);
  }

  public port_identifier(): Port_identifierContext {
    return this.getRuleContext(0, Port_identifierContext);
  }

  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public port_expression(): Port_expressionContext | undefined {
    return this.tryGetRuleContext(0, Port_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_port_explicit;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterPort_explicit) {
      listener.enterPort_explicit(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitPort_explicit) {
      listener.exitPort_explicit(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitPort_explicit) {
      return visitor.visitPort_explicit(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Port_expressionContext extends ParserRuleContext {
  public port_reference(): Port_referenceContext[];
  public port_reference(i: number): Port_referenceContext;
  public port_reference(i?: number): Port_referenceContext | Port_referenceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Port_referenceContext);
    } else {
      return this.getRuleContext(i, Port_referenceContext);
    }
  }

  public LC(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LC, 0);
  }

  public RC(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RC, 0);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_port_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterPort_expression) {
      listener.enterPort_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitPort_expression) {
      listener.exitPort_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitPort_expression) {
      return visitor.visitPort_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Port_referenceContext extends ParserRuleContext {
  public port_identifier(): Port_identifierContext {
    return this.getRuleContext(0, Port_identifierContext);
  }

  public LB(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LB, 0);
  }

  public constant_range_expression(): Constant_range_expressionContext | undefined {
    return this.tryGetRuleContext(0, Constant_range_expressionContext);
  }

  public RB(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RB, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_port_reference;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterPort_reference) {
      listener.enterPort_reference(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitPort_reference) {
      listener.exitPort_reference(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitPort_reference) {
      return visitor.visitPort_reference(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Port_declarationContext extends ParserRuleContext {
  public inout_declaration(): Inout_declarationContext | undefined {
    return this.tryGetRuleContext(0, Inout_declarationContext);
  }

  public attribute_instance(): Attribute_instanceContext[];
  public attribute_instance(i: number): Attribute_instanceContext;
  public attribute_instance(i?: number): Attribute_instanceContext | Attribute_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Attribute_instanceContext);
    } else {
      return this.getRuleContext(i, Attribute_instanceContext);
    }
  }

  public input_declaration(): Input_declarationContext | undefined {
    return this.tryGetRuleContext(0, Input_declarationContext);
  }

  public output_declaration(): Output_declarationContext | undefined {
    return this.tryGetRuleContext(0, Output_declarationContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_port_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterPort_declaration) {
      listener.enterPort_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitPort_declaration) {
      listener.exitPort_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitPort_declaration) {
      return visitor.visitPort_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Module_itemContext extends ParserRuleContext {
  public port_declaration(): Port_declarationContext | undefined {
    return this.tryGetRuleContext(0, Port_declarationContext);
  }

  public SC(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.SC, 0);
  }

  public module_or_generate_item(): Module_or_generate_itemContext | undefined {
    return this.tryGetRuleContext(0, Module_or_generate_itemContext);
  }

  public generate_region(): Generate_regionContext | undefined {
    return this.tryGetRuleContext(0, Generate_regionContext);
  }

  public specify_block(): Specify_blockContext | undefined {
    return this.tryGetRuleContext(0, Specify_blockContext);
  }

  public parameter_declaration(): Parameter_declarationContext | undefined {
    return this.tryGetRuleContext(0, Parameter_declarationContext);
  }

  public attribute_instance(): Attribute_instanceContext[];
  public attribute_instance(i: number): Attribute_instanceContext;
  public attribute_instance(i?: number): Attribute_instanceContext | Attribute_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Attribute_instanceContext);
    } else {
      return this.getRuleContext(i, Attribute_instanceContext);
    }
  }

  public specparam_declaration(): Specparam_declarationContext | undefined {
    return this.tryGetRuleContext(0, Specparam_declarationContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_module_item;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterModule_item) {
      listener.enterModule_item(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitModule_item) {
      listener.exitModule_item(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitModule_item) {
      return visitor.visitModule_item(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Module_or_generate_itemContext extends ParserRuleContext {
  public module_or_generate_item_declaration(): Module_or_generate_item_declarationContext | undefined {
    return this.tryGetRuleContext(0, Module_or_generate_item_declarationContext);
  }

  public attribute_instance(): Attribute_instanceContext[];
  public attribute_instance(i: number): Attribute_instanceContext;
  public attribute_instance(i?: number): Attribute_instanceContext | Attribute_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Attribute_instanceContext);
    } else {
      return this.getRuleContext(i, Attribute_instanceContext);
    }
  }

  public local_parameter_declaration(): Local_parameter_declarationContext | undefined {
    return this.tryGetRuleContext(0, Local_parameter_declarationContext);
  }

  public SC(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.SC, 0);
  }

  public parameter_override(): Parameter_overrideContext | undefined {
    return this.tryGetRuleContext(0, Parameter_overrideContext);
  }

  public continuous_assign(): Continuous_assignContext | undefined {
    return this.tryGetRuleContext(0, Continuous_assignContext);
  }

  public gate_instantiation(): Gate_instantiationContext | undefined {
    return this.tryGetRuleContext(0, Gate_instantiationContext);
  }

  public module_instantiation(): Module_instantiationContext | undefined {
    return this.tryGetRuleContext(0, Module_instantiationContext);
  }

  public udp_instantiation(): Udp_instantiationContext | undefined {
    return this.tryGetRuleContext(0, Udp_instantiationContext);
  }

  public initial_construct(): Initial_constructContext | undefined {
    return this.tryGetRuleContext(0, Initial_constructContext);
  }

  public always_construct(): Always_constructContext | undefined {
    return this.tryGetRuleContext(0, Always_constructContext);
  }

  public loop_generate_construct(): Loop_generate_constructContext | undefined {
    return this.tryGetRuleContext(0, Loop_generate_constructContext);
  }

  public conditional_generate_construct(): Conditional_generate_constructContext | undefined {
    return this.tryGetRuleContext(0, Conditional_generate_constructContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_module_or_generate_item;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterModule_or_generate_item) {
      listener.enterModule_or_generate_item(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitModule_or_generate_item) {
      listener.exitModule_or_generate_item(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitModule_or_generate_item) {
      return visitor.visitModule_or_generate_item(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Module_or_generate_item_declarationContext extends ParserRuleContext {
  public net_declaration(): Net_declarationContext | undefined {
    return this.tryGetRuleContext(0, Net_declarationContext);
  }

  public reg_declaration(): Reg_declarationContext | undefined {
    return this.tryGetRuleContext(0, Reg_declarationContext);
  }

  public integer_declaration(): Integer_declarationContext | undefined {
    return this.tryGetRuleContext(0, Integer_declarationContext);
  }

  public real_declaration(): Real_declarationContext | undefined {
    return this.tryGetRuleContext(0, Real_declarationContext);
  }

  public time_declaration(): Time_declarationContext | undefined {
    return this.tryGetRuleContext(0, Time_declarationContext);
  }

  public realtime_declaration(): Realtime_declarationContext | undefined {
    return this.tryGetRuleContext(0, Realtime_declarationContext);
  }

  public event_declaration(): Event_declarationContext | undefined {
    return this.tryGetRuleContext(0, Event_declarationContext);
  }

  public genvar_declaration(): Genvar_declarationContext | undefined {
    return this.tryGetRuleContext(0, Genvar_declarationContext);
  }

  public task_declaration(): Task_declarationContext | undefined {
    return this.tryGetRuleContext(0, Task_declarationContext);
  }

  public function_declaration(): Function_declarationContext | undefined {
    return this.tryGetRuleContext(0, Function_declarationContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_module_or_generate_item_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterModule_or_generate_item_declaration) {
      listener.enterModule_or_generate_item_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitModule_or_generate_item_declaration) {
      listener.exitModule_or_generate_item_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitModule_or_generate_item_declaration) {
      return visitor.visitModule_or_generate_item_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Parameter_overrideContext extends ParserRuleContext {
  public DEFPARAM(): TerminalNode {
    return this.getToken(VerilogParser.DEFPARAM, 0);
  }

  public list_of_defparam_assignments(): List_of_defparam_assignmentsContext {
    return this.getRuleContext(0, List_of_defparam_assignmentsContext);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_parameter_override;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterParameter_override) {
      listener.enterParameter_override(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitParameter_override) {
      listener.exitParameter_override(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitParameter_override) {
      return visitor.visitParameter_override(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Config_declarationContext extends ParserRuleContext {
  public CONFIG(): TerminalNode {
    return this.getToken(VerilogParser.CONFIG, 0);
  }

  public config_identifier(): Config_identifierContext {
    return this.getRuleContext(0, Config_identifierContext);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public design_statement(): Design_statementContext {
    return this.getRuleContext(0, Design_statementContext);
  }

  public ENDCONFIG(): TerminalNode {
    return this.getToken(VerilogParser.ENDCONFIG, 0);
  }

  public config_rule_statement(): Config_rule_statementContext[];
  public config_rule_statement(i: number): Config_rule_statementContext;
  public config_rule_statement(i?: number): Config_rule_statementContext | Config_rule_statementContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Config_rule_statementContext);
    } else {
      return this.getRuleContext(i, Config_rule_statementContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_config_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterConfig_declaration) {
      listener.enterConfig_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitConfig_declaration) {
      listener.exitConfig_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitConfig_declaration) {
      return visitor.visitConfig_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Design_statementContext extends ParserRuleContext {
  public DESIGN(): TerminalNode {
    return this.getToken(VerilogParser.DESIGN, 0);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public design_statement_item(): Design_statement_itemContext[];
  public design_statement_item(i: number): Design_statement_itemContext;
  public design_statement_item(i?: number): Design_statement_itemContext | Design_statement_itemContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Design_statement_itemContext);
    } else {
      return this.getRuleContext(i, Design_statement_itemContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_design_statement;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterDesign_statement) {
      listener.enterDesign_statement(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitDesign_statement) {
      listener.exitDesign_statement(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitDesign_statement) {
      return visitor.visitDesign_statement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Design_statement_itemContext extends ParserRuleContext {
  public cell_identifier(): Cell_identifierContext {
    return this.getRuleContext(0, Cell_identifierContext);
  }

  public library_identifier(): Library_identifierContext | undefined {
    return this.tryGetRuleContext(0, Library_identifierContext);
  }

  public DT(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.DT, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_design_statement_item;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterDesign_statement_item) {
      listener.enterDesign_statement_item(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitDesign_statement_item) {
      listener.exitDesign_statement_item(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitDesign_statement_item) {
      return visitor.visitDesign_statement_item(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Config_rule_statementContext extends ParserRuleContext {
  public default_clause(): Default_clauseContext | undefined {
    return this.tryGetRuleContext(0, Default_clauseContext);
  }

  public liblist_clause(): Liblist_clauseContext | undefined {
    return this.tryGetRuleContext(0, Liblist_clauseContext);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public inst_clause(): Inst_clauseContext | undefined {
    return this.tryGetRuleContext(0, Inst_clauseContext);
  }

  public use_clause(): Use_clauseContext | undefined {
    return this.tryGetRuleContext(0, Use_clauseContext);
  }

  public cell_clause(): Cell_clauseContext | undefined {
    return this.tryGetRuleContext(0, Cell_clauseContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_config_rule_statement;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterConfig_rule_statement) {
      listener.enterConfig_rule_statement(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitConfig_rule_statement) {
      listener.exitConfig_rule_statement(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitConfig_rule_statement) {
      return visitor.visitConfig_rule_statement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Default_clauseContext extends ParserRuleContext {
  public DEFAULT(): TerminalNode {
    return this.getToken(VerilogParser.DEFAULT, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_default_clause;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterDefault_clause) {
      listener.enterDefault_clause(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitDefault_clause) {
      listener.exitDefault_clause(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitDefault_clause) {
      return visitor.visitDefault_clause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Inst_clauseContext extends ParserRuleContext {
  public INSTANCE(): TerminalNode {
    return this.getToken(VerilogParser.INSTANCE, 0);
  }

  public inst_name(): Inst_nameContext {
    return this.getRuleContext(0, Inst_nameContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_inst_clause;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterInst_clause) {
      listener.enterInst_clause(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitInst_clause) {
      listener.exitInst_clause(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitInst_clause) {
      return visitor.visitInst_clause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Inst_nameContext extends ParserRuleContext {
  public topmodule_identifier(): Topmodule_identifierContext {
    return this.getRuleContext(0, Topmodule_identifierContext);
  }

  public DT(): TerminalNode[];
  public DT(i: number): TerminalNode;
  public DT(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.DT);
    } else {
      return this.getToken(VerilogParser.DT, i);
    }
  }

  public instance_identifier(): Instance_identifierContext[];
  public instance_identifier(i: number): Instance_identifierContext;
  public instance_identifier(i?: number): Instance_identifierContext | Instance_identifierContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Instance_identifierContext);
    } else {
      return this.getRuleContext(i, Instance_identifierContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_inst_name;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterInst_name) {
      listener.enterInst_name(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitInst_name) {
      listener.exitInst_name(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitInst_name) {
      return visitor.visitInst_name(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Cell_clauseContext extends ParserRuleContext {
  public CELL(): TerminalNode {
    return this.getToken(VerilogParser.CELL, 0);
  }

  public cell_identifier(): Cell_identifierContext {
    return this.getRuleContext(0, Cell_identifierContext);
  }

  public library_identifier(): Library_identifierContext | undefined {
    return this.tryGetRuleContext(0, Library_identifierContext);
  }

  public DT(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.DT, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_cell_clause;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterCell_clause) {
      listener.enterCell_clause(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitCell_clause) {
      listener.exitCell_clause(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitCell_clause) {
      return visitor.visitCell_clause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Liblist_clauseContext extends ParserRuleContext {
  public LIBLIST(): TerminalNode {
    return this.getToken(VerilogParser.LIBLIST, 0);
  }

  public library_identifier(): Library_identifierContext[];
  public library_identifier(i: number): Library_identifierContext;
  public library_identifier(i?: number): Library_identifierContext | Library_identifierContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Library_identifierContext);
    } else {
      return this.getRuleContext(i, Library_identifierContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_liblist_clause;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterLiblist_clause) {
      listener.enterLiblist_clause(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitLiblist_clause) {
      listener.exitLiblist_clause(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitLiblist_clause) {
      return visitor.visitLiblist_clause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Use_clauseContext extends ParserRuleContext {
  public USE(): TerminalNode {
    return this.getToken(VerilogParser.USE, 0);
  }

  public cell_identifier(): Cell_identifierContext {
    return this.getRuleContext(0, Cell_identifierContext);
  }

  public library_identifier(): Library_identifierContext | undefined {
    return this.tryGetRuleContext(0, Library_identifierContext);
  }

  public DT(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.DT, 0);
  }

  public CL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.CL, 0);
  }

  public CONFIG(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.CONFIG, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_use_clause;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterUse_clause) {
      listener.enterUse_clause(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitUse_clause) {
      listener.exitUse_clause(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitUse_clause) {
      return visitor.visitUse_clause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Local_parameter_declarationContext extends ParserRuleContext {
  public LOCALPARAM(): TerminalNode {
    return this.getToken(VerilogParser.LOCALPARAM, 0);
  }

  public list_of_param_assignments(): List_of_param_assignmentsContext {
    return this.getRuleContext(0, List_of_param_assignmentsContext);
  }

  public SIGNED(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.SIGNED, 0);
  }

  public range_(): Range_Context | undefined {
    return this.tryGetRuleContext(0, Range_Context);
  }

  public parameter_type(): Parameter_typeContext | undefined {
    return this.tryGetRuleContext(0, Parameter_typeContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_local_parameter_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterLocal_parameter_declaration) {
      listener.enterLocal_parameter_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitLocal_parameter_declaration) {
      listener.exitLocal_parameter_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitLocal_parameter_declaration) {
      return visitor.visitLocal_parameter_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Parameter_declarationContext extends ParserRuleContext {
  public PARAMETER(): TerminalNode {
    return this.getToken(VerilogParser.PARAMETER, 0);
  }

  public list_of_param_assignments(): List_of_param_assignmentsContext {
    return this.getRuleContext(0, List_of_param_assignmentsContext);
  }

  public SIGNED(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.SIGNED, 0);
  }

  public range_(): Range_Context | undefined {
    return this.tryGetRuleContext(0, Range_Context);
  }

  public parameter_type(): Parameter_typeContext | undefined {
    return this.tryGetRuleContext(0, Parameter_typeContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_parameter_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterParameter_declaration) {
      listener.enterParameter_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitParameter_declaration) {
      listener.exitParameter_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitParameter_declaration) {
      return visitor.visitParameter_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Specparam_declarationContext extends ParserRuleContext {
  public SPECPARAM(): TerminalNode {
    return this.getToken(VerilogParser.SPECPARAM, 0);
  }

  public list_of_specparam_assignments(): List_of_specparam_assignmentsContext {
    return this.getRuleContext(0, List_of_specparam_assignmentsContext);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public range_(): Range_Context | undefined {
    return this.tryGetRuleContext(0, Range_Context);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_specparam_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterSpecparam_declaration) {
      listener.enterSpecparam_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitSpecparam_declaration) {
      listener.exitSpecparam_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitSpecparam_declaration) {
      return visitor.visitSpecparam_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Parameter_typeContext extends ParserRuleContext {
  public INTEGER(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.INTEGER, 0);
  }

  public REAL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.REAL, 0);
  }

  public REALTIME(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.REALTIME, 0);
  }

  public TIME(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.TIME, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_parameter_type;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterParameter_type) {
      listener.enterParameter_type(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitParameter_type) {
      listener.exitParameter_type(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitParameter_type) {
      return visitor.visitParameter_type(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Inout_declarationContext extends ParserRuleContext {
  public INOUT(): TerminalNode {
    return this.getToken(VerilogParser.INOUT, 0);
  }

  public list_of_port_identifiers(): List_of_port_identifiersContext {
    return this.getRuleContext(0, List_of_port_identifiersContext);
  }

  public net_type(): Net_typeContext | undefined {
    return this.tryGetRuleContext(0, Net_typeContext);
  }

  public SIGNED(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.SIGNED, 0);
  }

  public range_(): Range_Context | undefined {
    return this.tryGetRuleContext(0, Range_Context);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_inout_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterInout_declaration) {
      listener.enterInout_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitInout_declaration) {
      listener.exitInout_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitInout_declaration) {
      return visitor.visitInout_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Input_declarationContext extends ParserRuleContext {
  public INPUT(): TerminalNode {
    return this.getToken(VerilogParser.INPUT, 0);
  }

  public list_of_port_identifiers(): List_of_port_identifiersContext {
    return this.getRuleContext(0, List_of_port_identifiersContext);
  }

  public net_type(): Net_typeContext | undefined {
    return this.tryGetRuleContext(0, Net_typeContext);
  }

  public SIGNED(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.SIGNED, 0);
  }

  public range_(): Range_Context | undefined {
    return this.tryGetRuleContext(0, Range_Context);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_input_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterInput_declaration) {
      listener.enterInput_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitInput_declaration) {
      listener.exitInput_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitInput_declaration) {
      return visitor.visitInput_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Output_declarationContext extends ParserRuleContext {
  public OUTPUT(): TerminalNode {
    return this.getToken(VerilogParser.OUTPUT, 0);
  }

  public list_of_port_identifiers(): List_of_port_identifiersContext | undefined {
    return this.tryGetRuleContext(0, List_of_port_identifiersContext);
  }

  public net_type(): Net_typeContext | undefined {
    return this.tryGetRuleContext(0, Net_typeContext);
  }

  public SIGNED(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.SIGNED, 0);
  }

  public range_(): Range_Context | undefined {
    return this.tryGetRuleContext(0, Range_Context);
  }

  public REG(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.REG, 0);
  }

  public list_of_variable_port_identifiers(): List_of_variable_port_identifiersContext | undefined {
    return this.tryGetRuleContext(0, List_of_variable_port_identifiersContext);
  }

  public output_variable_type(): Output_variable_typeContext | undefined {
    return this.tryGetRuleContext(0, Output_variable_typeContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_output_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterOutput_declaration) {
      listener.enterOutput_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitOutput_declaration) {
      listener.exitOutput_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitOutput_declaration) {
      return visitor.visitOutput_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Event_declarationContext extends ParserRuleContext {
  public EVENT(): TerminalNode {
    return this.getToken(VerilogParser.EVENT, 0);
  }

  public list_of_event_identifiers(): List_of_event_identifiersContext {
    return this.getRuleContext(0, List_of_event_identifiersContext);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_event_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterEvent_declaration) {
      listener.enterEvent_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitEvent_declaration) {
      listener.exitEvent_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitEvent_declaration) {
      return visitor.visitEvent_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Integer_declarationContext extends ParserRuleContext {
  public INTEGER(): TerminalNode {
    return this.getToken(VerilogParser.INTEGER, 0);
  }

  public list_of_variable_identifiers(): List_of_variable_identifiersContext {
    return this.getRuleContext(0, List_of_variable_identifiersContext);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_integer_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterInteger_declaration) {
      listener.enterInteger_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitInteger_declaration) {
      listener.exitInteger_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitInteger_declaration) {
      return visitor.visitInteger_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Net_declarationContext extends ParserRuleContext {
  public net_type(): Net_typeContext | undefined {
    return this.tryGetRuleContext(0, Net_typeContext);
  }

  public list_of_net_identifiers(): List_of_net_identifiersContext | undefined {
    return this.tryGetRuleContext(0, List_of_net_identifiersContext);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public SIGNED(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.SIGNED, 0);
  }

  public delay3(): Delay3Context | undefined {
    return this.tryGetRuleContext(0, Delay3Context);
  }

  public list_of_net_decl_assignments(): List_of_net_decl_assignmentsContext | undefined {
    return this.tryGetRuleContext(0, List_of_net_decl_assignmentsContext);
  }

  public drive_strength(): Drive_strengthContext | undefined {
    return this.tryGetRuleContext(0, Drive_strengthContext);
  }

  public range_(): Range_Context | undefined {
    return this.tryGetRuleContext(0, Range_Context);
  }

  public VECTORED(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.VECTORED, 0);
  }

  public SCALARED(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.SCALARED, 0);
  }

  public TRIREG(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.TRIREG, 0);
  }

  public charge_strength(): Charge_strengthContext | undefined {
    return this.tryGetRuleContext(0, Charge_strengthContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_net_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterNet_declaration) {
      listener.enterNet_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitNet_declaration) {
      listener.exitNet_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitNet_declaration) {
      return visitor.visitNet_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Real_declarationContext extends ParserRuleContext {
  public REAL(): TerminalNode {
    return this.getToken(VerilogParser.REAL, 0);
  }

  public list_of_real_identifiers(): List_of_real_identifiersContext {
    return this.getRuleContext(0, List_of_real_identifiersContext);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_real_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterReal_declaration) {
      listener.enterReal_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitReal_declaration) {
      listener.exitReal_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitReal_declaration) {
      return visitor.visitReal_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Realtime_declarationContext extends ParserRuleContext {
  public REALTIME(): TerminalNode {
    return this.getToken(VerilogParser.REALTIME, 0);
  }

  public list_of_real_identifiers(): List_of_real_identifiersContext {
    return this.getRuleContext(0, List_of_real_identifiersContext);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_realtime_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterRealtime_declaration) {
      listener.enterRealtime_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitRealtime_declaration) {
      listener.exitRealtime_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitRealtime_declaration) {
      return visitor.visitRealtime_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Reg_declarationContext extends ParserRuleContext {
  public REG(): TerminalNode {
    return this.getToken(VerilogParser.REG, 0);
  }

  public list_of_variable_identifiers(): List_of_variable_identifiersContext {
    return this.getRuleContext(0, List_of_variable_identifiersContext);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public SIGNED(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.SIGNED, 0);
  }

  public range_(): Range_Context | undefined {
    return this.tryGetRuleContext(0, Range_Context);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_reg_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterReg_declaration) {
      listener.enterReg_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitReg_declaration) {
      listener.exitReg_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitReg_declaration) {
      return visitor.visitReg_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Time_declarationContext extends ParserRuleContext {
  public TIME(): TerminalNode {
    return this.getToken(VerilogParser.TIME, 0);
  }

  public list_of_variable_identifiers(): List_of_variable_identifiersContext {
    return this.getRuleContext(0, List_of_variable_identifiersContext);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_time_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterTime_declaration) {
      listener.enterTime_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitTime_declaration) {
      listener.exitTime_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitTime_declaration) {
      return visitor.visitTime_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Net_typeContext extends ParserRuleContext {
  public SUPPLYZERO(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.SUPPLYZERO, 0);
  }

  public SUPPLYONE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.SUPPLYONE, 0);
  }

  public TRI(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.TRI, 0);
  }

  public TRIAND(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.TRIAND, 0);
  }

  public TRIOR(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.TRIOR, 0);
  }

  public TRIZERO(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.TRIZERO, 0);
  }

  public TRIONE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.TRIONE, 0);
  }

  public UWIRE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.UWIRE, 0);
  }

  public WIRE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.WIRE, 0);
  }

  public WAND(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.WAND, 0);
  }

  public WOR(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.WOR, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_net_type;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterNet_type) {
      listener.enterNet_type(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitNet_type) {
      listener.exitNet_type(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitNet_type) {
      return visitor.visitNet_type(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Output_variable_typeContext extends ParserRuleContext {
  public INTEGER(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.INTEGER, 0);
  }

  public TIME(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.TIME, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_output_variable_type;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterOutput_variable_type) {
      listener.enterOutput_variable_type(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitOutput_variable_type) {
      listener.exitOutput_variable_type(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitOutput_variable_type) {
      return visitor.visitOutput_variable_type(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Real_typeContext extends ParserRuleContext {
  public real_identifier(): Real_identifierContext {
    return this.getRuleContext(0, Real_identifierContext);
  }

  public dimension(): DimensionContext[];
  public dimension(i: number): DimensionContext;
  public dimension(i?: number): DimensionContext | DimensionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(DimensionContext);
    } else {
      return this.getRuleContext(i, DimensionContext);
    }
  }

  public EQ(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.EQ, 0);
  }

  public constant_expression(): Constant_expressionContext | undefined {
    return this.tryGetRuleContext(0, Constant_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_real_type;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterReal_type) {
      listener.enterReal_type(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitReal_type) {
      listener.exitReal_type(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitReal_type) {
      return visitor.visitReal_type(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Variable_typeContext extends ParserRuleContext {
  public variable_identifier(): Variable_identifierContext {
    return this.getRuleContext(0, Variable_identifierContext);
  }

  public dimension(): DimensionContext[];
  public dimension(i: number): DimensionContext;
  public dimension(i?: number): DimensionContext | DimensionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(DimensionContext);
    } else {
      return this.getRuleContext(i, DimensionContext);
    }
  }

  public EQ(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.EQ, 0);
  }

  public constant_expression(): Constant_expressionContext | undefined {
    return this.tryGetRuleContext(0, Constant_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_variable_type;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterVariable_type) {
      listener.enterVariable_type(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitVariable_type) {
      listener.exitVariable_type(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitVariable_type) {
      return visitor.visitVariable_type(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Drive_strengthContext extends ParserRuleContext {
  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public strength0(): Strength0Context | undefined {
    return this.tryGetRuleContext(0, Strength0Context);
  }

  public CO(): TerminalNode {
    return this.getToken(VerilogParser.CO, 0);
  }

  public strength1(): Strength1Context | undefined {
    return this.tryGetRuleContext(0, Strength1Context);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public HIGHZONE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.HIGHZONE, 0);
  }

  public HIGHZZERO(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.HIGHZZERO, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_drive_strength;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterDrive_strength) {
      listener.enterDrive_strength(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitDrive_strength) {
      listener.exitDrive_strength(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitDrive_strength) {
      return visitor.visitDrive_strength(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Strength0Context extends ParserRuleContext {
  public SUPPLYZERO(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.SUPPLYZERO, 0);
  }

  public STRONGZERO(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.STRONGZERO, 0);
  }

  public PULLZERO(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.PULLZERO, 0);
  }

  public WEAKZERO(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.WEAKZERO, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_strength0;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterStrength0) {
      listener.enterStrength0(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitStrength0) {
      listener.exitStrength0(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitStrength0) {
      return visitor.visitStrength0(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Strength1Context extends ParserRuleContext {
  public SUPPLYONE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.SUPPLYONE, 0);
  }

  public STRONGONE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.STRONGONE, 0);
  }

  public PULLONE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.PULLONE, 0);
  }

  public WEAKONE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.WEAKONE, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_strength1;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterStrength1) {
      listener.enterStrength1(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitStrength1) {
      listener.exitStrength1(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitStrength1) {
      return visitor.visitStrength1(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Charge_strengthContext extends ParserRuleContext {
  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public SMALL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.SMALL, 0);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public MEDIUM(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.MEDIUM, 0);
  }

  public LARGE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LARGE, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_charge_strength;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterCharge_strength) {
      listener.enterCharge_strength(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitCharge_strength) {
      listener.exitCharge_strength(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitCharge_strength) {
      return visitor.visitCharge_strength(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Delay3Context extends ParserRuleContext {
  public HA(): TerminalNode {
    return this.getToken(VerilogParser.HA, 0);
  }

  public delay_value(): Delay_valueContext | undefined {
    return this.tryGetRuleContext(0, Delay_valueContext);
  }

  public LP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LP, 0);
  }

  public mintypmax_expression(): Mintypmax_expressionContext[];
  public mintypmax_expression(i: number): Mintypmax_expressionContext;
  public mintypmax_expression(i?: number): Mintypmax_expressionContext | Mintypmax_expressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Mintypmax_expressionContext);
    } else {
      return this.getRuleContext(i, Mintypmax_expressionContext);
    }
  }

  public RP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RP, 0);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_delay3;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterDelay3) {
      listener.enterDelay3(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitDelay3) {
      listener.exitDelay3(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitDelay3) {
      return visitor.visitDelay3(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Delay2Context extends ParserRuleContext {
  public HA(): TerminalNode {
    return this.getToken(VerilogParser.HA, 0);
  }

  public delay_value(): Delay_valueContext | undefined {
    return this.tryGetRuleContext(0, Delay_valueContext);
  }

  public LP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LP, 0);
  }

  public mintypmax_expression(): Mintypmax_expressionContext[];
  public mintypmax_expression(i: number): Mintypmax_expressionContext;
  public mintypmax_expression(i?: number): Mintypmax_expressionContext | Mintypmax_expressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Mintypmax_expressionContext);
    } else {
      return this.getRuleContext(i, Mintypmax_expressionContext);
    }
  }

  public RP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RP, 0);
  }

  public CO(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.CO, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_delay2;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterDelay2) {
      listener.enterDelay2(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitDelay2) {
      listener.exitDelay2(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitDelay2) {
      return visitor.visitDelay2(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Delay_valueContext extends ParserRuleContext {
  public unsigned_number(): Unsigned_numberContext | undefined {
    return this.tryGetRuleContext(0, Unsigned_numberContext);
  }

  public real_number(): Real_numberContext | undefined {
    return this.tryGetRuleContext(0, Real_numberContext);
  }

  public identifier(): IdentifierContext | undefined {
    return this.tryGetRuleContext(0, IdentifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_delay_value;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterDelay_value) {
      listener.enterDelay_value(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitDelay_value) {
      listener.exitDelay_value(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitDelay_value) {
      return visitor.visitDelay_value(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class List_of_defparam_assignmentsContext extends ParserRuleContext {
  public defparam_assignment(): Defparam_assignmentContext[];
  public defparam_assignment(i: number): Defparam_assignmentContext;
  public defparam_assignment(i?: number): Defparam_assignmentContext | Defparam_assignmentContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Defparam_assignmentContext);
    } else {
      return this.getRuleContext(i, Defparam_assignmentContext);
    }
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_list_of_defparam_assignments;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterList_of_defparam_assignments) {
      listener.enterList_of_defparam_assignments(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitList_of_defparam_assignments) {
      listener.exitList_of_defparam_assignments(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitList_of_defparam_assignments) {
      return visitor.visitList_of_defparam_assignments(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class List_of_event_identifiersContext extends ParserRuleContext {
  public event_id(): Event_idContext[];
  public event_id(i: number): Event_idContext;
  public event_id(i?: number): Event_idContext | Event_idContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Event_idContext);
    } else {
      return this.getRuleContext(i, Event_idContext);
    }
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_list_of_event_identifiers;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterList_of_event_identifiers) {
      listener.enterList_of_event_identifiers(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitList_of_event_identifiers) {
      listener.exitList_of_event_identifiers(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitList_of_event_identifiers) {
      return visitor.visitList_of_event_identifiers(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Event_idContext extends ParserRuleContext {
  public event_identifier(): Event_identifierContext {
    return this.getRuleContext(0, Event_identifierContext);
  }

  public dimension(): DimensionContext[];
  public dimension(i: number): DimensionContext;
  public dimension(i?: number): DimensionContext | DimensionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(DimensionContext);
    } else {
      return this.getRuleContext(i, DimensionContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_event_id;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterEvent_id) {
      listener.enterEvent_id(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitEvent_id) {
      listener.exitEvent_id(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitEvent_id) {
      return visitor.visitEvent_id(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class List_of_net_decl_assignmentsContext extends ParserRuleContext {
  public net_decl_assignment(): Net_decl_assignmentContext[];
  public net_decl_assignment(i: number): Net_decl_assignmentContext;
  public net_decl_assignment(i?: number): Net_decl_assignmentContext | Net_decl_assignmentContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Net_decl_assignmentContext);
    } else {
      return this.getRuleContext(i, Net_decl_assignmentContext);
    }
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_list_of_net_decl_assignments;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterList_of_net_decl_assignments) {
      listener.enterList_of_net_decl_assignments(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitList_of_net_decl_assignments) {
      listener.exitList_of_net_decl_assignments(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitList_of_net_decl_assignments) {
      return visitor.visitList_of_net_decl_assignments(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class List_of_net_identifiersContext extends ParserRuleContext {
  public net_id(): Net_idContext[];
  public net_id(i: number): Net_idContext;
  public net_id(i?: number): Net_idContext | Net_idContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Net_idContext);
    } else {
      return this.getRuleContext(i, Net_idContext);
    }
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_list_of_net_identifiers;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterList_of_net_identifiers) {
      listener.enterList_of_net_identifiers(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitList_of_net_identifiers) {
      listener.exitList_of_net_identifiers(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitList_of_net_identifiers) {
      return visitor.visitList_of_net_identifiers(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Net_idContext extends ParserRuleContext {
  public net_identifier(): Net_identifierContext {
    return this.getRuleContext(0, Net_identifierContext);
  }

  public dimension(): DimensionContext[];
  public dimension(i: number): DimensionContext;
  public dimension(i?: number): DimensionContext | DimensionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(DimensionContext);
    } else {
      return this.getRuleContext(i, DimensionContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_net_id;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterNet_id) {
      listener.enterNet_id(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitNet_id) {
      listener.exitNet_id(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitNet_id) {
      return visitor.visitNet_id(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class List_of_param_assignmentsContext extends ParserRuleContext {
  public param_assignment(): Param_assignmentContext[];
  public param_assignment(i: number): Param_assignmentContext;
  public param_assignment(i?: number): Param_assignmentContext | Param_assignmentContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Param_assignmentContext);
    } else {
      return this.getRuleContext(i, Param_assignmentContext);
    }
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_list_of_param_assignments;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterList_of_param_assignments) {
      listener.enterList_of_param_assignments(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitList_of_param_assignments) {
      listener.exitList_of_param_assignments(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitList_of_param_assignments) {
      return visitor.visitList_of_param_assignments(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class List_of_port_identifiersContext extends ParserRuleContext {
  public port_identifier(): Port_identifierContext[];
  public port_identifier(i: number): Port_identifierContext;
  public port_identifier(i?: number): Port_identifierContext | Port_identifierContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Port_identifierContext);
    } else {
      return this.getRuleContext(i, Port_identifierContext);
    }
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_list_of_port_identifiers;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterList_of_port_identifiers) {
      listener.enterList_of_port_identifiers(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitList_of_port_identifiers) {
      listener.exitList_of_port_identifiers(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitList_of_port_identifiers) {
      return visitor.visitList_of_port_identifiers(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class List_of_real_identifiersContext extends ParserRuleContext {
  public real_type(): Real_typeContext[];
  public real_type(i: number): Real_typeContext;
  public real_type(i?: number): Real_typeContext | Real_typeContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Real_typeContext);
    } else {
      return this.getRuleContext(i, Real_typeContext);
    }
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_list_of_real_identifiers;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterList_of_real_identifiers) {
      listener.enterList_of_real_identifiers(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitList_of_real_identifiers) {
      listener.exitList_of_real_identifiers(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitList_of_real_identifiers) {
      return visitor.visitList_of_real_identifiers(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class List_of_specparam_assignmentsContext extends ParserRuleContext {
  public specparam_assignment(): Specparam_assignmentContext[];
  public specparam_assignment(i: number): Specparam_assignmentContext;
  public specparam_assignment(i?: number): Specparam_assignmentContext | Specparam_assignmentContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Specparam_assignmentContext);
    } else {
      return this.getRuleContext(i, Specparam_assignmentContext);
    }
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_list_of_specparam_assignments;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterList_of_specparam_assignments) {
      listener.enterList_of_specparam_assignments(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitList_of_specparam_assignments) {
      listener.exitList_of_specparam_assignments(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitList_of_specparam_assignments) {
      return visitor.visitList_of_specparam_assignments(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class List_of_variable_identifiersContext extends ParserRuleContext {
  public variable_type(): Variable_typeContext[];
  public variable_type(i: number): Variable_typeContext;
  public variable_type(i?: number): Variable_typeContext | Variable_typeContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Variable_typeContext);
    } else {
      return this.getRuleContext(i, Variable_typeContext);
    }
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_list_of_variable_identifiers;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterList_of_variable_identifiers) {
      listener.enterList_of_variable_identifiers(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitList_of_variable_identifiers) {
      listener.exitList_of_variable_identifiers(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitList_of_variable_identifiers) {
      return visitor.visitList_of_variable_identifiers(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class List_of_variable_port_identifiersContext extends ParserRuleContext {
  public var_port_id(): Var_port_idContext[];
  public var_port_id(i: number): Var_port_idContext;
  public var_port_id(i?: number): Var_port_idContext | Var_port_idContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Var_port_idContext);
    } else {
      return this.getRuleContext(i, Var_port_idContext);
    }
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_list_of_variable_port_identifiers;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterList_of_variable_port_identifiers) {
      listener.enterList_of_variable_port_identifiers(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitList_of_variable_port_identifiers) {
      listener.exitList_of_variable_port_identifiers(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitList_of_variable_port_identifiers) {
      return visitor.visitList_of_variable_port_identifiers(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Var_port_idContext extends ParserRuleContext {
  public port_identifier(): Port_identifierContext {
    return this.getRuleContext(0, Port_identifierContext);
  }

  public EQ(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.EQ, 0);
  }

  public constant_expression(): Constant_expressionContext | undefined {
    return this.tryGetRuleContext(0, Constant_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_var_port_id;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterVar_port_id) {
      listener.enterVar_port_id(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitVar_port_id) {
      listener.exitVar_port_id(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitVar_port_id) {
      return visitor.visitVar_port_id(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Defparam_assignmentContext extends ParserRuleContext {
  public hierarchical_identifier(): Hierarchical_identifierContext {
    return this.getRuleContext(0, Hierarchical_identifierContext);
  }

  public EQ(): TerminalNode {
    return this.getToken(VerilogParser.EQ, 0);
  }

  public constant_mintypmax_expression(): Constant_mintypmax_expressionContext {
    return this.getRuleContext(0, Constant_mintypmax_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_defparam_assignment;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterDefparam_assignment) {
      listener.enterDefparam_assignment(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitDefparam_assignment) {
      listener.exitDefparam_assignment(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitDefparam_assignment) {
      return visitor.visitDefparam_assignment(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Net_decl_assignmentContext extends ParserRuleContext {
  public net_identifier(): Net_identifierContext {
    return this.getRuleContext(0, Net_identifierContext);
  }

  public EQ(): TerminalNode {
    return this.getToken(VerilogParser.EQ, 0);
  }

  public expression(): ExpressionContext {
    return this.getRuleContext(0, ExpressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_net_decl_assignment;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterNet_decl_assignment) {
      listener.enterNet_decl_assignment(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitNet_decl_assignment) {
      listener.exitNet_decl_assignment(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitNet_decl_assignment) {
      return visitor.visitNet_decl_assignment(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Param_assignmentContext extends ParserRuleContext {
  public parameter_identifier(): Parameter_identifierContext {
    return this.getRuleContext(0, Parameter_identifierContext);
  }

  public EQ(): TerminalNode {
    return this.getToken(VerilogParser.EQ, 0);
  }

  public constant_mintypmax_expression(): Constant_mintypmax_expressionContext {
    return this.getRuleContext(0, Constant_mintypmax_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_param_assignment;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterParam_assignment) {
      listener.enterParam_assignment(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitParam_assignment) {
      listener.exitParam_assignment(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitParam_assignment) {
      return visitor.visitParam_assignment(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Specparam_assignmentContext extends ParserRuleContext {
  public specparam_identifier(): Specparam_identifierContext | undefined {
    return this.tryGetRuleContext(0, Specparam_identifierContext);
  }

  public EQ(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.EQ, 0);
  }

  public constant_mintypmax_expression(): Constant_mintypmax_expressionContext | undefined {
    return this.tryGetRuleContext(0, Constant_mintypmax_expressionContext);
  }

  public pulse_control_specparam(): Pulse_control_specparamContext | undefined {
    return this.tryGetRuleContext(0, Pulse_control_specparamContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_specparam_assignment;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterSpecparam_assignment) {
      listener.enterSpecparam_assignment(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitSpecparam_assignment) {
      listener.exitSpecparam_assignment(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitSpecparam_assignment) {
      return visitor.visitSpecparam_assignment(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Pulse_control_specparamContext extends ParserRuleContext {
  public PATHPULSEDL(): TerminalNode {
    return this.getToken(VerilogParser.PATHPULSEDL, 0);
  }

  public EQ(): TerminalNode {
    return this.getToken(VerilogParser.EQ, 0);
  }

  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public reject_limit_value(): Reject_limit_valueContext {
    return this.getRuleContext(0, Reject_limit_valueContext);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public CO(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.CO, 0);
  }

  public error_limit_value(): Error_limit_valueContext | undefined {
    return this.tryGetRuleContext(0, Error_limit_valueContext);
  }

  public specify_input_terminal_descriptor(): Specify_input_terminal_descriptorContext | undefined {
    return this.tryGetRuleContext(0, Specify_input_terminal_descriptorContext);
  }

  public DL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.DL, 0);
  }

  public specify_output_terminal_descriptor(): Specify_output_terminal_descriptorContext | undefined {
    return this.tryGetRuleContext(0, Specify_output_terminal_descriptorContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_pulse_control_specparam;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterPulse_control_specparam) {
      listener.enterPulse_control_specparam(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitPulse_control_specparam) {
      listener.exitPulse_control_specparam(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitPulse_control_specparam) {
      return visitor.visitPulse_control_specparam(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Error_limit_valueContext extends ParserRuleContext {
  public limit_value(): Limit_valueContext {
    return this.getRuleContext(0, Limit_valueContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_error_limit_value;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterError_limit_value) {
      listener.enterError_limit_value(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitError_limit_value) {
      listener.exitError_limit_value(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitError_limit_value) {
      return visitor.visitError_limit_value(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Reject_limit_valueContext extends ParserRuleContext {
  public limit_value(): Limit_valueContext {
    return this.getRuleContext(0, Limit_valueContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_reject_limit_value;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterReject_limit_value) {
      listener.enterReject_limit_value(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitReject_limit_value) {
      listener.exitReject_limit_value(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitReject_limit_value) {
      return visitor.visitReject_limit_value(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Limit_valueContext extends ParserRuleContext {
  public constant_mintypmax_expression(): Constant_mintypmax_expressionContext {
    return this.getRuleContext(0, Constant_mintypmax_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_limit_value;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterLimit_value) {
      listener.enterLimit_value(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitLimit_value) {
      listener.exitLimit_value(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitLimit_value) {
      return visitor.visitLimit_value(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class DimensionContext extends ParserRuleContext {
  public LB(): TerminalNode {
    return this.getToken(VerilogParser.LB, 0);
  }

  public dimension_constant_expression(): Dimension_constant_expressionContext[];
  public dimension_constant_expression(i: number): Dimension_constant_expressionContext;
  public dimension_constant_expression(i?: number): Dimension_constant_expressionContext | Dimension_constant_expressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Dimension_constant_expressionContext);
    } else {
      return this.getRuleContext(i, Dimension_constant_expressionContext);
    }
  }

  public CL(): TerminalNode {
    return this.getToken(VerilogParser.CL, 0);
  }

  public RB(): TerminalNode {
    return this.getToken(VerilogParser.RB, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_dimension;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterDimension) {
      listener.enterDimension(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitDimension) {
      listener.exitDimension(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitDimension) {
      return visitor.visitDimension(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Range_Context extends ParserRuleContext {
  public LB(): TerminalNode {
    return this.getToken(VerilogParser.LB, 0);
  }

  public msb_constant_expression(): Msb_constant_expressionContext {
    return this.getRuleContext(0, Msb_constant_expressionContext);
  }

  public CL(): TerminalNode {
    return this.getToken(VerilogParser.CL, 0);
  }

  public lsb_constant_expression(): Lsb_constant_expressionContext {
    return this.getRuleContext(0, Lsb_constant_expressionContext);
  }

  public RB(): TerminalNode {
    return this.getToken(VerilogParser.RB, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_range_;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterRange_) {
      listener.enterRange_(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitRange_) {
      listener.exitRange_(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitRange_) {
      return visitor.visitRange_(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Function_declarationContext extends ParserRuleContext {
  public FUNCTION(): TerminalNode {
    return this.getToken(VerilogParser.FUNCTION, 0);
  }

  public function_identifier(): Function_identifierContext {
    return this.getRuleContext(0, Function_identifierContext);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public function_statement(): Function_statementContext {
    return this.getRuleContext(0, Function_statementContext);
  }

  public ENDFUNCTION(): TerminalNode {
    return this.getToken(VerilogParser.ENDFUNCTION, 0);
  }

  public AUTOMATIC(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.AUTOMATIC, 0);
  }

  public function_range_or_type(): Function_range_or_typeContext | undefined {
    return this.tryGetRuleContext(0, Function_range_or_typeContext);
  }

  public function_item_declaration(): Function_item_declarationContext[];
  public function_item_declaration(i: number): Function_item_declarationContext;
  public function_item_declaration(i?: number): Function_item_declarationContext | Function_item_declarationContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Function_item_declarationContext);
    } else {
      return this.getRuleContext(i, Function_item_declarationContext);
    }
  }

  public LP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LP, 0);
  }

  public function_port_list(): Function_port_listContext | undefined {
    return this.tryGetRuleContext(0, Function_port_listContext);
  }

  public RP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RP, 0);
  }

  public block_item_declaration(): Block_item_declarationContext[];
  public block_item_declaration(i: number): Block_item_declarationContext;
  public block_item_declaration(i?: number): Block_item_declarationContext | Block_item_declarationContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Block_item_declarationContext);
    } else {
      return this.getRuleContext(i, Block_item_declarationContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_function_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterFunction_declaration) {
      listener.enterFunction_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitFunction_declaration) {
      listener.exitFunction_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitFunction_declaration) {
      return visitor.visitFunction_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Function_item_declarationContext extends ParserRuleContext {
  public block_item_declaration(): Block_item_declarationContext | undefined {
    return this.tryGetRuleContext(0, Block_item_declarationContext);
  }

  public tf_input_declaration(): Tf_input_declarationContext | undefined {
    return this.tryGetRuleContext(0, Tf_input_declarationContext);
  }

  public SC(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.SC, 0);
  }

  public attribute_instance(): Attribute_instanceContext[];
  public attribute_instance(i: number): Attribute_instanceContext;
  public attribute_instance(i?: number): Attribute_instanceContext | Attribute_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Attribute_instanceContext);
    } else {
      return this.getRuleContext(i, Attribute_instanceContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_function_item_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterFunction_item_declaration) {
      listener.enterFunction_item_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitFunction_item_declaration) {
      listener.exitFunction_item_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitFunction_item_declaration) {
      return visitor.visitFunction_item_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Function_port_listContext extends ParserRuleContext {
  public func_port_item(): Func_port_itemContext[];
  public func_port_item(i: number): Func_port_itemContext;
  public func_port_item(i?: number): Func_port_itemContext | Func_port_itemContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Func_port_itemContext);
    } else {
      return this.getRuleContext(i, Func_port_itemContext);
    }
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_function_port_list;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterFunction_port_list) {
      listener.enterFunction_port_list(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitFunction_port_list) {
      listener.exitFunction_port_list(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitFunction_port_list) {
      return visitor.visitFunction_port_list(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Func_port_itemContext extends ParserRuleContext {
  public tf_input_declaration(): Tf_input_declarationContext {
    return this.getRuleContext(0, Tf_input_declarationContext);
  }

  public attribute_instance(): Attribute_instanceContext[];
  public attribute_instance(i: number): Attribute_instanceContext;
  public attribute_instance(i?: number): Attribute_instanceContext | Attribute_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Attribute_instanceContext);
    } else {
      return this.getRuleContext(i, Attribute_instanceContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_func_port_item;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterFunc_port_item) {
      listener.enterFunc_port_item(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitFunc_port_item) {
      listener.exitFunc_port_item(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitFunc_port_item) {
      return visitor.visitFunc_port_item(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Function_range_or_typeContext extends ParserRuleContext {
  public range_(): Range_Context | undefined {
    return this.tryGetRuleContext(0, Range_Context);
  }

  public SIGNED(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.SIGNED, 0);
  }

  public INTEGER(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.INTEGER, 0);
  }

  public REAL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.REAL, 0);
  }

  public REALTIME(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.REALTIME, 0);
  }

  public TIME(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.TIME, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_function_range_or_type;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterFunction_range_or_type) {
      listener.enterFunction_range_or_type(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitFunction_range_or_type) {
      listener.exitFunction_range_or_type(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitFunction_range_or_type) {
      return visitor.visitFunction_range_or_type(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Task_declarationContext extends ParserRuleContext {
  public TASK(): TerminalNode {
    return this.getToken(VerilogParser.TASK, 0);
  }

  public task_identifier(): Task_identifierContext {
    return this.getRuleContext(0, Task_identifierContext);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public statement_or_null(): Statement_or_nullContext {
    return this.getRuleContext(0, Statement_or_nullContext);
  }

  public ENDTASK(): TerminalNode {
    return this.getToken(VerilogParser.ENDTASK, 0);
  }

  public AUTOMATIC(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.AUTOMATIC, 0);
  }

  public task_item_declaration(): Task_item_declarationContext[];
  public task_item_declaration(i: number): Task_item_declarationContext;
  public task_item_declaration(i?: number): Task_item_declarationContext | Task_item_declarationContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Task_item_declarationContext);
    } else {
      return this.getRuleContext(i, Task_item_declarationContext);
    }
  }

  public LP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LP, 0);
  }

  public RP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RP, 0);
  }

  public task_port_list(): Task_port_listContext | undefined {
    return this.tryGetRuleContext(0, Task_port_listContext);
  }

  public block_item_declaration(): Block_item_declarationContext[];
  public block_item_declaration(i: number): Block_item_declarationContext;
  public block_item_declaration(i?: number): Block_item_declarationContext | Block_item_declarationContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Block_item_declarationContext);
    } else {
      return this.getRuleContext(i, Block_item_declarationContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_task_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterTask_declaration) {
      listener.enterTask_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitTask_declaration) {
      listener.exitTask_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitTask_declaration) {
      return visitor.visitTask_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Task_item_declarationContext extends ParserRuleContext {
  public block_item_declaration(): Block_item_declarationContext | undefined {
    return this.tryGetRuleContext(0, Block_item_declarationContext);
  }

  public tf_input_declaration(): Tf_input_declarationContext | undefined {
    return this.tryGetRuleContext(0, Tf_input_declarationContext);
  }

  public SC(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.SC, 0);
  }

  public attribute_instance(): Attribute_instanceContext[];
  public attribute_instance(i: number): Attribute_instanceContext;
  public attribute_instance(i?: number): Attribute_instanceContext | Attribute_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Attribute_instanceContext);
    } else {
      return this.getRuleContext(i, Attribute_instanceContext);
    }
  }

  public tf_output_declaration(): Tf_output_declarationContext | undefined {
    return this.tryGetRuleContext(0, Tf_output_declarationContext);
  }

  public tf_inout_declaration(): Tf_inout_declarationContext | undefined {
    return this.tryGetRuleContext(0, Tf_inout_declarationContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_task_item_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterTask_item_declaration) {
      listener.enterTask_item_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitTask_item_declaration) {
      listener.exitTask_item_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitTask_item_declaration) {
      return visitor.visitTask_item_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Task_port_listContext extends ParserRuleContext {
  public task_port_item(): Task_port_itemContext[];
  public task_port_item(i: number): Task_port_itemContext;
  public task_port_item(i?: number): Task_port_itemContext | Task_port_itemContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Task_port_itemContext);
    } else {
      return this.getRuleContext(i, Task_port_itemContext);
    }
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_task_port_list;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterTask_port_list) {
      listener.enterTask_port_list(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitTask_port_list) {
      listener.exitTask_port_list(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitTask_port_list) {
      return visitor.visitTask_port_list(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Task_port_itemContext extends ParserRuleContext {
  public tf_input_declaration(): Tf_input_declarationContext | undefined {
    return this.tryGetRuleContext(0, Tf_input_declarationContext);
  }

  public attribute_instance(): Attribute_instanceContext[];
  public attribute_instance(i: number): Attribute_instanceContext;
  public attribute_instance(i?: number): Attribute_instanceContext | Attribute_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Attribute_instanceContext);
    } else {
      return this.getRuleContext(i, Attribute_instanceContext);
    }
  }

  public tf_output_declaration(): Tf_output_declarationContext | undefined {
    return this.tryGetRuleContext(0, Tf_output_declarationContext);
  }

  public tf_inout_declaration(): Tf_inout_declarationContext | undefined {
    return this.tryGetRuleContext(0, Tf_inout_declarationContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_task_port_item;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterTask_port_item) {
      listener.enterTask_port_item(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitTask_port_item) {
      listener.exitTask_port_item(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitTask_port_item) {
      return visitor.visitTask_port_item(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Tf_input_declarationContext extends ParserRuleContext {
  public INPUT(): TerminalNode {
    return this.getToken(VerilogParser.INPUT, 0);
  }

  public list_of_port_identifiers(): List_of_port_identifiersContext {
    return this.getRuleContext(0, List_of_port_identifiersContext);
  }

  public REG(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.REG, 0);
  }

  public SIGNED(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.SIGNED, 0);
  }

  public range_(): Range_Context | undefined {
    return this.tryGetRuleContext(0, Range_Context);
  }

  public task_port_type(): Task_port_typeContext | undefined {
    return this.tryGetRuleContext(0, Task_port_typeContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_tf_input_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterTf_input_declaration) {
      listener.enterTf_input_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitTf_input_declaration) {
      listener.exitTf_input_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitTf_input_declaration) {
      return visitor.visitTf_input_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Tf_output_declarationContext extends ParserRuleContext {
  public OUTPUT(): TerminalNode {
    return this.getToken(VerilogParser.OUTPUT, 0);
  }

  public list_of_port_identifiers(): List_of_port_identifiersContext {
    return this.getRuleContext(0, List_of_port_identifiersContext);
  }

  public REG(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.REG, 0);
  }

  public SIGNED(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.SIGNED, 0);
  }

  public range_(): Range_Context | undefined {
    return this.tryGetRuleContext(0, Range_Context);
  }

  public task_port_type(): Task_port_typeContext | undefined {
    return this.tryGetRuleContext(0, Task_port_typeContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_tf_output_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterTf_output_declaration) {
      listener.enterTf_output_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitTf_output_declaration) {
      listener.exitTf_output_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitTf_output_declaration) {
      return visitor.visitTf_output_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Tf_inout_declarationContext extends ParserRuleContext {
  public INOUT(): TerminalNode {
    return this.getToken(VerilogParser.INOUT, 0);
  }

  public list_of_port_identifiers(): List_of_port_identifiersContext {
    return this.getRuleContext(0, List_of_port_identifiersContext);
  }

  public REG(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.REG, 0);
  }

  public SIGNED(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.SIGNED, 0);
  }

  public range_(): Range_Context | undefined {
    return this.tryGetRuleContext(0, Range_Context);
  }

  public task_port_type(): Task_port_typeContext | undefined {
    return this.tryGetRuleContext(0, Task_port_typeContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_tf_inout_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterTf_inout_declaration) {
      listener.enterTf_inout_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitTf_inout_declaration) {
      listener.exitTf_inout_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitTf_inout_declaration) {
      return visitor.visitTf_inout_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Task_port_typeContext extends ParserRuleContext {
  public INTEGER(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.INTEGER, 0);
  }

  public REAL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.REAL, 0);
  }

  public REALTIME(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.REALTIME, 0);
  }

  public TIME(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.TIME, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_task_port_type;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterTask_port_type) {
      listener.enterTask_port_type(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitTask_port_type) {
      listener.exitTask_port_type(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitTask_port_type) {
      return visitor.visitTask_port_type(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Block_item_declarationContext extends ParserRuleContext {
  public REG(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.REG, 0);
  }

  public list_of_block_variable_identifiers(): List_of_block_variable_identifiersContext | undefined {
    return this.tryGetRuleContext(0, List_of_block_variable_identifiersContext);
  }

  public SC(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.SC, 0);
  }

  public attribute_instance(): Attribute_instanceContext[];
  public attribute_instance(i: number): Attribute_instanceContext;
  public attribute_instance(i?: number): Attribute_instanceContext | Attribute_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Attribute_instanceContext);
    } else {
      return this.getRuleContext(i, Attribute_instanceContext);
    }
  }

  public SIGNED(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.SIGNED, 0);
  }

  public range_(): Range_Context | undefined {
    return this.tryGetRuleContext(0, Range_Context);
  }

  public INTEGER(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.INTEGER, 0);
  }

  public TIME(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.TIME, 0);
  }

  public REAL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.REAL, 0);
  }

  public list_of_block_real_identifiers(): List_of_block_real_identifiersContext | undefined {
    return this.tryGetRuleContext(0, List_of_block_real_identifiersContext);
  }

  public REALTIME(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.REALTIME, 0);
  }

  public event_declaration(): Event_declarationContext | undefined {
    return this.tryGetRuleContext(0, Event_declarationContext);
  }

  public local_parameter_declaration(): Local_parameter_declarationContext | undefined {
    return this.tryGetRuleContext(0, Local_parameter_declarationContext);
  }

  public parameter_declaration(): Parameter_declarationContext | undefined {
    return this.tryGetRuleContext(0, Parameter_declarationContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_block_item_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterBlock_item_declaration) {
      listener.enterBlock_item_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitBlock_item_declaration) {
      listener.exitBlock_item_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitBlock_item_declaration) {
      return visitor.visitBlock_item_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class List_of_block_variable_identifiersContext extends ParserRuleContext {
  public block_variable_type(): Block_variable_typeContext[];
  public block_variable_type(i: number): Block_variable_typeContext;
  public block_variable_type(i?: number): Block_variable_typeContext | Block_variable_typeContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Block_variable_typeContext);
    } else {
      return this.getRuleContext(i, Block_variable_typeContext);
    }
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_list_of_block_variable_identifiers;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterList_of_block_variable_identifiers) {
      listener.enterList_of_block_variable_identifiers(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitList_of_block_variable_identifiers) {
      listener.exitList_of_block_variable_identifiers(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitList_of_block_variable_identifiers) {
      return visitor.visitList_of_block_variable_identifiers(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class List_of_block_real_identifiersContext extends ParserRuleContext {
  public block_real_type(): Block_real_typeContext[];
  public block_real_type(i: number): Block_real_typeContext;
  public block_real_type(i?: number): Block_real_typeContext | Block_real_typeContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Block_real_typeContext);
    } else {
      return this.getRuleContext(i, Block_real_typeContext);
    }
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_list_of_block_real_identifiers;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterList_of_block_real_identifiers) {
      listener.enterList_of_block_real_identifiers(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitList_of_block_real_identifiers) {
      listener.exitList_of_block_real_identifiers(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitList_of_block_real_identifiers) {
      return visitor.visitList_of_block_real_identifiers(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Block_variable_typeContext extends ParserRuleContext {
  public variable_identifier(): Variable_identifierContext {
    return this.getRuleContext(0, Variable_identifierContext);
  }

  public dimension(): DimensionContext[];
  public dimension(i: number): DimensionContext;
  public dimension(i?: number): DimensionContext | DimensionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(DimensionContext);
    } else {
      return this.getRuleContext(i, DimensionContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_block_variable_type;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterBlock_variable_type) {
      listener.enterBlock_variable_type(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitBlock_variable_type) {
      listener.exitBlock_variable_type(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitBlock_variable_type) {
      return visitor.visitBlock_variable_type(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Block_real_typeContext extends ParserRuleContext {
  public real_identifier(): Real_identifierContext {
    return this.getRuleContext(0, Real_identifierContext);
  }

  public dimension(): DimensionContext[];
  public dimension(i: number): DimensionContext;
  public dimension(i?: number): DimensionContext | DimensionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(DimensionContext);
    } else {
      return this.getRuleContext(i, DimensionContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_block_real_type;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterBlock_real_type) {
      listener.enterBlock_real_type(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitBlock_real_type) {
      listener.exitBlock_real_type(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitBlock_real_type) {
      return visitor.visitBlock_real_type(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Gate_instantiationContext extends ParserRuleContext {
  public cmos_switchtype(): Cmos_switchtypeContext | undefined {
    return this.tryGetRuleContext(0, Cmos_switchtypeContext);
  }

  public cmos_switch_instance(): Cmos_switch_instanceContext[];
  public cmos_switch_instance(i: number): Cmos_switch_instanceContext;
  public cmos_switch_instance(i?: number): Cmos_switch_instanceContext | Cmos_switch_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Cmos_switch_instanceContext);
    } else {
      return this.getRuleContext(i, Cmos_switch_instanceContext);
    }
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public delay3(): Delay3Context | undefined {
    return this.tryGetRuleContext(0, Delay3Context);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  public enable_gatetype(): Enable_gatetypeContext | undefined {
    return this.tryGetRuleContext(0, Enable_gatetypeContext);
  }

  public enable_gate_instance(): Enable_gate_instanceContext[];
  public enable_gate_instance(i: number): Enable_gate_instanceContext;
  public enable_gate_instance(i?: number): Enable_gate_instanceContext | Enable_gate_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Enable_gate_instanceContext);
    } else {
      return this.getRuleContext(i, Enable_gate_instanceContext);
    }
  }

  public drive_strength(): Drive_strengthContext | undefined {
    return this.tryGetRuleContext(0, Drive_strengthContext);
  }

  public mos_switchtype(): Mos_switchtypeContext | undefined {
    return this.tryGetRuleContext(0, Mos_switchtypeContext);
  }

  public mos_switch_instance(): Mos_switch_instanceContext[];
  public mos_switch_instance(i: number): Mos_switch_instanceContext;
  public mos_switch_instance(i?: number): Mos_switch_instanceContext | Mos_switch_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Mos_switch_instanceContext);
    } else {
      return this.getRuleContext(i, Mos_switch_instanceContext);
    }
  }

  public n_input_gatetype(): N_input_gatetypeContext | undefined {
    return this.tryGetRuleContext(0, N_input_gatetypeContext);
  }

  public n_input_gate_instance(): N_input_gate_instanceContext[];
  public n_input_gate_instance(i: number): N_input_gate_instanceContext;
  public n_input_gate_instance(i?: number): N_input_gate_instanceContext | N_input_gate_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(N_input_gate_instanceContext);
    } else {
      return this.getRuleContext(i, N_input_gate_instanceContext);
    }
  }

  public delay2(): Delay2Context | undefined {
    return this.tryGetRuleContext(0, Delay2Context);
  }

  public n_output_gatetype(): N_output_gatetypeContext | undefined {
    return this.tryGetRuleContext(0, N_output_gatetypeContext);
  }

  public n_output_gate_instance(): N_output_gate_instanceContext[];
  public n_output_gate_instance(i: number): N_output_gate_instanceContext;
  public n_output_gate_instance(i?: number): N_output_gate_instanceContext | N_output_gate_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(N_output_gate_instanceContext);
    } else {
      return this.getRuleContext(i, N_output_gate_instanceContext);
    }
  }

  public pass_en_switchtype(): Pass_en_switchtypeContext | undefined {
    return this.tryGetRuleContext(0, Pass_en_switchtypeContext);
  }

  public pass_enable_switch_instance(): Pass_enable_switch_instanceContext[];
  public pass_enable_switch_instance(i: number): Pass_enable_switch_instanceContext;
  public pass_enable_switch_instance(i?: number): Pass_enable_switch_instanceContext | Pass_enable_switch_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Pass_enable_switch_instanceContext);
    } else {
      return this.getRuleContext(i, Pass_enable_switch_instanceContext);
    }
  }

  public pass_switchtype(): Pass_switchtypeContext | undefined {
    return this.tryGetRuleContext(0, Pass_switchtypeContext);
  }

  public pass_switch_instance(): Pass_switch_instanceContext[];
  public pass_switch_instance(i: number): Pass_switch_instanceContext;
  public pass_switch_instance(i?: number): Pass_switch_instanceContext | Pass_switch_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Pass_switch_instanceContext);
    } else {
      return this.getRuleContext(i, Pass_switch_instanceContext);
    }
  }

  public PULLDOWN(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.PULLDOWN, 0);
  }

  public pull_gate_instance(): Pull_gate_instanceContext[];
  public pull_gate_instance(i: number): Pull_gate_instanceContext;
  public pull_gate_instance(i?: number): Pull_gate_instanceContext | Pull_gate_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Pull_gate_instanceContext);
    } else {
      return this.getRuleContext(i, Pull_gate_instanceContext);
    }
  }

  public pulldown_strength(): Pulldown_strengthContext | undefined {
    return this.tryGetRuleContext(0, Pulldown_strengthContext);
  }

  public PULLUP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.PULLUP, 0);
  }

  public pullup_strength(): Pullup_strengthContext | undefined {
    return this.tryGetRuleContext(0, Pullup_strengthContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_gate_instantiation;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterGate_instantiation) {
      listener.enterGate_instantiation(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitGate_instantiation) {
      listener.exitGate_instantiation(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitGate_instantiation) {
      return visitor.visitGate_instantiation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Cmos_switch_instanceContext extends ParserRuleContext {
  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public output_terminal(): Output_terminalContext {
    return this.getRuleContext(0, Output_terminalContext);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  public input_terminal(): Input_terminalContext {
    return this.getRuleContext(0, Input_terminalContext);
  }

  public ncontrol_terminal(): Ncontrol_terminalContext {
    return this.getRuleContext(0, Ncontrol_terminalContext);
  }

  public pcontrol_terminal(): Pcontrol_terminalContext {
    return this.getRuleContext(0, Pcontrol_terminalContext);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public name_of_gate_instance(): Name_of_gate_instanceContext | undefined {
    return this.tryGetRuleContext(0, Name_of_gate_instanceContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_cmos_switch_instance;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterCmos_switch_instance) {
      listener.enterCmos_switch_instance(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitCmos_switch_instance) {
      listener.exitCmos_switch_instance(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitCmos_switch_instance) {
      return visitor.visitCmos_switch_instance(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Enable_gate_instanceContext extends ParserRuleContext {
  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public output_terminal(): Output_terminalContext {
    return this.getRuleContext(0, Output_terminalContext);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  public input_terminal(): Input_terminalContext {
    return this.getRuleContext(0, Input_terminalContext);
  }

  public enable_terminal(): Enable_terminalContext {
    return this.getRuleContext(0, Enable_terminalContext);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public name_of_gate_instance(): Name_of_gate_instanceContext | undefined {
    return this.tryGetRuleContext(0, Name_of_gate_instanceContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_enable_gate_instance;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterEnable_gate_instance) {
      listener.enterEnable_gate_instance(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitEnable_gate_instance) {
      listener.exitEnable_gate_instance(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitEnable_gate_instance) {
      return visitor.visitEnable_gate_instance(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Mos_switch_instanceContext extends ParserRuleContext {
  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public output_terminal(): Output_terminalContext {
    return this.getRuleContext(0, Output_terminalContext);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  public input_terminal(): Input_terminalContext {
    return this.getRuleContext(0, Input_terminalContext);
  }

  public enable_terminal(): Enable_terminalContext {
    return this.getRuleContext(0, Enable_terminalContext);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public name_of_gate_instance(): Name_of_gate_instanceContext | undefined {
    return this.tryGetRuleContext(0, Name_of_gate_instanceContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_mos_switch_instance;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterMos_switch_instance) {
      listener.enterMos_switch_instance(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitMos_switch_instance) {
      listener.exitMos_switch_instance(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitMos_switch_instance) {
      return visitor.visitMos_switch_instance(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class N_input_gate_instanceContext extends ParserRuleContext {
  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public output_terminal(): Output_terminalContext {
    return this.getRuleContext(0, Output_terminalContext);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  public input_terminal(): Input_terminalContext[];
  public input_terminal(i: number): Input_terminalContext;
  public input_terminal(i?: number): Input_terminalContext | Input_terminalContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Input_terminalContext);
    } else {
      return this.getRuleContext(i, Input_terminalContext);
    }
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public name_of_gate_instance(): Name_of_gate_instanceContext | undefined {
    return this.tryGetRuleContext(0, Name_of_gate_instanceContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_n_input_gate_instance;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterN_input_gate_instance) {
      listener.enterN_input_gate_instance(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitN_input_gate_instance) {
      listener.exitN_input_gate_instance(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitN_input_gate_instance) {
      return visitor.visitN_input_gate_instance(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class N_output_gate_instanceContext extends ParserRuleContext {
  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public output_terminal(): Output_terminalContext[];
  public output_terminal(i: number): Output_terminalContext;
  public output_terminal(i?: number): Output_terminalContext | Output_terminalContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Output_terminalContext);
    } else {
      return this.getRuleContext(i, Output_terminalContext);
    }
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  public input_terminal(): Input_terminalContext {
    return this.getRuleContext(0, Input_terminalContext);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public name_of_gate_instance(): Name_of_gate_instanceContext | undefined {
    return this.tryGetRuleContext(0, Name_of_gate_instanceContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_n_output_gate_instance;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterN_output_gate_instance) {
      listener.enterN_output_gate_instance(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitN_output_gate_instance) {
      listener.exitN_output_gate_instance(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitN_output_gate_instance) {
      return visitor.visitN_output_gate_instance(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Pass_switch_instanceContext extends ParserRuleContext {
  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public inout_terminal(): Inout_terminalContext[];
  public inout_terminal(i: number): Inout_terminalContext;
  public inout_terminal(i?: number): Inout_terminalContext | Inout_terminalContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Inout_terminalContext);
    } else {
      return this.getRuleContext(i, Inout_terminalContext);
    }
  }

  public CO(): TerminalNode {
    return this.getToken(VerilogParser.CO, 0);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public name_of_gate_instance(): Name_of_gate_instanceContext | undefined {
    return this.tryGetRuleContext(0, Name_of_gate_instanceContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_pass_switch_instance;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterPass_switch_instance) {
      listener.enterPass_switch_instance(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitPass_switch_instance) {
      listener.exitPass_switch_instance(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitPass_switch_instance) {
      return visitor.visitPass_switch_instance(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Pass_enable_switch_instanceContext extends ParserRuleContext {
  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public inout_terminal(): Inout_terminalContext[];
  public inout_terminal(i: number): Inout_terminalContext;
  public inout_terminal(i?: number): Inout_terminalContext | Inout_terminalContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Inout_terminalContext);
    } else {
      return this.getRuleContext(i, Inout_terminalContext);
    }
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  public enable_terminal(): Enable_terminalContext {
    return this.getRuleContext(0, Enable_terminalContext);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public name_of_gate_instance(): Name_of_gate_instanceContext | undefined {
    return this.tryGetRuleContext(0, Name_of_gate_instanceContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_pass_enable_switch_instance;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterPass_enable_switch_instance) {
      listener.enterPass_enable_switch_instance(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitPass_enable_switch_instance) {
      listener.exitPass_enable_switch_instance(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitPass_enable_switch_instance) {
      return visitor.visitPass_enable_switch_instance(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Pull_gate_instanceContext extends ParserRuleContext {
  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public output_terminal(): Output_terminalContext {
    return this.getRuleContext(0, Output_terminalContext);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public name_of_gate_instance(): Name_of_gate_instanceContext | undefined {
    return this.tryGetRuleContext(0, Name_of_gate_instanceContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_pull_gate_instance;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterPull_gate_instance) {
      listener.enterPull_gate_instance(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitPull_gate_instance) {
      listener.exitPull_gate_instance(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitPull_gate_instance) {
      return visitor.visitPull_gate_instance(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Name_of_gate_instanceContext extends ParserRuleContext {
  public gate_instance_identifier(): Gate_instance_identifierContext {
    return this.getRuleContext(0, Gate_instance_identifierContext);
  }

  public range_(): Range_Context | undefined {
    return this.tryGetRuleContext(0, Range_Context);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_name_of_gate_instance;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterName_of_gate_instance) {
      listener.enterName_of_gate_instance(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitName_of_gate_instance) {
      listener.exitName_of_gate_instance(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitName_of_gate_instance) {
      return visitor.visitName_of_gate_instance(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Pulldown_strengthContext extends ParserRuleContext {
  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public strength0(): Strength0Context {
    return this.getRuleContext(0, Strength0Context);
  }

  public CO(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.CO, 0);
  }

  public strength1(): Strength1Context | undefined {
    return this.tryGetRuleContext(0, Strength1Context);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_pulldown_strength;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterPulldown_strength) {
      listener.enterPulldown_strength(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitPulldown_strength) {
      listener.exitPulldown_strength(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitPulldown_strength) {
      return visitor.visitPulldown_strength(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Pullup_strengthContext extends ParserRuleContext {
  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public strength0(): Strength0Context | undefined {
    return this.tryGetRuleContext(0, Strength0Context);
  }

  public CO(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.CO, 0);
  }

  public strength1(): Strength1Context {
    return this.getRuleContext(0, Strength1Context);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_pullup_strength;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterPullup_strength) {
      listener.enterPullup_strength(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitPullup_strength) {
      listener.exitPullup_strength(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitPullup_strength) {
      return visitor.visitPullup_strength(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Enable_terminalContext extends ParserRuleContext {
  public expression(): ExpressionContext {
    return this.getRuleContext(0, ExpressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_enable_terminal;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterEnable_terminal) {
      listener.enterEnable_terminal(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitEnable_terminal) {
      listener.exitEnable_terminal(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitEnable_terminal) {
      return visitor.visitEnable_terminal(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Inout_terminalContext extends ParserRuleContext {
  public net_lvalue(): Net_lvalueContext {
    return this.getRuleContext(0, Net_lvalueContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_inout_terminal;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterInout_terminal) {
      listener.enterInout_terminal(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitInout_terminal) {
      listener.exitInout_terminal(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitInout_terminal) {
      return visitor.visitInout_terminal(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Input_terminalContext extends ParserRuleContext {
  public expression(): ExpressionContext {
    return this.getRuleContext(0, ExpressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_input_terminal;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterInput_terminal) {
      listener.enterInput_terminal(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitInput_terminal) {
      listener.exitInput_terminal(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitInput_terminal) {
      return visitor.visitInput_terminal(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Ncontrol_terminalContext extends ParserRuleContext {
  public expression(): ExpressionContext {
    return this.getRuleContext(0, ExpressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_ncontrol_terminal;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterNcontrol_terminal) {
      listener.enterNcontrol_terminal(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitNcontrol_terminal) {
      listener.exitNcontrol_terminal(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitNcontrol_terminal) {
      return visitor.visitNcontrol_terminal(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Output_terminalContext extends ParserRuleContext {
  public net_lvalue(): Net_lvalueContext {
    return this.getRuleContext(0, Net_lvalueContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_output_terminal;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterOutput_terminal) {
      listener.enterOutput_terminal(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitOutput_terminal) {
      listener.exitOutput_terminal(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitOutput_terminal) {
      return visitor.visitOutput_terminal(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Pcontrol_terminalContext extends ParserRuleContext {
  public expression(): ExpressionContext {
    return this.getRuleContext(0, ExpressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_pcontrol_terminal;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterPcontrol_terminal) {
      listener.enterPcontrol_terminal(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitPcontrol_terminal) {
      listener.exitPcontrol_terminal(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitPcontrol_terminal) {
      return visitor.visitPcontrol_terminal(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Cmos_switchtypeContext extends ParserRuleContext {
  public CMOS(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.CMOS, 0);
  }

  public RCMOS(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RCMOS, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_cmos_switchtype;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterCmos_switchtype) {
      listener.enterCmos_switchtype(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitCmos_switchtype) {
      listener.exitCmos_switchtype(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitCmos_switchtype) {
      return visitor.visitCmos_switchtype(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Enable_gatetypeContext extends ParserRuleContext {
  public BUFIFZERO(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.BUFIFZERO, 0);
  }

  public BUFIFONE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.BUFIFONE, 0);
  }

  public NOTIFZERO(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.NOTIFZERO, 0);
  }

  public NOTIFONE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.NOTIFONE, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_enable_gatetype;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterEnable_gatetype) {
      listener.enterEnable_gatetype(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitEnable_gatetype) {
      listener.exitEnable_gatetype(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitEnable_gatetype) {
      return visitor.visitEnable_gatetype(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Mos_switchtypeContext extends ParserRuleContext {
  public NMOS(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.NMOS, 0);
  }

  public PMOS(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.PMOS, 0);
  }

  public RNMOS(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RNMOS, 0);
  }

  public RPMOS(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RPMOS, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_mos_switchtype;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterMos_switchtype) {
      listener.enterMos_switchtype(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitMos_switchtype) {
      listener.exitMos_switchtype(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitMos_switchtype) {
      return visitor.visitMos_switchtype(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class N_input_gatetypeContext extends ParserRuleContext {
  public AND(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.AND, 0);
  }

  public NAND(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.NAND, 0);
  }

  public OR(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.OR, 0);
  }

  public NOR(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.NOR, 0);
  }

  public XOR(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.XOR, 0);
  }

  public XNOR(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.XNOR, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_n_input_gatetype;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterN_input_gatetype) {
      listener.enterN_input_gatetype(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitN_input_gatetype) {
      listener.exitN_input_gatetype(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitN_input_gatetype) {
      return visitor.visitN_input_gatetype(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class N_output_gatetypeContext extends ParserRuleContext {
  public BUF(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.BUF, 0);
  }

  public NOT(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.NOT, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_n_output_gatetype;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterN_output_gatetype) {
      listener.enterN_output_gatetype(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitN_output_gatetype) {
      listener.exitN_output_gatetype(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitN_output_gatetype) {
      return visitor.visitN_output_gatetype(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Pass_en_switchtypeContext extends ParserRuleContext {
  public TRANIFZERO(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.TRANIFZERO, 0);
  }

  public TRANIFONE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.TRANIFONE, 0);
  }

  public RTRANIFONE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RTRANIFONE, 0);
  }

  public RTRANIFZERO(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RTRANIFZERO, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_pass_en_switchtype;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterPass_en_switchtype) {
      listener.enterPass_en_switchtype(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitPass_en_switchtype) {
      listener.exitPass_en_switchtype(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitPass_en_switchtype) {
      return visitor.visitPass_en_switchtype(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Pass_switchtypeContext extends ParserRuleContext {
  public TRAN(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.TRAN, 0);
  }

  public RTRAN(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RTRAN, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_pass_switchtype;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterPass_switchtype) {
      listener.enterPass_switchtype(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitPass_switchtype) {
      listener.exitPass_switchtype(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitPass_switchtype) {
      return visitor.visitPass_switchtype(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Module_instantiationContext extends ParserRuleContext {
  public module_identifier(): Module_identifierContext {
    return this.getRuleContext(0, Module_identifierContext);
  }

  public module_instance(): Module_instanceContext[];
  public module_instance(i: number): Module_instanceContext;
  public module_instance(i?: number): Module_instanceContext | Module_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Module_instanceContext);
    } else {
      return this.getRuleContext(i, Module_instanceContext);
    }
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public parameter_value_assignment(): Parameter_value_assignmentContext | undefined {
    return this.tryGetRuleContext(0, Parameter_value_assignmentContext);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_module_instantiation;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterModule_instantiation) {
      listener.enterModule_instantiation(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitModule_instantiation) {
      listener.exitModule_instantiation(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitModule_instantiation) {
      return visitor.visitModule_instantiation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Parameter_value_assignmentContext extends ParserRuleContext {
  public HA(): TerminalNode {
    return this.getToken(VerilogParser.HA, 0);
  }

  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public list_of_parameter_assignments(): List_of_parameter_assignmentsContext {
    return this.getRuleContext(0, List_of_parameter_assignmentsContext);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_parameter_value_assignment;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterParameter_value_assignment) {
      listener.enterParameter_value_assignment(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitParameter_value_assignment) {
      listener.exitParameter_value_assignment(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitParameter_value_assignment) {
      return visitor.visitParameter_value_assignment(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class List_of_parameter_assignmentsContext extends ParserRuleContext {
  public ordered_parameter_assignment(): Ordered_parameter_assignmentContext[];
  public ordered_parameter_assignment(i: number): Ordered_parameter_assignmentContext;
  public ordered_parameter_assignment(i?: number): Ordered_parameter_assignmentContext | Ordered_parameter_assignmentContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Ordered_parameter_assignmentContext);
    } else {
      return this.getRuleContext(i, Ordered_parameter_assignmentContext);
    }
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  public named_parameter_assignment(): Named_parameter_assignmentContext[];
  public named_parameter_assignment(i: number): Named_parameter_assignmentContext;
  public named_parameter_assignment(i?: number): Named_parameter_assignmentContext | Named_parameter_assignmentContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Named_parameter_assignmentContext);
    } else {
      return this.getRuleContext(i, Named_parameter_assignmentContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_list_of_parameter_assignments;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterList_of_parameter_assignments) {
      listener.enterList_of_parameter_assignments(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitList_of_parameter_assignments) {
      listener.exitList_of_parameter_assignments(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitList_of_parameter_assignments) {
      return visitor.visitList_of_parameter_assignments(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Ordered_parameter_assignmentContext extends ParserRuleContext {
  public expression(): ExpressionContext {
    return this.getRuleContext(0, ExpressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_ordered_parameter_assignment;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterOrdered_parameter_assignment) {
      listener.enterOrdered_parameter_assignment(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitOrdered_parameter_assignment) {
      listener.exitOrdered_parameter_assignment(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitOrdered_parameter_assignment) {
      return visitor.visitOrdered_parameter_assignment(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Named_parameter_assignmentContext extends ParserRuleContext {
  public DT(): TerminalNode {
    return this.getToken(VerilogParser.DT, 0);
  }

  public parameter_identifier(): Parameter_identifierContext {
    return this.getRuleContext(0, Parameter_identifierContext);
  }

  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public mintypmax_expression(): Mintypmax_expressionContext | undefined {
    return this.tryGetRuleContext(0, Mintypmax_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_named_parameter_assignment;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterNamed_parameter_assignment) {
      listener.enterNamed_parameter_assignment(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitNamed_parameter_assignment) {
      listener.exitNamed_parameter_assignment(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitNamed_parameter_assignment) {
      return visitor.visitNamed_parameter_assignment(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Module_instanceContext extends ParserRuleContext {
  public name_of_module_instance(): Name_of_module_instanceContext {
    return this.getRuleContext(0, Name_of_module_instanceContext);
  }

  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public list_of_port_connections(): List_of_port_connectionsContext {
    return this.getRuleContext(0, List_of_port_connectionsContext);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_module_instance;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterModule_instance) {
      listener.enterModule_instance(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitModule_instance) {
      listener.exitModule_instance(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitModule_instance) {
      return visitor.visitModule_instance(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Name_of_module_instanceContext extends ParserRuleContext {
  public module_instance_identifier(): Module_instance_identifierContext {
    return this.getRuleContext(0, Module_instance_identifierContext);
  }

  public range_(): Range_Context | undefined {
    return this.tryGetRuleContext(0, Range_Context);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_name_of_module_instance;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterName_of_module_instance) {
      listener.enterName_of_module_instance(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitName_of_module_instance) {
      listener.exitName_of_module_instance(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitName_of_module_instance) {
      return visitor.visitName_of_module_instance(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class List_of_port_connectionsContext extends ParserRuleContext {
  public ordered_port_connection(): Ordered_port_connectionContext[];
  public ordered_port_connection(i: number): Ordered_port_connectionContext;
  public ordered_port_connection(i?: number): Ordered_port_connectionContext | Ordered_port_connectionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Ordered_port_connectionContext);
    } else {
      return this.getRuleContext(i, Ordered_port_connectionContext);
    }
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  public named_port_connection(): Named_port_connectionContext[];
  public named_port_connection(i: number): Named_port_connectionContext;
  public named_port_connection(i?: number): Named_port_connectionContext | Named_port_connectionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Named_port_connectionContext);
    } else {
      return this.getRuleContext(i, Named_port_connectionContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_list_of_port_connections;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterList_of_port_connections) {
      listener.enterList_of_port_connections(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitList_of_port_connections) {
      listener.exitList_of_port_connections(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitList_of_port_connections) {
      return visitor.visitList_of_port_connections(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Ordered_port_connectionContext extends ParserRuleContext {
  public attribute_instance(): Attribute_instanceContext[];
  public attribute_instance(i: number): Attribute_instanceContext;
  public attribute_instance(i?: number): Attribute_instanceContext | Attribute_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Attribute_instanceContext);
    } else {
      return this.getRuleContext(i, Attribute_instanceContext);
    }
  }

  public expression(): ExpressionContext | undefined {
    return this.tryGetRuleContext(0, ExpressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_ordered_port_connection;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterOrdered_port_connection) {
      listener.enterOrdered_port_connection(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitOrdered_port_connection) {
      listener.exitOrdered_port_connection(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitOrdered_port_connection) {
      return visitor.visitOrdered_port_connection(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Named_port_connectionContext extends ParserRuleContext {
  public DT(): TerminalNode {
    return this.getToken(VerilogParser.DT, 0);
  }

  public port_identifier(): Port_identifierContext {
    return this.getRuleContext(0, Port_identifierContext);
  }

  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public attribute_instance(): Attribute_instanceContext[];
  public attribute_instance(i: number): Attribute_instanceContext;
  public attribute_instance(i?: number): Attribute_instanceContext | Attribute_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Attribute_instanceContext);
    } else {
      return this.getRuleContext(i, Attribute_instanceContext);
    }
  }

  public expression(): ExpressionContext | undefined {
    return this.tryGetRuleContext(0, ExpressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_named_port_connection;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterNamed_port_connection) {
      listener.enterNamed_port_connection(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitNamed_port_connection) {
      listener.exitNamed_port_connection(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitNamed_port_connection) {
      return visitor.visitNamed_port_connection(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Generate_regionContext extends ParserRuleContext {
  public GENERATE(): TerminalNode {
    return this.getToken(VerilogParser.GENERATE, 0);
  }

  public ENDGENERATE(): TerminalNode {
    return this.getToken(VerilogParser.ENDGENERATE, 0);
  }

  public module_or_generate_item(): Module_or_generate_itemContext[];
  public module_or_generate_item(i: number): Module_or_generate_itemContext;
  public module_or_generate_item(i?: number): Module_or_generate_itemContext | Module_or_generate_itemContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Module_or_generate_itemContext);
    } else {
      return this.getRuleContext(i, Module_or_generate_itemContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_generate_region;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterGenerate_region) {
      listener.enterGenerate_region(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitGenerate_region) {
      listener.exitGenerate_region(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitGenerate_region) {
      return visitor.visitGenerate_region(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Genvar_declarationContext extends ParserRuleContext {
  public GENVAR(): TerminalNode {
    return this.getToken(VerilogParser.GENVAR, 0);
  }

  public list_of_genvar_identifiers(): List_of_genvar_identifiersContext {
    return this.getRuleContext(0, List_of_genvar_identifiersContext);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_genvar_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterGenvar_declaration) {
      listener.enterGenvar_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitGenvar_declaration) {
      listener.exitGenvar_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitGenvar_declaration) {
      return visitor.visitGenvar_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class List_of_genvar_identifiersContext extends ParserRuleContext {
  public genvar_identifier(): Genvar_identifierContext[];
  public genvar_identifier(i: number): Genvar_identifierContext;
  public genvar_identifier(i?: number): Genvar_identifierContext | Genvar_identifierContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Genvar_identifierContext);
    } else {
      return this.getRuleContext(i, Genvar_identifierContext);
    }
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_list_of_genvar_identifiers;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterList_of_genvar_identifiers) {
      listener.enterList_of_genvar_identifiers(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitList_of_genvar_identifiers) {
      listener.exitList_of_genvar_identifiers(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitList_of_genvar_identifiers) {
      return visitor.visitList_of_genvar_identifiers(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Loop_generate_constructContext extends ParserRuleContext {
  public FOR(): TerminalNode {
    return this.getToken(VerilogParser.FOR, 0);
  }

  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public genvar_initialization(): Genvar_initializationContext {
    return this.getRuleContext(0, Genvar_initializationContext);
  }

  public SC(): TerminalNode[];
  public SC(i: number): TerminalNode;
  public SC(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.SC);
    } else {
      return this.getToken(VerilogParser.SC, i);
    }
  }

  public genvar_expression(): Genvar_expressionContext {
    return this.getRuleContext(0, Genvar_expressionContext);
  }

  public genvar_iteration(): Genvar_iterationContext {
    return this.getRuleContext(0, Genvar_iterationContext);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public generate_block(): Generate_blockContext {
    return this.getRuleContext(0, Generate_blockContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_loop_generate_construct;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterLoop_generate_construct) {
      listener.enterLoop_generate_construct(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitLoop_generate_construct) {
      listener.exitLoop_generate_construct(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitLoop_generate_construct) {
      return visitor.visitLoop_generate_construct(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Genvar_initializationContext extends ParserRuleContext {
  public genvar_identifier(): Genvar_identifierContext {
    return this.getRuleContext(0, Genvar_identifierContext);
  }

  public EQ(): TerminalNode {
    return this.getToken(VerilogParser.EQ, 0);
  }

  public constant_expression(): Constant_expressionContext {
    return this.getRuleContext(0, Constant_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_genvar_initialization;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterGenvar_initialization) {
      listener.enterGenvar_initialization(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitGenvar_initialization) {
      listener.exitGenvar_initialization(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitGenvar_initialization) {
      return visitor.visitGenvar_initialization(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Genvar_expressionContext extends ParserRuleContext {
  public constant_expression(): Constant_expressionContext {
    return this.getRuleContext(0, Constant_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_genvar_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterGenvar_expression) {
      listener.enterGenvar_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitGenvar_expression) {
      listener.exitGenvar_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitGenvar_expression) {
      return visitor.visitGenvar_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Genvar_iterationContext extends ParserRuleContext {
  public genvar_identifier(): Genvar_identifierContext {
    return this.getRuleContext(0, Genvar_identifierContext);
  }

  public EQ(): TerminalNode {
    return this.getToken(VerilogParser.EQ, 0);
  }

  public genvar_expression(): Genvar_expressionContext {
    return this.getRuleContext(0, Genvar_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_genvar_iteration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterGenvar_iteration) {
      listener.enterGenvar_iteration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitGenvar_iteration) {
      listener.exitGenvar_iteration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitGenvar_iteration) {
      return visitor.visitGenvar_iteration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Conditional_generate_constructContext extends ParserRuleContext {
  public if_generate_construct(): If_generate_constructContext | undefined {
    return this.tryGetRuleContext(0, If_generate_constructContext);
  }

  public case_generate_construct(): Case_generate_constructContext | undefined {
    return this.tryGetRuleContext(0, Case_generate_constructContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_conditional_generate_construct;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterConditional_generate_construct) {
      listener.enterConditional_generate_construct(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitConditional_generate_construct) {
      listener.exitConditional_generate_construct(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitConditional_generate_construct) {
      return visitor.visitConditional_generate_construct(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class If_generate_constructContext extends ParserRuleContext {
  public IF(): TerminalNode {
    return this.getToken(VerilogParser.IF, 0);
  }

  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public constant_expression(): Constant_expressionContext {
    return this.getRuleContext(0, Constant_expressionContext);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public generate_block_or_null(): Generate_block_or_nullContext[];
  public generate_block_or_null(i: number): Generate_block_or_nullContext;
  public generate_block_or_null(i?: number): Generate_block_or_nullContext | Generate_block_or_nullContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Generate_block_or_nullContext);
    } else {
      return this.getRuleContext(i, Generate_block_or_nullContext);
    }
  }

  public ELSE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.ELSE, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_if_generate_construct;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterIf_generate_construct) {
      listener.enterIf_generate_construct(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitIf_generate_construct) {
      listener.exitIf_generate_construct(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitIf_generate_construct) {
      return visitor.visitIf_generate_construct(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Case_generate_constructContext extends ParserRuleContext {
  public CASE(): TerminalNode {
    return this.getToken(VerilogParser.CASE, 0);
  }

  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public constant_expression(): Constant_expressionContext {
    return this.getRuleContext(0, Constant_expressionContext);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public ENDCASE(): TerminalNode {
    return this.getToken(VerilogParser.ENDCASE, 0);
  }

  public case_generate_item(): Case_generate_itemContext[];
  public case_generate_item(i: number): Case_generate_itemContext;
  public case_generate_item(i?: number): Case_generate_itemContext | Case_generate_itemContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Case_generate_itemContext);
    } else {
      return this.getRuleContext(i, Case_generate_itemContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_case_generate_construct;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterCase_generate_construct) {
      listener.enterCase_generate_construct(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitCase_generate_construct) {
      listener.exitCase_generate_construct(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitCase_generate_construct) {
      return visitor.visitCase_generate_construct(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Case_generate_itemContext extends ParserRuleContext {
  public constant_expression(): Constant_expressionContext[];
  public constant_expression(i: number): Constant_expressionContext;
  public constant_expression(i?: number): Constant_expressionContext | Constant_expressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Constant_expressionContext);
    } else {
      return this.getRuleContext(i, Constant_expressionContext);
    }
  }

  public CL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.CL, 0);
  }

  public generate_block_or_null(): Generate_block_or_nullContext {
    return this.getRuleContext(0, Generate_block_or_nullContext);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  public DEFAULT(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.DEFAULT, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_case_generate_item;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterCase_generate_item) {
      listener.enterCase_generate_item(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitCase_generate_item) {
      listener.exitCase_generate_item(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitCase_generate_item) {
      return visitor.visitCase_generate_item(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Generate_blockContext extends ParserRuleContext {
  public module_or_generate_item(): Module_or_generate_itemContext[];
  public module_or_generate_item(i: number): Module_or_generate_itemContext;
  public module_or_generate_item(i?: number): Module_or_generate_itemContext | Module_or_generate_itemContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Module_or_generate_itemContext);
    } else {
      return this.getRuleContext(i, Module_or_generate_itemContext);
    }
  }

  public BEGIN(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.BEGIN, 0);
  }

  public END(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.END, 0);
  }

  public generate_block_name(): Generate_block_nameContext | undefined {
    return this.tryGetRuleContext(0, Generate_block_nameContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_generate_block;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterGenerate_block) {
      listener.enterGenerate_block(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitGenerate_block) {
      listener.exitGenerate_block(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitGenerate_block) {
      return visitor.visitGenerate_block(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Generate_block_nameContext extends ParserRuleContext {
  public CL(): TerminalNode {
    return this.getToken(VerilogParser.CL, 0);
  }

  public generate_block_identifier(): Generate_block_identifierContext {
    return this.getRuleContext(0, Generate_block_identifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_generate_block_name;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterGenerate_block_name) {
      listener.enterGenerate_block_name(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitGenerate_block_name) {
      listener.exitGenerate_block_name(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitGenerate_block_name) {
      return visitor.visitGenerate_block_name(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Generate_block_or_nullContext extends ParserRuleContext {
  public generate_block(): Generate_blockContext | undefined {
    return this.tryGetRuleContext(0, Generate_blockContext);
  }

  public SC(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.SC, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_generate_block_or_null;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterGenerate_block_or_null) {
      listener.enterGenerate_block_or_null(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitGenerate_block_or_null) {
      listener.exitGenerate_block_or_null(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitGenerate_block_or_null) {
      return visitor.visitGenerate_block_or_null(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Udp_declarationContext extends ParserRuleContext {
  public PRIMITIVE(): TerminalNode {
    return this.getToken(VerilogParser.PRIMITIVE, 0);
  }

  public udp_identifier(): Udp_identifierContext {
    return this.getRuleContext(0, Udp_identifierContext);
  }

  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public udp_port_list(): Udp_port_listContext | undefined {
    return this.tryGetRuleContext(0, Udp_port_listContext);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public udp_body(): Udp_bodyContext {
    return this.getRuleContext(0, Udp_bodyContext);
  }

  public ENDPRIMITIVE(): TerminalNode {
    return this.getToken(VerilogParser.ENDPRIMITIVE, 0);
  }

  public attribute_instance(): Attribute_instanceContext[];
  public attribute_instance(i: number): Attribute_instanceContext;
  public attribute_instance(i?: number): Attribute_instanceContext | Attribute_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Attribute_instanceContext);
    } else {
      return this.getRuleContext(i, Attribute_instanceContext);
    }
  }

  public udp_port_declaration(): Udp_port_declarationContext[];
  public udp_port_declaration(i: number): Udp_port_declarationContext;
  public udp_port_declaration(i?: number): Udp_port_declarationContext | Udp_port_declarationContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Udp_port_declarationContext);
    } else {
      return this.getRuleContext(i, Udp_port_declarationContext);
    }
  }

  public udp_declaration_port_list(): Udp_declaration_port_listContext | undefined {
    return this.tryGetRuleContext(0, Udp_declaration_port_listContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_udp_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterUdp_declaration) {
      listener.enterUdp_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitUdp_declaration) {
      listener.exitUdp_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitUdp_declaration) {
      return visitor.visitUdp_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Udp_port_listContext extends ParserRuleContext {
  public output_port_identifier(): Output_port_identifierContext {
    return this.getRuleContext(0, Output_port_identifierContext);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  public input_port_identifier(): Input_port_identifierContext[];
  public input_port_identifier(i: number): Input_port_identifierContext;
  public input_port_identifier(i?: number): Input_port_identifierContext | Input_port_identifierContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Input_port_identifierContext);
    } else {
      return this.getRuleContext(i, Input_port_identifierContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_udp_port_list;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterUdp_port_list) {
      listener.enterUdp_port_list(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitUdp_port_list) {
      listener.exitUdp_port_list(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitUdp_port_list) {
      return visitor.visitUdp_port_list(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Udp_declaration_port_listContext extends ParserRuleContext {
  public udp_output_declaration(): Udp_output_declarationContext {
    return this.getRuleContext(0, Udp_output_declarationContext);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  public udp_input_declaration(): Udp_input_declarationContext[];
  public udp_input_declaration(i: number): Udp_input_declarationContext;
  public udp_input_declaration(i?: number): Udp_input_declarationContext | Udp_input_declarationContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Udp_input_declarationContext);
    } else {
      return this.getRuleContext(i, Udp_input_declarationContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_udp_declaration_port_list;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterUdp_declaration_port_list) {
      listener.enterUdp_declaration_port_list(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitUdp_declaration_port_list) {
      listener.exitUdp_declaration_port_list(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitUdp_declaration_port_list) {
      return visitor.visitUdp_declaration_port_list(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Udp_port_declarationContext extends ParserRuleContext {
  public udp_output_declaration(): Udp_output_declarationContext | undefined {
    return this.tryGetRuleContext(0, Udp_output_declarationContext);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public udp_input_declaration(): Udp_input_declarationContext | undefined {
    return this.tryGetRuleContext(0, Udp_input_declarationContext);
  }

  public udp_reg_declaration(): Udp_reg_declarationContext | undefined {
    return this.tryGetRuleContext(0, Udp_reg_declarationContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_udp_port_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterUdp_port_declaration) {
      listener.enterUdp_port_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitUdp_port_declaration) {
      listener.exitUdp_port_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitUdp_port_declaration) {
      return visitor.visitUdp_port_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Udp_output_declarationContext extends ParserRuleContext {
  public OUTPUT(): TerminalNode {
    return this.getToken(VerilogParser.OUTPUT, 0);
  }

  public port_identifier(): Port_identifierContext {
    return this.getRuleContext(0, Port_identifierContext);
  }

  public attribute_instance(): Attribute_instanceContext[];
  public attribute_instance(i: number): Attribute_instanceContext;
  public attribute_instance(i?: number): Attribute_instanceContext | Attribute_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Attribute_instanceContext);
    } else {
      return this.getRuleContext(i, Attribute_instanceContext);
    }
  }

  public REG(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.REG, 0);
  }

  public EQ(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.EQ, 0);
  }

  public constant_expression(): Constant_expressionContext | undefined {
    return this.tryGetRuleContext(0, Constant_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_udp_output_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterUdp_output_declaration) {
      listener.enterUdp_output_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitUdp_output_declaration) {
      listener.exitUdp_output_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitUdp_output_declaration) {
      return visitor.visitUdp_output_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Udp_input_declarationContext extends ParserRuleContext {
  public INPUT(): TerminalNode {
    return this.getToken(VerilogParser.INPUT, 0);
  }

  public list_of_port_identifiers(): List_of_port_identifiersContext {
    return this.getRuleContext(0, List_of_port_identifiersContext);
  }

  public attribute_instance(): Attribute_instanceContext[];
  public attribute_instance(i: number): Attribute_instanceContext;
  public attribute_instance(i?: number): Attribute_instanceContext | Attribute_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Attribute_instanceContext);
    } else {
      return this.getRuleContext(i, Attribute_instanceContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_udp_input_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterUdp_input_declaration) {
      listener.enterUdp_input_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitUdp_input_declaration) {
      listener.exitUdp_input_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitUdp_input_declaration) {
      return visitor.visitUdp_input_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Udp_reg_declarationContext extends ParserRuleContext {
  public REG(): TerminalNode {
    return this.getToken(VerilogParser.REG, 0);
  }

  public variable_identifier(): Variable_identifierContext {
    return this.getRuleContext(0, Variable_identifierContext);
  }

  public attribute_instance(): Attribute_instanceContext[];
  public attribute_instance(i: number): Attribute_instanceContext;
  public attribute_instance(i?: number): Attribute_instanceContext | Attribute_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Attribute_instanceContext);
    } else {
      return this.getRuleContext(i, Attribute_instanceContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_udp_reg_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterUdp_reg_declaration) {
      listener.enterUdp_reg_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitUdp_reg_declaration) {
      listener.exitUdp_reg_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitUdp_reg_declaration) {
      return visitor.visitUdp_reg_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Udp_bodyContext extends ParserRuleContext {
  public combinational_body(): Combinational_bodyContext | undefined {
    return this.tryGetRuleContext(0, Combinational_bodyContext);
  }

  public sequential_body(): Sequential_bodyContext | undefined {
    return this.tryGetRuleContext(0, Sequential_bodyContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_udp_body;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterUdp_body) {
      listener.enterUdp_body(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitUdp_body) {
      listener.exitUdp_body(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitUdp_body) {
      return visitor.visitUdp_body(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Combinational_bodyContext extends ParserRuleContext {
  public TABLE(): TerminalNode {
    return this.getToken(VerilogParser.TABLE, 0);
  }

  public ENDTABLE(): TerminalNode {
    return this.getToken(VerilogParser.ENDTABLE, 0);
  }

  public combinational_entry(): Combinational_entryContext[];
  public combinational_entry(i: number): Combinational_entryContext;
  public combinational_entry(i?: number): Combinational_entryContext | Combinational_entryContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Combinational_entryContext);
    } else {
      return this.getRuleContext(i, Combinational_entryContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_combinational_body;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterCombinational_body) {
      listener.enterCombinational_body(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitCombinational_body) {
      listener.exitCombinational_body(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitCombinational_body) {
      return visitor.visitCombinational_body(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Combinational_entryContext extends ParserRuleContext {
  public level_input_list(): Level_input_listContext {
    return this.getRuleContext(0, Level_input_listContext);
  }

  public CL(): TerminalNode {
    return this.getToken(VerilogParser.CL, 0);
  }

  public output_symbol(): Output_symbolContext {
    return this.getRuleContext(0, Output_symbolContext);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_combinational_entry;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterCombinational_entry) {
      listener.enterCombinational_entry(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitCombinational_entry) {
      listener.exitCombinational_entry(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitCombinational_entry) {
      return visitor.visitCombinational_entry(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Sequential_bodyContext extends ParserRuleContext {
  public TABLE(): TerminalNode {
    return this.getToken(VerilogParser.TABLE, 0);
  }

  public ENDTABLE(): TerminalNode {
    return this.getToken(VerilogParser.ENDTABLE, 0);
  }

  public udp_initial_statement(): Udp_initial_statementContext | undefined {
    return this.tryGetRuleContext(0, Udp_initial_statementContext);
  }

  public sequential_entry(): Sequential_entryContext[];
  public sequential_entry(i: number): Sequential_entryContext;
  public sequential_entry(i?: number): Sequential_entryContext | Sequential_entryContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Sequential_entryContext);
    } else {
      return this.getRuleContext(i, Sequential_entryContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_sequential_body;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterSequential_body) {
      listener.enterSequential_body(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitSequential_body) {
      listener.exitSequential_body(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitSequential_body) {
      return visitor.visitSequential_body(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Udp_initial_statementContext extends ParserRuleContext {
  public INITIAL(): TerminalNode {
    return this.getToken(VerilogParser.INITIAL, 0);
  }

  public output_port_identifier(): Output_port_identifierContext {
    return this.getRuleContext(0, Output_port_identifierContext);
  }

  public EQ(): TerminalNode {
    return this.getToken(VerilogParser.EQ, 0);
  }

  public init_val(): Init_valContext {
    return this.getRuleContext(0, Init_valContext);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_udp_initial_statement;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterUdp_initial_statement) {
      listener.enterUdp_initial_statement(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitUdp_initial_statement) {
      listener.exitUdp_initial_statement(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitUdp_initial_statement) {
      return visitor.visitUdp_initial_statement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Init_valContext extends ParserRuleContext {
  public binary_number(): Binary_numberContext | undefined {
    return this.tryGetRuleContext(0, Binary_numberContext);
  }

  public unsigned_number(): Unsigned_numberContext | undefined {
    return this.tryGetRuleContext(0, Unsigned_numberContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_init_val;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterInit_val) {
      listener.enterInit_val(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitInit_val) {
      listener.exitInit_val(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitInit_val) {
      return visitor.visitInit_val(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Sequential_entryContext extends ParserRuleContext {
  public seq_input_list(): Seq_input_listContext {
    return this.getRuleContext(0, Seq_input_listContext);
  }

  public CL(): TerminalNode[];
  public CL(i: number): TerminalNode;
  public CL(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CL);
    } else {
      return this.getToken(VerilogParser.CL, i);
    }
  }

  public current_state(): Current_stateContext {
    return this.getRuleContext(0, Current_stateContext);
  }

  public next_state(): Next_stateContext {
    return this.getRuleContext(0, Next_stateContext);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_sequential_entry;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterSequential_entry) {
      listener.enterSequential_entry(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitSequential_entry) {
      listener.exitSequential_entry(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitSequential_entry) {
      return visitor.visitSequential_entry(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Seq_input_listContext extends ParserRuleContext {
  public level_input_list(): Level_input_listContext | undefined {
    return this.tryGetRuleContext(0, Level_input_listContext);
  }

  public edge_input_list(): Edge_input_listContext | undefined {
    return this.tryGetRuleContext(0, Edge_input_listContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_seq_input_list;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterSeq_input_list) {
      listener.enterSeq_input_list(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitSeq_input_list) {
      listener.exitSeq_input_list(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitSeq_input_list) {
      return visitor.visitSeq_input_list(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Level_input_listContext extends ParserRuleContext {
  public level_symbol(): Level_symbolContext[];
  public level_symbol(i: number): Level_symbolContext;
  public level_symbol(i?: number): Level_symbolContext | Level_symbolContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Level_symbolContext);
    } else {
      return this.getRuleContext(i, Level_symbolContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_level_input_list;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterLevel_input_list) {
      listener.enterLevel_input_list(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitLevel_input_list) {
      listener.exitLevel_input_list(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitLevel_input_list) {
      return visitor.visitLevel_input_list(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Edge_input_listContext extends ParserRuleContext {
  public edge_indicator(): Edge_indicatorContext {
    return this.getRuleContext(0, Edge_indicatorContext);
  }

  public level_symbol(): Level_symbolContext[];
  public level_symbol(i: number): Level_symbolContext;
  public level_symbol(i?: number): Level_symbolContext | Level_symbolContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Level_symbolContext);
    } else {
      return this.getRuleContext(i, Level_symbolContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_edge_input_list;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterEdge_input_list) {
      listener.enterEdge_input_list(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitEdge_input_list) {
      listener.exitEdge_input_list(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitEdge_input_list) {
      return visitor.visitEdge_input_list(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Edge_indicatorContext extends ParserRuleContext {
  public LP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LP, 0);
  }

  public level_symbol(): Level_symbolContext[];
  public level_symbol(i: number): Level_symbolContext;
  public level_symbol(i?: number): Level_symbolContext | Level_symbolContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Level_symbolContext);
    } else {
      return this.getRuleContext(i, Level_symbolContext);
    }
  }

  public RP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RP, 0);
  }

  public edge_symbol(): Edge_symbolContext | undefined {
    return this.tryGetRuleContext(0, Edge_symbolContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_edge_indicator;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterEdge_indicator) {
      listener.enterEdge_indicator(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitEdge_indicator) {
      listener.exitEdge_indicator(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitEdge_indicator) {
      return visitor.visitEdge_indicator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Current_stateContext extends ParserRuleContext {
  public level_symbol(): Level_symbolContext {
    return this.getRuleContext(0, Level_symbolContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_current_state;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterCurrent_state) {
      listener.enterCurrent_state(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitCurrent_state) {
      listener.exitCurrent_state(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitCurrent_state) {
      return visitor.visitCurrent_state(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Next_stateContext extends ParserRuleContext {
  public output_symbol(): Output_symbolContext | undefined {
    return this.tryGetRuleContext(0, Output_symbolContext);
  }

  public MI(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.MI, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_next_state;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterNext_state) {
      listener.enterNext_state(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitNext_state) {
      listener.exitNext_state(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitNext_state) {
      return visitor.visitNext_state(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Output_symbolContext extends ParserRuleContext {
  public OUTPUT_OR_LEVEL_SYMBOL(): TerminalNode {
    return this.getToken(VerilogParser.OUTPUT_OR_LEVEL_SYMBOL, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_output_symbol;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterOutput_symbol) {
      listener.enterOutput_symbol(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitOutput_symbol) {
      listener.exitOutput_symbol(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitOutput_symbol) {
      return visitor.visitOutput_symbol(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Level_symbolContext extends ParserRuleContext {
  public LEVEL_ONLY_SYMBOL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LEVEL_ONLY_SYMBOL, 0);
  }

  public OUTPUT_OR_LEVEL_SYMBOL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.OUTPUT_OR_LEVEL_SYMBOL, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_level_symbol;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterLevel_symbol) {
      listener.enterLevel_symbol(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitLevel_symbol) {
      listener.exitLevel_symbol(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitLevel_symbol) {
      return visitor.visitLevel_symbol(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Edge_symbolContext extends ParserRuleContext {
  public EDGE_SYMBOL(): TerminalNode {
    return this.getToken(VerilogParser.EDGE_SYMBOL, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_edge_symbol;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterEdge_symbol) {
      listener.enterEdge_symbol(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitEdge_symbol) {
      listener.exitEdge_symbol(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitEdge_symbol) {
      return visitor.visitEdge_symbol(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Udp_instantiationContext extends ParserRuleContext {
  public udp_identifier(): Udp_identifierContext {
    return this.getRuleContext(0, Udp_identifierContext);
  }

  public udp_instance(): Udp_instanceContext[];
  public udp_instance(i: number): Udp_instanceContext;
  public udp_instance(i?: number): Udp_instanceContext | Udp_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Udp_instanceContext);
    } else {
      return this.getRuleContext(i, Udp_instanceContext);
    }
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public drive_strength(): Drive_strengthContext | undefined {
    return this.tryGetRuleContext(0, Drive_strengthContext);
  }

  public delay2(): Delay2Context | undefined {
    return this.tryGetRuleContext(0, Delay2Context);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_udp_instantiation;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterUdp_instantiation) {
      listener.enterUdp_instantiation(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitUdp_instantiation) {
      listener.exitUdp_instantiation(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitUdp_instantiation) {
      return visitor.visitUdp_instantiation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Udp_instanceContext extends ParserRuleContext {
  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public output_terminal(): Output_terminalContext {
    return this.getRuleContext(0, Output_terminalContext);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  public input_terminal(): Input_terminalContext[];
  public input_terminal(i: number): Input_terminalContext;
  public input_terminal(i?: number): Input_terminalContext | Input_terminalContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Input_terminalContext);
    } else {
      return this.getRuleContext(i, Input_terminalContext);
    }
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public name_of_udp_instance(): Name_of_udp_instanceContext | undefined {
    return this.tryGetRuleContext(0, Name_of_udp_instanceContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_udp_instance;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterUdp_instance) {
      listener.enterUdp_instance(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitUdp_instance) {
      listener.exitUdp_instance(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitUdp_instance) {
      return visitor.visitUdp_instance(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Name_of_udp_instanceContext extends ParserRuleContext {
  public udp_instance_identifier(): Udp_instance_identifierContext {
    return this.getRuleContext(0, Udp_instance_identifierContext);
  }

  public range_(): Range_Context | undefined {
    return this.tryGetRuleContext(0, Range_Context);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_name_of_udp_instance;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterName_of_udp_instance) {
      listener.enterName_of_udp_instance(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitName_of_udp_instance) {
      listener.exitName_of_udp_instance(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitName_of_udp_instance) {
      return visitor.visitName_of_udp_instance(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Continuous_assignContext extends ParserRuleContext {
  public ASSIGN(): TerminalNode {
    return this.getToken(VerilogParser.ASSIGN, 0);
  }

  public list_of_net_assignments(): List_of_net_assignmentsContext {
    return this.getRuleContext(0, List_of_net_assignmentsContext);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public drive_strength(): Drive_strengthContext | undefined {
    return this.tryGetRuleContext(0, Drive_strengthContext);
  }

  public delay3(): Delay3Context | undefined {
    return this.tryGetRuleContext(0, Delay3Context);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_continuous_assign;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterContinuous_assign) {
      listener.enterContinuous_assign(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitContinuous_assign) {
      listener.exitContinuous_assign(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitContinuous_assign) {
      return visitor.visitContinuous_assign(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class List_of_net_assignmentsContext extends ParserRuleContext {
  public net_assignment(): Net_assignmentContext[];
  public net_assignment(i: number): Net_assignmentContext;
  public net_assignment(i?: number): Net_assignmentContext | Net_assignmentContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Net_assignmentContext);
    } else {
      return this.getRuleContext(i, Net_assignmentContext);
    }
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_list_of_net_assignments;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterList_of_net_assignments) {
      listener.enterList_of_net_assignments(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitList_of_net_assignments) {
      listener.exitList_of_net_assignments(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitList_of_net_assignments) {
      return visitor.visitList_of_net_assignments(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Net_assignmentContext extends ParserRuleContext {
  public net_lvalue(): Net_lvalueContext {
    return this.getRuleContext(0, Net_lvalueContext);
  }

  public EQ(): TerminalNode {
    return this.getToken(VerilogParser.EQ, 0);
  }

  public expression(): ExpressionContext {
    return this.getRuleContext(0, ExpressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_net_assignment;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterNet_assignment) {
      listener.enterNet_assignment(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitNet_assignment) {
      listener.exitNet_assignment(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitNet_assignment) {
      return visitor.visitNet_assignment(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Initial_constructContext extends ParserRuleContext {
  public INITIAL(): TerminalNode {
    return this.getToken(VerilogParser.INITIAL, 0);
  }

  public statement(): StatementContext {
    return this.getRuleContext(0, StatementContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_initial_construct;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterInitial_construct) {
      listener.enterInitial_construct(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitInitial_construct) {
      listener.exitInitial_construct(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitInitial_construct) {
      return visitor.visitInitial_construct(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Always_constructContext extends ParserRuleContext {
  public ALWAYS(): TerminalNode {
    return this.getToken(VerilogParser.ALWAYS, 0);
  }

  public statement(): StatementContext {
    return this.getRuleContext(0, StatementContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_always_construct;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterAlways_construct) {
      listener.enterAlways_construct(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitAlways_construct) {
      listener.exitAlways_construct(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitAlways_construct) {
      return visitor.visitAlways_construct(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Blocking_assignmentContext extends ParserRuleContext {
  public variable_lvalue(): Variable_lvalueContext {
    return this.getRuleContext(0, Variable_lvalueContext);
  }

  public EQ(): TerminalNode {
    return this.getToken(VerilogParser.EQ, 0);
  }

  public expression(): ExpressionContext {
    return this.getRuleContext(0, ExpressionContext);
  }

  public delay_or_event_control(): Delay_or_event_controlContext | undefined {
    return this.tryGetRuleContext(0, Delay_or_event_controlContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_blocking_assignment;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterBlocking_assignment) {
      listener.enterBlocking_assignment(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitBlocking_assignment) {
      listener.exitBlocking_assignment(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitBlocking_assignment) {
      return visitor.visitBlocking_assignment(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Nonblocking_assignmentContext extends ParserRuleContext {
  public variable_lvalue(): Variable_lvalueContext {
    return this.getRuleContext(0, Variable_lvalueContext);
  }

  public LTEQ(): TerminalNode {
    return this.getToken(VerilogParser.LTEQ, 0);
  }

  public expression(): ExpressionContext {
    return this.getRuleContext(0, ExpressionContext);
  }

  public delay_or_event_control(): Delay_or_event_controlContext | undefined {
    return this.tryGetRuleContext(0, Delay_or_event_controlContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_nonblocking_assignment;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterNonblocking_assignment) {
      listener.enterNonblocking_assignment(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitNonblocking_assignment) {
      listener.exitNonblocking_assignment(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitNonblocking_assignment) {
      return visitor.visitNonblocking_assignment(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Procedural_continuous_assignmentsContext extends ParserRuleContext {
  public ASSIGN(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.ASSIGN, 0);
  }

  public variable_assignment(): Variable_assignmentContext | undefined {
    return this.tryGetRuleContext(0, Variable_assignmentContext);
  }

  public DEASSIGN(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.DEASSIGN, 0);
  }

  public variable_lvalue(): Variable_lvalueContext | undefined {
    return this.tryGetRuleContext(0, Variable_lvalueContext);
  }

  public FORCE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.FORCE, 0);
  }

  public RELEASE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RELEASE, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_procedural_continuous_assignments;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterProcedural_continuous_assignments) {
      listener.enterProcedural_continuous_assignments(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitProcedural_continuous_assignments) {
      listener.exitProcedural_continuous_assignments(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitProcedural_continuous_assignments) {
      return visitor.visitProcedural_continuous_assignments(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Variable_assignmentContext extends ParserRuleContext {
  public variable_lvalue(): Variable_lvalueContext {
    return this.getRuleContext(0, Variable_lvalueContext);
  }

  public EQ(): TerminalNode {
    return this.getToken(VerilogParser.EQ, 0);
  }

  public expression(): ExpressionContext {
    return this.getRuleContext(0, ExpressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_variable_assignment;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterVariable_assignment) {
      listener.enterVariable_assignment(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitVariable_assignment) {
      listener.exitVariable_assignment(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitVariable_assignment) {
      return visitor.visitVariable_assignment(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Par_blockContext extends ParserRuleContext {
  public FORK(): TerminalNode {
    return this.getToken(VerilogParser.FORK, 0);
  }

  public JOIN(): TerminalNode {
    return this.getToken(VerilogParser.JOIN, 0);
  }

  public block_name(): Block_nameContext | undefined {
    return this.tryGetRuleContext(0, Block_nameContext);
  }

  public statement(): StatementContext[];
  public statement(i: number): StatementContext;
  public statement(i?: number): StatementContext | StatementContext[] {
    if (i === undefined) {
      return this.getRuleContexts(StatementContext);
    } else {
      return this.getRuleContext(i, StatementContext);
    }
  }

  public block_item_declaration(): Block_item_declarationContext[];
  public block_item_declaration(i: number): Block_item_declarationContext;
  public block_item_declaration(i?: number): Block_item_declarationContext | Block_item_declarationContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Block_item_declarationContext);
    } else {
      return this.getRuleContext(i, Block_item_declarationContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_par_block;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterPar_block) {
      listener.enterPar_block(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitPar_block) {
      listener.exitPar_block(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitPar_block) {
      return visitor.visitPar_block(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Block_nameContext extends ParserRuleContext {
  public CL(): TerminalNode {
    return this.getToken(VerilogParser.CL, 0);
  }

  public block_identifier(): Block_identifierContext {
    return this.getRuleContext(0, Block_identifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_block_name;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterBlock_name) {
      listener.enterBlock_name(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitBlock_name) {
      listener.exitBlock_name(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitBlock_name) {
      return visitor.visitBlock_name(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Seq_blockContext extends ParserRuleContext {
  public BEGIN(): TerminalNode {
    return this.getToken(VerilogParser.BEGIN, 0);
  }

  public END(): TerminalNode {
    return this.getToken(VerilogParser.END, 0);
  }

  public block_name(): Block_nameContext | undefined {
    return this.tryGetRuleContext(0, Block_nameContext);
  }

  public statement(): StatementContext[];
  public statement(i: number): StatementContext;
  public statement(i?: number): StatementContext | StatementContext[] {
    if (i === undefined) {
      return this.getRuleContexts(StatementContext);
    } else {
      return this.getRuleContext(i, StatementContext);
    }
  }

  public block_item_declaration(): Block_item_declarationContext[];
  public block_item_declaration(i: number): Block_item_declarationContext;
  public block_item_declaration(i?: number): Block_item_declarationContext | Block_item_declarationContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Block_item_declarationContext);
    } else {
      return this.getRuleContext(i, Block_item_declarationContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_seq_block;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterSeq_block) {
      listener.enterSeq_block(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitSeq_block) {
      listener.exitSeq_block(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitSeq_block) {
      return visitor.visitSeq_block(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class StatementContext extends ParserRuleContext {
  public blocking_assignment(): Blocking_assignmentContext | undefined {
    return this.tryGetRuleContext(0, Blocking_assignmentContext);
  }

  public SC(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.SC, 0);
  }

  public attribute_instance(): Attribute_instanceContext[];
  public attribute_instance(i: number): Attribute_instanceContext;
  public attribute_instance(i?: number): Attribute_instanceContext | Attribute_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Attribute_instanceContext);
    } else {
      return this.getRuleContext(i, Attribute_instanceContext);
    }
  }

  public case_statement(): Case_statementContext | undefined {
    return this.tryGetRuleContext(0, Case_statementContext);
  }

  public conditional_statement(): Conditional_statementContext | undefined {
    return this.tryGetRuleContext(0, Conditional_statementContext);
  }

  public disable_statement(): Disable_statementContext | undefined {
    return this.tryGetRuleContext(0, Disable_statementContext);
  }

  public event_trigger(): Event_triggerContext | undefined {
    return this.tryGetRuleContext(0, Event_triggerContext);
  }

  public loop_statement(): Loop_statementContext | undefined {
    return this.tryGetRuleContext(0, Loop_statementContext);
  }

  public nonblocking_assignment(): Nonblocking_assignmentContext | undefined {
    return this.tryGetRuleContext(0, Nonblocking_assignmentContext);
  }

  public par_block(): Par_blockContext | undefined {
    return this.tryGetRuleContext(0, Par_blockContext);
  }

  public procedural_continuous_assignments(): Procedural_continuous_assignmentsContext | undefined {
    return this.tryGetRuleContext(0, Procedural_continuous_assignmentsContext);
  }

  public procedural_timing_control_statement(): Procedural_timing_control_statementContext | undefined {
    return this.tryGetRuleContext(0, Procedural_timing_control_statementContext);
  }

  public seq_block(): Seq_blockContext | undefined {
    return this.tryGetRuleContext(0, Seq_blockContext);
  }

  public system_task_enable(): System_task_enableContext | undefined {
    return this.tryGetRuleContext(0, System_task_enableContext);
  }

  public task_enable(): Task_enableContext | undefined {
    return this.tryGetRuleContext(0, Task_enableContext);
  }

  public wait_statement(): Wait_statementContext | undefined {
    return this.tryGetRuleContext(0, Wait_statementContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_statement;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterStatement) {
      listener.enterStatement(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitStatement) {
      listener.exitStatement(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitStatement) {
      return visitor.visitStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Statement_or_nullContext extends ParserRuleContext {
  public statement(): StatementContext | undefined {
    return this.tryGetRuleContext(0, StatementContext);
  }

  public SC(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.SC, 0);
  }

  public attribute_instance(): Attribute_instanceContext[];
  public attribute_instance(i: number): Attribute_instanceContext;
  public attribute_instance(i?: number): Attribute_instanceContext | Attribute_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Attribute_instanceContext);
    } else {
      return this.getRuleContext(i, Attribute_instanceContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_statement_or_null;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterStatement_or_null) {
      listener.enterStatement_or_null(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitStatement_or_null) {
      listener.exitStatement_or_null(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitStatement_or_null) {
      return visitor.visitStatement_or_null(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Function_statementContext extends ParserRuleContext {
  public statement(): StatementContext {
    return this.getRuleContext(0, StatementContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_function_statement;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterFunction_statement) {
      listener.enterFunction_statement(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitFunction_statement) {
      listener.exitFunction_statement(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitFunction_statement) {
      return visitor.visitFunction_statement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Delay_controlContext extends ParserRuleContext {
  public HA(): TerminalNode {
    return this.getToken(VerilogParser.HA, 0);
  }

  public delay_value(): Delay_valueContext | undefined {
    return this.tryGetRuleContext(0, Delay_valueContext);
  }

  public LP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LP, 0);
  }

  public mintypmax_expression(): Mintypmax_expressionContext | undefined {
    return this.tryGetRuleContext(0, Mintypmax_expressionContext);
  }

  public RP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RP, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_delay_control;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterDelay_control) {
      listener.enterDelay_control(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitDelay_control) {
      listener.exitDelay_control(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitDelay_control) {
      return visitor.visitDelay_control(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Delay_or_event_controlContext extends ParserRuleContext {
  public delay_control(): Delay_controlContext | undefined {
    return this.tryGetRuleContext(0, Delay_controlContext);
  }

  public event_control(): Event_controlContext | undefined {
    return this.tryGetRuleContext(0, Event_controlContext);
  }

  public REPEAT(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.REPEAT, 0);
  }

  public LP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LP, 0);
  }

  public expression(): ExpressionContext | undefined {
    return this.tryGetRuleContext(0, ExpressionContext);
  }

  public RP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RP, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_delay_or_event_control;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterDelay_or_event_control) {
      listener.enterDelay_or_event_control(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitDelay_or_event_control) {
      listener.exitDelay_or_event_control(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitDelay_or_event_control) {
      return visitor.visitDelay_or_event_control(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Disable_statementContext extends ParserRuleContext {
  public DISABLE(): TerminalNode {
    return this.getToken(VerilogParser.DISABLE, 0);
  }

  public hierarchical_identifier(): Hierarchical_identifierContext {
    return this.getRuleContext(0, Hierarchical_identifierContext);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_disable_statement;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterDisable_statement) {
      listener.enterDisable_statement(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitDisable_statement) {
      listener.exitDisable_statement(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitDisable_statement) {
      return visitor.visitDisable_statement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Event_controlContext extends ParserRuleContext {
  public AT(): TerminalNode {
    return this.getToken(VerilogParser.AT, 0);
  }

  public hierarchical_identifier(): Hierarchical_identifierContext | undefined {
    return this.tryGetRuleContext(0, Hierarchical_identifierContext);
  }

  public LP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LP, 0);
  }

  public event_expression(): Event_expressionContext | undefined {
    return this.tryGetRuleContext(0, Event_expressionContext);
  }

  public RP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RP, 0);
  }

  public AS(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.AS, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_event_control;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterEvent_control) {
      listener.enterEvent_control(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitEvent_control) {
      listener.exitEvent_control(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitEvent_control) {
      return visitor.visitEvent_control(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Event_triggerContext extends ParserRuleContext {
  public MIGT(): TerminalNode {
    return this.getToken(VerilogParser.MIGT, 0);
  }

  public hierarchical_identifier(): Hierarchical_identifierContext {
    return this.getRuleContext(0, Hierarchical_identifierContext);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public bit_select(): Bit_selectContext | undefined {
    return this.tryGetRuleContext(0, Bit_selectContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_event_trigger;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterEvent_trigger) {
      listener.enterEvent_trigger(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitEvent_trigger) {
      listener.exitEvent_trigger(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitEvent_trigger) {
      return visitor.visitEvent_trigger(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Event_expressionContext extends ParserRuleContext {
  public expression(): ExpressionContext | undefined {
    return this.tryGetRuleContext(0, ExpressionContext);
  }

  public POSEDGE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.POSEDGE, 0);
  }

  public NEGEDGE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.NEGEDGE, 0);
  }

  public event_expression(): Event_expressionContext[];
  public event_expression(i: number): Event_expressionContext;
  public event_expression(i?: number): Event_expressionContext | Event_expressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Event_expressionContext);
    } else {
      return this.getRuleContext(i, Event_expressionContext);
    }
  }

  public OR(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.OR, 0);
  }

  public CO(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.CO, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_event_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterEvent_expression) {
      listener.enterEvent_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitEvent_expression) {
      listener.exitEvent_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitEvent_expression) {
      return visitor.visitEvent_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Procedural_timing_controlContext extends ParserRuleContext {
  public delay_control(): Delay_controlContext | undefined {
    return this.tryGetRuleContext(0, Delay_controlContext);
  }

  public event_control(): Event_controlContext | undefined {
    return this.tryGetRuleContext(0, Event_controlContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_procedural_timing_control;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterProcedural_timing_control) {
      listener.enterProcedural_timing_control(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitProcedural_timing_control) {
      listener.exitProcedural_timing_control(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitProcedural_timing_control) {
      return visitor.visitProcedural_timing_control(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Procedural_timing_control_statementContext extends ParserRuleContext {
  public procedural_timing_control(): Procedural_timing_controlContext {
    return this.getRuleContext(0, Procedural_timing_controlContext);
  }

  public statement_or_null(): Statement_or_nullContext {
    return this.getRuleContext(0, Statement_or_nullContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_procedural_timing_control_statement;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterProcedural_timing_control_statement) {
      listener.enterProcedural_timing_control_statement(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitProcedural_timing_control_statement) {
      listener.exitProcedural_timing_control_statement(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitProcedural_timing_control_statement) {
      return visitor.visitProcedural_timing_control_statement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Wait_statementContext extends ParserRuleContext {
  public WAIT(): TerminalNode {
    return this.getToken(VerilogParser.WAIT, 0);
  }

  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public expression(): ExpressionContext {
    return this.getRuleContext(0, ExpressionContext);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public statement_or_null(): Statement_or_nullContext {
    return this.getRuleContext(0, Statement_or_nullContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_wait_statement;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterWait_statement) {
      listener.enterWait_statement(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitWait_statement) {
      listener.exitWait_statement(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitWait_statement) {
      return visitor.visitWait_statement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Conditional_statementContext extends ParserRuleContext {
  public IF(): TerminalNode {
    return this.getToken(VerilogParser.IF, 0);
  }

  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public expression(): ExpressionContext {
    return this.getRuleContext(0, ExpressionContext);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public statement_or_null(): Statement_or_nullContext[];
  public statement_or_null(i: number): Statement_or_nullContext;
  public statement_or_null(i?: number): Statement_or_nullContext | Statement_or_nullContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Statement_or_nullContext);
    } else {
      return this.getRuleContext(i, Statement_or_nullContext);
    }
  }

  public ELSE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.ELSE, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_conditional_statement;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterConditional_statement) {
      listener.enterConditional_statement(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitConditional_statement) {
      listener.exitConditional_statement(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitConditional_statement) {
      return visitor.visitConditional_statement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Case_statementContext extends ParserRuleContext {
  public CASE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.CASE, 0);
  }

  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public expression(): ExpressionContext {
    return this.getRuleContext(0, ExpressionContext);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public ENDCASE(): TerminalNode {
    return this.getToken(VerilogParser.ENDCASE, 0);
  }

  public case_item(): Case_itemContext[];
  public case_item(i: number): Case_itemContext;
  public case_item(i?: number): Case_itemContext | Case_itemContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Case_itemContext);
    } else {
      return this.getRuleContext(i, Case_itemContext);
    }
  }

  public CASEZ(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.CASEZ, 0);
  }

  public CASEX(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.CASEX, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_case_statement;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterCase_statement) {
      listener.enterCase_statement(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitCase_statement) {
      listener.exitCase_statement(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitCase_statement) {
      return visitor.visitCase_statement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Case_itemContext extends ParserRuleContext {
  public expression(): ExpressionContext[];
  public expression(i: number): ExpressionContext;
  public expression(i?: number): ExpressionContext | ExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ExpressionContext);
    } else {
      return this.getRuleContext(i, ExpressionContext);
    }
  }

  public CL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.CL, 0);
  }

  public statement_or_null(): Statement_or_nullContext {
    return this.getRuleContext(0, Statement_or_nullContext);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  public DEFAULT(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.DEFAULT, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_case_item;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterCase_item) {
      listener.enterCase_item(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitCase_item) {
      listener.exitCase_item(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitCase_item) {
      return visitor.visitCase_item(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Loop_statementContext extends ParserRuleContext {
  public FOREVER(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.FOREVER, 0);
  }

  public statement(): StatementContext {
    return this.getRuleContext(0, StatementContext);
  }

  public REPEAT(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.REPEAT, 0);
  }

  public LP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LP, 0);
  }

  public expression(): ExpressionContext | undefined {
    return this.tryGetRuleContext(0, ExpressionContext);
  }

  public RP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RP, 0);
  }

  public WHILE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.WHILE, 0);
  }

  public FOR(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.FOR, 0);
  }

  public variable_assignment(): Variable_assignmentContext[];
  public variable_assignment(i: number): Variable_assignmentContext;
  public variable_assignment(i?: number): Variable_assignmentContext | Variable_assignmentContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Variable_assignmentContext);
    } else {
      return this.getRuleContext(i, Variable_assignmentContext);
    }
  }

  public SC(): TerminalNode[];
  public SC(i: number): TerminalNode;
  public SC(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.SC);
    } else {
      return this.getToken(VerilogParser.SC, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_loop_statement;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterLoop_statement) {
      listener.enterLoop_statement(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitLoop_statement) {
      listener.exitLoop_statement(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitLoop_statement) {
      return visitor.visitLoop_statement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class System_task_enableContext extends ParserRuleContext {
  public system_task_identifier(): System_task_identifierContext {
    return this.getRuleContext(0, System_task_identifierContext);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public sys_task_en_port_list(): Sys_task_en_port_listContext | undefined {
    return this.tryGetRuleContext(0, Sys_task_en_port_listContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_system_task_enable;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterSystem_task_enable) {
      listener.enterSystem_task_enable(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitSystem_task_enable) {
      listener.exitSystem_task_enable(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitSystem_task_enable) {
      return visitor.visitSystem_task_enable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Sys_task_en_port_listContext extends ParserRuleContext {
  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public sys_task_en_port_item(): Sys_task_en_port_itemContext[];
  public sys_task_en_port_item(i: number): Sys_task_en_port_itemContext;
  public sys_task_en_port_item(i?: number): Sys_task_en_port_itemContext | Sys_task_en_port_itemContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Sys_task_en_port_itemContext);
    } else {
      return this.getRuleContext(i, Sys_task_en_port_itemContext);
    }
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_sys_task_en_port_list;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterSys_task_en_port_list) {
      listener.enterSys_task_en_port_list(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitSys_task_en_port_list) {
      listener.exitSys_task_en_port_list(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitSys_task_en_port_list) {
      return visitor.visitSys_task_en_port_list(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Sys_task_en_port_itemContext extends ParserRuleContext {
  public expression(): ExpressionContext | undefined {
    return this.tryGetRuleContext(0, ExpressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_sys_task_en_port_item;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterSys_task_en_port_item) {
      listener.enterSys_task_en_port_item(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitSys_task_en_port_item) {
      listener.exitSys_task_en_port_item(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitSys_task_en_port_item) {
      return visitor.visitSys_task_en_port_item(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Task_enableContext extends ParserRuleContext {
  public hierarchical_identifier(): Hierarchical_identifierContext {
    return this.getRuleContext(0, Hierarchical_identifierContext);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public task_en_port_list(): Task_en_port_listContext | undefined {
    return this.tryGetRuleContext(0, Task_en_port_listContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_task_enable;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterTask_enable) {
      listener.enterTask_enable(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitTask_enable) {
      listener.exitTask_enable(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitTask_enable) {
      return visitor.visitTask_enable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Task_en_port_listContext extends ParserRuleContext {
  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public expression(): ExpressionContext[];
  public expression(i: number): ExpressionContext;
  public expression(i?: number): ExpressionContext | ExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ExpressionContext);
    } else {
      return this.getRuleContext(i, ExpressionContext);
    }
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_task_en_port_list;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterTask_en_port_list) {
      listener.enterTask_en_port_list(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitTask_en_port_list) {
      listener.exitTask_en_port_list(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitTask_en_port_list) {
      return visitor.visitTask_en_port_list(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Specify_blockContext extends ParserRuleContext {
  public SPECIFY(): TerminalNode {
    return this.getToken(VerilogParser.SPECIFY, 0);
  }

  public ENDSPECIFY(): TerminalNode {
    return this.getToken(VerilogParser.ENDSPECIFY, 0);
  }

  public specify_item(): Specify_itemContext[];
  public specify_item(i: number): Specify_itemContext;
  public specify_item(i?: number): Specify_itemContext | Specify_itemContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Specify_itemContext);
    } else {
      return this.getRuleContext(i, Specify_itemContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_specify_block;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterSpecify_block) {
      listener.enterSpecify_block(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitSpecify_block) {
      listener.exitSpecify_block(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitSpecify_block) {
      return visitor.visitSpecify_block(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Specify_itemContext extends ParserRuleContext {
  public specparam_declaration(): Specparam_declarationContext | undefined {
    return this.tryGetRuleContext(0, Specparam_declarationContext);
  }

  public pulsestyle_declaration(): Pulsestyle_declarationContext | undefined {
    return this.tryGetRuleContext(0, Pulsestyle_declarationContext);
  }

  public showcancelled_declaration(): Showcancelled_declarationContext | undefined {
    return this.tryGetRuleContext(0, Showcancelled_declarationContext);
  }

  public path_declaration(): Path_declarationContext | undefined {
    return this.tryGetRuleContext(0, Path_declarationContext);
  }

  public system_timing_check(): System_timing_checkContext | undefined {
    return this.tryGetRuleContext(0, System_timing_checkContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_specify_item;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterSpecify_item) {
      listener.enterSpecify_item(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitSpecify_item) {
      listener.exitSpecify_item(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitSpecify_item) {
      return visitor.visitSpecify_item(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Pulsestyle_declarationContext extends ParserRuleContext {
  public PULSESTYLE_ONEVENT(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.PULSESTYLE_ONEVENT, 0);
  }

  public list_of_path_outputs(): List_of_path_outputsContext {
    return this.getRuleContext(0, List_of_path_outputsContext);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public PULSESTYLE_ONDETECT(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.PULSESTYLE_ONDETECT, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_pulsestyle_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterPulsestyle_declaration) {
      listener.enterPulsestyle_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitPulsestyle_declaration) {
      listener.exitPulsestyle_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitPulsestyle_declaration) {
      return visitor.visitPulsestyle_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Showcancelled_declarationContext extends ParserRuleContext {
  public SHOWCANCELLED(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.SHOWCANCELLED, 0);
  }

  public list_of_path_outputs(): List_of_path_outputsContext {
    return this.getRuleContext(0, List_of_path_outputsContext);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public NOSHOWCANCELLED(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.NOSHOWCANCELLED, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_showcancelled_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterShowcancelled_declaration) {
      listener.enterShowcancelled_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitShowcancelled_declaration) {
      listener.exitShowcancelled_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitShowcancelled_declaration) {
      return visitor.visitShowcancelled_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Path_declarationContext extends ParserRuleContext {
  public simple_path_declaration(): Simple_path_declarationContext | undefined {
    return this.tryGetRuleContext(0, Simple_path_declarationContext);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public edge_sensitive_path_declaration(): Edge_sensitive_path_declarationContext | undefined {
    return this.tryGetRuleContext(0, Edge_sensitive_path_declarationContext);
  }

  public state_dependent_path_declaration(): State_dependent_path_declarationContext | undefined {
    return this.tryGetRuleContext(0, State_dependent_path_declarationContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_path_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterPath_declaration) {
      listener.enterPath_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitPath_declaration) {
      listener.exitPath_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitPath_declaration) {
      return visitor.visitPath_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Simple_path_declarationContext extends ParserRuleContext {
  public parallel_path_description(): Parallel_path_descriptionContext | undefined {
    return this.tryGetRuleContext(0, Parallel_path_descriptionContext);
  }

  public EQ(): TerminalNode {
    return this.getToken(VerilogParser.EQ, 0);
  }

  public path_delay_value(): Path_delay_valueContext {
    return this.getRuleContext(0, Path_delay_valueContext);
  }

  public full_path_description(): Full_path_descriptionContext | undefined {
    return this.tryGetRuleContext(0, Full_path_descriptionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_simple_path_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterSimple_path_declaration) {
      listener.enterSimple_path_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitSimple_path_declaration) {
      listener.exitSimple_path_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitSimple_path_declaration) {
      return visitor.visitSimple_path_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Parallel_path_descriptionContext extends ParserRuleContext {
  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public specify_input_terminal_descriptor(): Specify_input_terminal_descriptorContext {
    return this.getRuleContext(0, Specify_input_terminal_descriptorContext);
  }

  public EQGT(): TerminalNode {
    return this.getToken(VerilogParser.EQGT, 0);
  }

  public specify_output_terminal_descriptor(): Specify_output_terminal_descriptorContext {
    return this.getRuleContext(0, Specify_output_terminal_descriptorContext);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public polarity_operator(): Polarity_operatorContext | undefined {
    return this.tryGetRuleContext(0, Polarity_operatorContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_parallel_path_description;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterParallel_path_description) {
      listener.enterParallel_path_description(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitParallel_path_description) {
      listener.exitParallel_path_description(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitParallel_path_description) {
      return visitor.visitParallel_path_description(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Full_path_descriptionContext extends ParserRuleContext {
  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public list_of_path_inputs(): List_of_path_inputsContext {
    return this.getRuleContext(0, List_of_path_inputsContext);
  }

  public ASGT(): TerminalNode {
    return this.getToken(VerilogParser.ASGT, 0);
  }

  public list_of_path_outputs(): List_of_path_outputsContext {
    return this.getRuleContext(0, List_of_path_outputsContext);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public polarity_operator(): Polarity_operatorContext | undefined {
    return this.tryGetRuleContext(0, Polarity_operatorContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_full_path_description;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterFull_path_description) {
      listener.enterFull_path_description(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitFull_path_description) {
      listener.exitFull_path_description(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitFull_path_description) {
      return visitor.visitFull_path_description(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class List_of_path_inputsContext extends ParserRuleContext {
  public specify_input_terminal_descriptor(): Specify_input_terminal_descriptorContext[];
  public specify_input_terminal_descriptor(i: number): Specify_input_terminal_descriptorContext;
  public specify_input_terminal_descriptor(i?: number): Specify_input_terminal_descriptorContext | Specify_input_terminal_descriptorContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Specify_input_terminal_descriptorContext);
    } else {
      return this.getRuleContext(i, Specify_input_terminal_descriptorContext);
    }
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_list_of_path_inputs;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterList_of_path_inputs) {
      listener.enterList_of_path_inputs(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitList_of_path_inputs) {
      listener.exitList_of_path_inputs(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitList_of_path_inputs) {
      return visitor.visitList_of_path_inputs(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class List_of_path_outputsContext extends ParserRuleContext {
  public specify_output_terminal_descriptor(): Specify_output_terminal_descriptorContext[];
  public specify_output_terminal_descriptor(i: number): Specify_output_terminal_descriptorContext;
  public specify_output_terminal_descriptor(i?: number): Specify_output_terminal_descriptorContext | Specify_output_terminal_descriptorContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Specify_output_terminal_descriptorContext);
    } else {
      return this.getRuleContext(i, Specify_output_terminal_descriptorContext);
    }
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_list_of_path_outputs;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterList_of_path_outputs) {
      listener.enterList_of_path_outputs(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitList_of_path_outputs) {
      listener.exitList_of_path_outputs(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitList_of_path_outputs) {
      return visitor.visitList_of_path_outputs(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Specify_input_terminal_descriptorContext extends ParserRuleContext {
  public input_identifier(): Input_identifierContext {
    return this.getRuleContext(0, Input_identifierContext);
  }

  public LB(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LB, 0);
  }

  public constant_range_expression(): Constant_range_expressionContext | undefined {
    return this.tryGetRuleContext(0, Constant_range_expressionContext);
  }

  public RB(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RB, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_specify_input_terminal_descriptor;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterSpecify_input_terminal_descriptor) {
      listener.enterSpecify_input_terminal_descriptor(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitSpecify_input_terminal_descriptor) {
      listener.exitSpecify_input_terminal_descriptor(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitSpecify_input_terminal_descriptor) {
      return visitor.visitSpecify_input_terminal_descriptor(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Specify_output_terminal_descriptorContext extends ParserRuleContext {
  public output_identifier(): Output_identifierContext {
    return this.getRuleContext(0, Output_identifierContext);
  }

  public LB(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LB, 0);
  }

  public constant_range_expression(): Constant_range_expressionContext | undefined {
    return this.tryGetRuleContext(0, Constant_range_expressionContext);
  }

  public RB(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RB, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_specify_output_terminal_descriptor;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterSpecify_output_terminal_descriptor) {
      listener.enterSpecify_output_terminal_descriptor(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitSpecify_output_terminal_descriptor) {
      listener.exitSpecify_output_terminal_descriptor(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitSpecify_output_terminal_descriptor) {
      return visitor.visitSpecify_output_terminal_descriptor(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Input_identifierContext extends ParserRuleContext {
  public port_identifier(): Port_identifierContext {
    return this.getRuleContext(0, Port_identifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_input_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterInput_identifier) {
      listener.enterInput_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitInput_identifier) {
      listener.exitInput_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitInput_identifier) {
      return visitor.visitInput_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Output_identifierContext extends ParserRuleContext {
  public port_identifier(): Port_identifierContext {
    return this.getRuleContext(0, Port_identifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_output_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterOutput_identifier) {
      listener.enterOutput_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitOutput_identifier) {
      listener.exitOutput_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitOutput_identifier) {
      return visitor.visitOutput_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Path_delay_valueContext extends ParserRuleContext {
  public list_of_path_delay_expressions(): List_of_path_delay_expressionsContext {
    return this.getRuleContext(0, List_of_path_delay_expressionsContext);
  }

  public LP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LP, 0);
  }

  public RP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RP, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_path_delay_value;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterPath_delay_value) {
      listener.enterPath_delay_value(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitPath_delay_value) {
      listener.exitPath_delay_value(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitPath_delay_value) {
      return visitor.visitPath_delay_value(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class List_of_path_delay_expressionsContext extends ParserRuleContext {
  public t_path_delay_expression(): T_path_delay_expressionContext | undefined {
    return this.tryGetRuleContext(0, T_path_delay_expressionContext);
  }

  public trise_path_delay_expression(): Trise_path_delay_expressionContext | undefined {
    return this.tryGetRuleContext(0, Trise_path_delay_expressionContext);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  public tfall_path_delay_expression(): Tfall_path_delay_expressionContext | undefined {
    return this.tryGetRuleContext(0, Tfall_path_delay_expressionContext);
  }

  public tz_path_delay_expression(): Tz_path_delay_expressionContext | undefined {
    return this.tryGetRuleContext(0, Tz_path_delay_expressionContext);
  }

  public t01_path_delay_expression(): T01_path_delay_expressionContext | undefined {
    return this.tryGetRuleContext(0, T01_path_delay_expressionContext);
  }

  public t10_path_delay_expression(): T10_path_delay_expressionContext | undefined {
    return this.tryGetRuleContext(0, T10_path_delay_expressionContext);
  }

  public t0z_path_delay_expression(): T0z_path_delay_expressionContext | undefined {
    return this.tryGetRuleContext(0, T0z_path_delay_expressionContext);
  }

  public tz1_path_delay_expression(): Tz1_path_delay_expressionContext | undefined {
    return this.tryGetRuleContext(0, Tz1_path_delay_expressionContext);
  }

  public t1z_path_delay_expression(): T1z_path_delay_expressionContext | undefined {
    return this.tryGetRuleContext(0, T1z_path_delay_expressionContext);
  }

  public tz0_path_delay_expression(): Tz0_path_delay_expressionContext | undefined {
    return this.tryGetRuleContext(0, Tz0_path_delay_expressionContext);
  }

  public t0x_path_delay_expression(): T0x_path_delay_expressionContext | undefined {
    return this.tryGetRuleContext(0, T0x_path_delay_expressionContext);
  }

  public tx1_path_delay_expression(): Tx1_path_delay_expressionContext | undefined {
    return this.tryGetRuleContext(0, Tx1_path_delay_expressionContext);
  }

  public t1x_path_delay_expression(): T1x_path_delay_expressionContext | undefined {
    return this.tryGetRuleContext(0, T1x_path_delay_expressionContext);
  }

  public tx0_path_delay_expression(): Tx0_path_delay_expressionContext | undefined {
    return this.tryGetRuleContext(0, Tx0_path_delay_expressionContext);
  }

  public txz_path_delay_expression(): Txz_path_delay_expressionContext | undefined {
    return this.tryGetRuleContext(0, Txz_path_delay_expressionContext);
  }

  public tzx_path_delay_expression(): Tzx_path_delay_expressionContext | undefined {
    return this.tryGetRuleContext(0, Tzx_path_delay_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_list_of_path_delay_expressions;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterList_of_path_delay_expressions) {
      listener.enterList_of_path_delay_expressions(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitList_of_path_delay_expressions) {
      listener.exitList_of_path_delay_expressions(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitList_of_path_delay_expressions) {
      return visitor.visitList_of_path_delay_expressions(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class T_path_delay_expressionContext extends ParserRuleContext {
  public path_delay_expression(): Path_delay_expressionContext {
    return this.getRuleContext(0, Path_delay_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_t_path_delay_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterT_path_delay_expression) {
      listener.enterT_path_delay_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitT_path_delay_expression) {
      listener.exitT_path_delay_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitT_path_delay_expression) {
      return visitor.visitT_path_delay_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Trise_path_delay_expressionContext extends ParserRuleContext {
  public path_delay_expression(): Path_delay_expressionContext {
    return this.getRuleContext(0, Path_delay_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_trise_path_delay_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterTrise_path_delay_expression) {
      listener.enterTrise_path_delay_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitTrise_path_delay_expression) {
      listener.exitTrise_path_delay_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitTrise_path_delay_expression) {
      return visitor.visitTrise_path_delay_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Tfall_path_delay_expressionContext extends ParserRuleContext {
  public path_delay_expression(): Path_delay_expressionContext {
    return this.getRuleContext(0, Path_delay_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_tfall_path_delay_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterTfall_path_delay_expression) {
      listener.enterTfall_path_delay_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitTfall_path_delay_expression) {
      listener.exitTfall_path_delay_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitTfall_path_delay_expression) {
      return visitor.visitTfall_path_delay_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Tz_path_delay_expressionContext extends ParserRuleContext {
  public path_delay_expression(): Path_delay_expressionContext {
    return this.getRuleContext(0, Path_delay_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_tz_path_delay_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterTz_path_delay_expression) {
      listener.enterTz_path_delay_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitTz_path_delay_expression) {
      listener.exitTz_path_delay_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitTz_path_delay_expression) {
      return visitor.visitTz_path_delay_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class T01_path_delay_expressionContext extends ParserRuleContext {
  public path_delay_expression(): Path_delay_expressionContext {
    return this.getRuleContext(0, Path_delay_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_t01_path_delay_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterT01_path_delay_expression) {
      listener.enterT01_path_delay_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitT01_path_delay_expression) {
      listener.exitT01_path_delay_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitT01_path_delay_expression) {
      return visitor.visitT01_path_delay_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class T10_path_delay_expressionContext extends ParserRuleContext {
  public path_delay_expression(): Path_delay_expressionContext {
    return this.getRuleContext(0, Path_delay_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_t10_path_delay_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterT10_path_delay_expression) {
      listener.enterT10_path_delay_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitT10_path_delay_expression) {
      listener.exitT10_path_delay_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitT10_path_delay_expression) {
      return visitor.visitT10_path_delay_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class T0z_path_delay_expressionContext extends ParserRuleContext {
  public path_delay_expression(): Path_delay_expressionContext {
    return this.getRuleContext(0, Path_delay_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_t0z_path_delay_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterT0z_path_delay_expression) {
      listener.enterT0z_path_delay_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitT0z_path_delay_expression) {
      listener.exitT0z_path_delay_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitT0z_path_delay_expression) {
      return visitor.visitT0z_path_delay_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Tz1_path_delay_expressionContext extends ParserRuleContext {
  public path_delay_expression(): Path_delay_expressionContext {
    return this.getRuleContext(0, Path_delay_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_tz1_path_delay_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterTz1_path_delay_expression) {
      listener.enterTz1_path_delay_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitTz1_path_delay_expression) {
      listener.exitTz1_path_delay_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitTz1_path_delay_expression) {
      return visitor.visitTz1_path_delay_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class T1z_path_delay_expressionContext extends ParserRuleContext {
  public path_delay_expression(): Path_delay_expressionContext {
    return this.getRuleContext(0, Path_delay_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_t1z_path_delay_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterT1z_path_delay_expression) {
      listener.enterT1z_path_delay_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitT1z_path_delay_expression) {
      listener.exitT1z_path_delay_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitT1z_path_delay_expression) {
      return visitor.visitT1z_path_delay_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Tz0_path_delay_expressionContext extends ParserRuleContext {
  public path_delay_expression(): Path_delay_expressionContext {
    return this.getRuleContext(0, Path_delay_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_tz0_path_delay_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterTz0_path_delay_expression) {
      listener.enterTz0_path_delay_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitTz0_path_delay_expression) {
      listener.exitTz0_path_delay_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitTz0_path_delay_expression) {
      return visitor.visitTz0_path_delay_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class T0x_path_delay_expressionContext extends ParserRuleContext {
  public path_delay_expression(): Path_delay_expressionContext {
    return this.getRuleContext(0, Path_delay_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_t0x_path_delay_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterT0x_path_delay_expression) {
      listener.enterT0x_path_delay_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitT0x_path_delay_expression) {
      listener.exitT0x_path_delay_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitT0x_path_delay_expression) {
      return visitor.visitT0x_path_delay_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Tx1_path_delay_expressionContext extends ParserRuleContext {
  public path_delay_expression(): Path_delay_expressionContext {
    return this.getRuleContext(0, Path_delay_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_tx1_path_delay_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterTx1_path_delay_expression) {
      listener.enterTx1_path_delay_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitTx1_path_delay_expression) {
      listener.exitTx1_path_delay_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitTx1_path_delay_expression) {
      return visitor.visitTx1_path_delay_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class T1x_path_delay_expressionContext extends ParserRuleContext {
  public path_delay_expression(): Path_delay_expressionContext {
    return this.getRuleContext(0, Path_delay_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_t1x_path_delay_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterT1x_path_delay_expression) {
      listener.enterT1x_path_delay_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitT1x_path_delay_expression) {
      listener.exitT1x_path_delay_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitT1x_path_delay_expression) {
      return visitor.visitT1x_path_delay_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Tx0_path_delay_expressionContext extends ParserRuleContext {
  public path_delay_expression(): Path_delay_expressionContext {
    return this.getRuleContext(0, Path_delay_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_tx0_path_delay_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterTx0_path_delay_expression) {
      listener.enterTx0_path_delay_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitTx0_path_delay_expression) {
      listener.exitTx0_path_delay_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitTx0_path_delay_expression) {
      return visitor.visitTx0_path_delay_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Txz_path_delay_expressionContext extends ParserRuleContext {
  public path_delay_expression(): Path_delay_expressionContext {
    return this.getRuleContext(0, Path_delay_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_txz_path_delay_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterTxz_path_delay_expression) {
      listener.enterTxz_path_delay_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitTxz_path_delay_expression) {
      listener.exitTxz_path_delay_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitTxz_path_delay_expression) {
      return visitor.visitTxz_path_delay_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Tzx_path_delay_expressionContext extends ParserRuleContext {
  public path_delay_expression(): Path_delay_expressionContext {
    return this.getRuleContext(0, Path_delay_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_tzx_path_delay_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterTzx_path_delay_expression) {
      listener.enterTzx_path_delay_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitTzx_path_delay_expression) {
      listener.exitTzx_path_delay_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitTzx_path_delay_expression) {
      return visitor.visitTzx_path_delay_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Path_delay_expressionContext extends ParserRuleContext {
  public constant_mintypmax_expression(): Constant_mintypmax_expressionContext {
    return this.getRuleContext(0, Constant_mintypmax_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_path_delay_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterPath_delay_expression) {
      listener.enterPath_delay_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitPath_delay_expression) {
      listener.exitPath_delay_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitPath_delay_expression) {
      return visitor.visitPath_delay_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Edge_sensitive_path_declarationContext extends ParserRuleContext {
  public parallel_edge_sensitive_path_description(): Parallel_edge_sensitive_path_descriptionContext | undefined {
    return this.tryGetRuleContext(0, Parallel_edge_sensitive_path_descriptionContext);
  }

  public EQ(): TerminalNode {
    return this.getToken(VerilogParser.EQ, 0);
  }

  public path_delay_value(): Path_delay_valueContext {
    return this.getRuleContext(0, Path_delay_valueContext);
  }

  public full_edge_sensitive_path_description(): Full_edge_sensitive_path_descriptionContext | undefined {
    return this.tryGetRuleContext(0, Full_edge_sensitive_path_descriptionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_edge_sensitive_path_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterEdge_sensitive_path_declaration) {
      listener.enterEdge_sensitive_path_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitEdge_sensitive_path_declaration) {
      listener.exitEdge_sensitive_path_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitEdge_sensitive_path_declaration) {
      return visitor.visitEdge_sensitive_path_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Parallel_edge_sensitive_path_descriptionContext extends ParserRuleContext {
  public LP(): TerminalNode[];
  public LP(i: number): TerminalNode;
  public LP(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.LP);
    } else {
      return this.getToken(VerilogParser.LP, i);
    }
  }

  public specify_input_terminal_descriptor(): Specify_input_terminal_descriptorContext {
    return this.getRuleContext(0, Specify_input_terminal_descriptorContext);
  }

  public EQGT(): TerminalNode {
    return this.getToken(VerilogParser.EQGT, 0);
  }

  public specify_output_terminal_descriptor(): Specify_output_terminal_descriptorContext {
    return this.getRuleContext(0, Specify_output_terminal_descriptorContext);
  }

  public CL(): TerminalNode {
    return this.getToken(VerilogParser.CL, 0);
  }

  public data_source_expression(): Data_source_expressionContext {
    return this.getRuleContext(0, Data_source_expressionContext);
  }

  public RP(): TerminalNode[];
  public RP(i: number): TerminalNode;
  public RP(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.RP);
    } else {
      return this.getToken(VerilogParser.RP, i);
    }
  }

  public edge_identifier(): Edge_identifierContext | undefined {
    return this.tryGetRuleContext(0, Edge_identifierContext);
  }

  public polarity_operator(): Polarity_operatorContext | undefined {
    return this.tryGetRuleContext(0, Polarity_operatorContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_parallel_edge_sensitive_path_description;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterParallel_edge_sensitive_path_description) {
      listener.enterParallel_edge_sensitive_path_description(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitParallel_edge_sensitive_path_description) {
      listener.exitParallel_edge_sensitive_path_description(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitParallel_edge_sensitive_path_description) {
      return visitor.visitParallel_edge_sensitive_path_description(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Full_edge_sensitive_path_descriptionContext extends ParserRuleContext {
  public LP(): TerminalNode[];
  public LP(i: number): TerminalNode;
  public LP(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.LP);
    } else {
      return this.getToken(VerilogParser.LP, i);
    }
  }

  public list_of_path_inputs(): List_of_path_inputsContext {
    return this.getRuleContext(0, List_of_path_inputsContext);
  }

  public ASGT(): TerminalNode {
    return this.getToken(VerilogParser.ASGT, 0);
  }

  public list_of_path_outputs(): List_of_path_outputsContext {
    return this.getRuleContext(0, List_of_path_outputsContext);
  }

  public CL(): TerminalNode {
    return this.getToken(VerilogParser.CL, 0);
  }

  public data_source_expression(): Data_source_expressionContext {
    return this.getRuleContext(0, Data_source_expressionContext);
  }

  public RP(): TerminalNode[];
  public RP(i: number): TerminalNode;
  public RP(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.RP);
    } else {
      return this.getToken(VerilogParser.RP, i);
    }
  }

  public edge_identifier(): Edge_identifierContext | undefined {
    return this.tryGetRuleContext(0, Edge_identifierContext);
  }

  public polarity_operator(): Polarity_operatorContext | undefined {
    return this.tryGetRuleContext(0, Polarity_operatorContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_full_edge_sensitive_path_description;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterFull_edge_sensitive_path_description) {
      listener.enterFull_edge_sensitive_path_description(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitFull_edge_sensitive_path_description) {
      listener.exitFull_edge_sensitive_path_description(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitFull_edge_sensitive_path_description) {
      return visitor.visitFull_edge_sensitive_path_description(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Data_source_expressionContext extends ParserRuleContext {
  public expression(): ExpressionContext {
    return this.getRuleContext(0, ExpressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_data_source_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterData_source_expression) {
      listener.enterData_source_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitData_source_expression) {
      listener.exitData_source_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitData_source_expression) {
      return visitor.visitData_source_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Edge_identifierContext extends ParserRuleContext {
  public POSEDGE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.POSEDGE, 0);
  }

  public NEGEDGE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.NEGEDGE, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_edge_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterEdge_identifier) {
      listener.enterEdge_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitEdge_identifier) {
      listener.exitEdge_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitEdge_identifier) {
      return visitor.visitEdge_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class State_dependent_path_declarationContext extends ParserRuleContext {
  public IF(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.IF, 0);
  }

  public LP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LP, 0);
  }

  public module_path_expression(): Module_path_expressionContext | undefined {
    return this.tryGetRuleContext(0, Module_path_expressionContext);
  }

  public RP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RP, 0);
  }

  public simple_path_declaration(): Simple_path_declarationContext | undefined {
    return this.tryGetRuleContext(0, Simple_path_declarationContext);
  }

  public edge_sensitive_path_declaration(): Edge_sensitive_path_declarationContext | undefined {
    return this.tryGetRuleContext(0, Edge_sensitive_path_declarationContext);
  }

  public IFNONE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.IFNONE, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_state_dependent_path_declaration;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterState_dependent_path_declaration) {
      listener.enterState_dependent_path_declaration(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitState_dependent_path_declaration) {
      listener.exitState_dependent_path_declaration(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitState_dependent_path_declaration) {
      return visitor.visitState_dependent_path_declaration(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Polarity_operatorContext extends ParserRuleContext {
  public PL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.PL, 0);
  }

  public MI(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.MI, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_polarity_operator;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterPolarity_operator) {
      listener.enterPolarity_operator(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitPolarity_operator) {
      listener.exitPolarity_operator(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitPolarity_operator) {
      return visitor.visitPolarity_operator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class System_timing_checkContext extends ParserRuleContext {
  public setup_timing_check(): Setup_timing_checkContext | undefined {
    return this.tryGetRuleContext(0, Setup_timing_checkContext);
  }

  public hold_timing_check(): Hold_timing_checkContext | undefined {
    return this.tryGetRuleContext(0, Hold_timing_checkContext);
  }

  public setuphold_timing_check(): Setuphold_timing_checkContext | undefined {
    return this.tryGetRuleContext(0, Setuphold_timing_checkContext);
  }

  public recovery_timing_check(): Recovery_timing_checkContext | undefined {
    return this.tryGetRuleContext(0, Recovery_timing_checkContext);
  }

  public removal_timing_check(): Removal_timing_checkContext | undefined {
    return this.tryGetRuleContext(0, Removal_timing_checkContext);
  }

  public recrem_timing_check(): Recrem_timing_checkContext | undefined {
    return this.tryGetRuleContext(0, Recrem_timing_checkContext);
  }

  public skew_timing_check(): Skew_timing_checkContext | undefined {
    return this.tryGetRuleContext(0, Skew_timing_checkContext);
  }

  public timeskew_timing_check(): Timeskew_timing_checkContext | undefined {
    return this.tryGetRuleContext(0, Timeskew_timing_checkContext);
  }

  public fullskew_timing_check(): Fullskew_timing_checkContext | undefined {
    return this.tryGetRuleContext(0, Fullskew_timing_checkContext);
  }

  public period_timing_check(): Period_timing_checkContext | undefined {
    return this.tryGetRuleContext(0, Period_timing_checkContext);
  }

  public width_timing_check(): Width_timing_checkContext | undefined {
    return this.tryGetRuleContext(0, Width_timing_checkContext);
  }

  public nochange_timing_check(): Nochange_timing_checkContext | undefined {
    return this.tryGetRuleContext(0, Nochange_timing_checkContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_system_timing_check;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterSystem_timing_check) {
      listener.enterSystem_timing_check(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitSystem_timing_check) {
      listener.exitSystem_timing_check(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitSystem_timing_check) {
      return visitor.visitSystem_timing_check(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Setup_timing_checkContext extends ParserRuleContext {
  public DLSETUP(): TerminalNode {
    return this.getToken(VerilogParser.DLSETUP, 0);
  }

  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public data_event(): Data_eventContext {
    return this.getRuleContext(0, Data_eventContext);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  public reference_event(): Reference_eventContext {
    return this.getRuleContext(0, Reference_eventContext);
  }

  public timing_check_limit(): Timing_check_limitContext {
    return this.getRuleContext(0, Timing_check_limitContext);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public notifier_opt(): Notifier_optContext | undefined {
    return this.tryGetRuleContext(0, Notifier_optContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_setup_timing_check;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterSetup_timing_check) {
      listener.enterSetup_timing_check(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitSetup_timing_check) {
      listener.exitSetup_timing_check(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitSetup_timing_check) {
      return visitor.visitSetup_timing_check(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Notifier_optContext extends ParserRuleContext {
  public CO(): TerminalNode {
    return this.getToken(VerilogParser.CO, 0);
  }

  public notifier(): NotifierContext | undefined {
    return this.tryGetRuleContext(0, NotifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_notifier_opt;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterNotifier_opt) {
      listener.enterNotifier_opt(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitNotifier_opt) {
      listener.exitNotifier_opt(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitNotifier_opt) {
      return visitor.visitNotifier_opt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Hold_timing_checkContext extends ParserRuleContext {
  public DLHOLD(): TerminalNode {
    return this.getToken(VerilogParser.DLHOLD, 0);
  }

  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public reference_event(): Reference_eventContext {
    return this.getRuleContext(0, Reference_eventContext);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  public data_event(): Data_eventContext {
    return this.getRuleContext(0, Data_eventContext);
  }

  public timing_check_limit(): Timing_check_limitContext {
    return this.getRuleContext(0, Timing_check_limitContext);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public notifier_opt(): Notifier_optContext | undefined {
    return this.tryGetRuleContext(0, Notifier_optContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_hold_timing_check;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterHold_timing_check) {
      listener.enterHold_timing_check(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitHold_timing_check) {
      listener.exitHold_timing_check(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitHold_timing_check) {
      return visitor.visitHold_timing_check(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Setuphold_timing_checkContext extends ParserRuleContext {
  public DLSETUPHOLD(): TerminalNode {
    return this.getToken(VerilogParser.DLSETUPHOLD, 0);
  }

  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public reference_event(): Reference_eventContext {
    return this.getRuleContext(0, Reference_eventContext);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  public data_event(): Data_eventContext {
    return this.getRuleContext(0, Data_eventContext);
  }

  public timing_check_limit(): Timing_check_limitContext[];
  public timing_check_limit(i: number): Timing_check_limitContext;
  public timing_check_limit(i?: number): Timing_check_limitContext | Timing_check_limitContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Timing_check_limitContext);
    } else {
      return this.getRuleContext(i, Timing_check_limitContext);
    }
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public timing_check_opt(): Timing_check_optContext | undefined {
    return this.tryGetRuleContext(0, Timing_check_optContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_setuphold_timing_check;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterSetuphold_timing_check) {
      listener.enterSetuphold_timing_check(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitSetuphold_timing_check) {
      listener.exitSetuphold_timing_check(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitSetuphold_timing_check) {
      return visitor.visitSetuphold_timing_check(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Timing_check_optContext extends ParserRuleContext {
  public CO(): TerminalNode {
    return this.getToken(VerilogParser.CO, 0);
  }

  public notifier(): NotifierContext | undefined {
    return this.tryGetRuleContext(0, NotifierContext);
  }

  public stamptime_cond_opt(): Stamptime_cond_optContext | undefined {
    return this.tryGetRuleContext(0, Stamptime_cond_optContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_timing_check_opt;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterTiming_check_opt) {
      listener.enterTiming_check_opt(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitTiming_check_opt) {
      listener.exitTiming_check_opt(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitTiming_check_opt) {
      return visitor.visitTiming_check_opt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Stamptime_cond_optContext extends ParserRuleContext {
  public CO(): TerminalNode {
    return this.getToken(VerilogParser.CO, 0);
  }

  public stamptime_condition(): Stamptime_conditionContext | undefined {
    return this.tryGetRuleContext(0, Stamptime_conditionContext);
  }

  public checktime_cond_opt(): Checktime_cond_optContext | undefined {
    return this.tryGetRuleContext(0, Checktime_cond_optContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_stamptime_cond_opt;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterStamptime_cond_opt) {
      listener.enterStamptime_cond_opt(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitStamptime_cond_opt) {
      listener.exitStamptime_cond_opt(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitStamptime_cond_opt) {
      return visitor.visitStamptime_cond_opt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Checktime_cond_optContext extends ParserRuleContext {
  public CO(): TerminalNode {
    return this.getToken(VerilogParser.CO, 0);
  }

  public checktime_condition(): Checktime_conditionContext | undefined {
    return this.tryGetRuleContext(0, Checktime_conditionContext);
  }

  public delayed_ref_opt(): Delayed_ref_optContext | undefined {
    return this.tryGetRuleContext(0, Delayed_ref_optContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_checktime_cond_opt;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterChecktime_cond_opt) {
      listener.enterChecktime_cond_opt(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitChecktime_cond_opt) {
      listener.exitChecktime_cond_opt(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitChecktime_cond_opt) {
      return visitor.visitChecktime_cond_opt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Delayed_ref_optContext extends ParserRuleContext {
  public CO(): TerminalNode {
    return this.getToken(VerilogParser.CO, 0);
  }

  public delayed_reference(): Delayed_referenceContext | undefined {
    return this.tryGetRuleContext(0, Delayed_referenceContext);
  }

  public delayed_data_opt(): Delayed_data_optContext | undefined {
    return this.tryGetRuleContext(0, Delayed_data_optContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_delayed_ref_opt;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterDelayed_ref_opt) {
      listener.enterDelayed_ref_opt(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitDelayed_ref_opt) {
      listener.exitDelayed_ref_opt(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitDelayed_ref_opt) {
      return visitor.visitDelayed_ref_opt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Delayed_data_optContext extends ParserRuleContext {
  public CO(): TerminalNode {
    return this.getToken(VerilogParser.CO, 0);
  }

  public delayed_data(): Delayed_dataContext | undefined {
    return this.tryGetRuleContext(0, Delayed_dataContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_delayed_data_opt;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterDelayed_data_opt) {
      listener.enterDelayed_data_opt(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitDelayed_data_opt) {
      listener.exitDelayed_data_opt(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitDelayed_data_opt) {
      return visitor.visitDelayed_data_opt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Recovery_timing_checkContext extends ParserRuleContext {
  public DLRECOVERY(): TerminalNode {
    return this.getToken(VerilogParser.DLRECOVERY, 0);
  }

  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public reference_event(): Reference_eventContext {
    return this.getRuleContext(0, Reference_eventContext);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  public data_event(): Data_eventContext {
    return this.getRuleContext(0, Data_eventContext);
  }

  public timing_check_limit(): Timing_check_limitContext {
    return this.getRuleContext(0, Timing_check_limitContext);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public notifier_opt(): Notifier_optContext | undefined {
    return this.tryGetRuleContext(0, Notifier_optContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_recovery_timing_check;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterRecovery_timing_check) {
      listener.enterRecovery_timing_check(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitRecovery_timing_check) {
      listener.exitRecovery_timing_check(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitRecovery_timing_check) {
      return visitor.visitRecovery_timing_check(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Removal_timing_checkContext extends ParserRuleContext {
  public DLREMOVAL(): TerminalNode {
    return this.getToken(VerilogParser.DLREMOVAL, 0);
  }

  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public reference_event(): Reference_eventContext {
    return this.getRuleContext(0, Reference_eventContext);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  public data_event(): Data_eventContext {
    return this.getRuleContext(0, Data_eventContext);
  }

  public timing_check_limit(): Timing_check_limitContext {
    return this.getRuleContext(0, Timing_check_limitContext);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public notifier_opt(): Notifier_optContext | undefined {
    return this.tryGetRuleContext(0, Notifier_optContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_removal_timing_check;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterRemoval_timing_check) {
      listener.enterRemoval_timing_check(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitRemoval_timing_check) {
      listener.exitRemoval_timing_check(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitRemoval_timing_check) {
      return visitor.visitRemoval_timing_check(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Recrem_timing_checkContext extends ParserRuleContext {
  public DLRECREM(): TerminalNode {
    return this.getToken(VerilogParser.DLRECREM, 0);
  }

  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public reference_event(): Reference_eventContext {
    return this.getRuleContext(0, Reference_eventContext);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  public data_event(): Data_eventContext {
    return this.getRuleContext(0, Data_eventContext);
  }

  public timing_check_limit(): Timing_check_limitContext[];
  public timing_check_limit(i: number): Timing_check_limitContext;
  public timing_check_limit(i?: number): Timing_check_limitContext | Timing_check_limitContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Timing_check_limitContext);
    } else {
      return this.getRuleContext(i, Timing_check_limitContext);
    }
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public timing_check_opt(): Timing_check_optContext | undefined {
    return this.tryGetRuleContext(0, Timing_check_optContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_recrem_timing_check;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterRecrem_timing_check) {
      listener.enterRecrem_timing_check(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitRecrem_timing_check) {
      listener.exitRecrem_timing_check(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitRecrem_timing_check) {
      return visitor.visitRecrem_timing_check(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Skew_timing_checkContext extends ParserRuleContext {
  public DLSKEW(): TerminalNode {
    return this.getToken(VerilogParser.DLSKEW, 0);
  }

  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public reference_event(): Reference_eventContext {
    return this.getRuleContext(0, Reference_eventContext);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  public data_event(): Data_eventContext {
    return this.getRuleContext(0, Data_eventContext);
  }

  public timing_check_limit(): Timing_check_limitContext {
    return this.getRuleContext(0, Timing_check_limitContext);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public notifier_opt(): Notifier_optContext | undefined {
    return this.tryGetRuleContext(0, Notifier_optContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_skew_timing_check;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterSkew_timing_check) {
      listener.enterSkew_timing_check(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitSkew_timing_check) {
      listener.exitSkew_timing_check(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitSkew_timing_check) {
      return visitor.visitSkew_timing_check(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Timeskew_timing_checkContext extends ParserRuleContext {
  public DLTIMESKEW(): TerminalNode {
    return this.getToken(VerilogParser.DLTIMESKEW, 0);
  }

  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public reference_event(): Reference_eventContext {
    return this.getRuleContext(0, Reference_eventContext);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  public data_event(): Data_eventContext {
    return this.getRuleContext(0, Data_eventContext);
  }

  public timing_check_limit(): Timing_check_limitContext {
    return this.getRuleContext(0, Timing_check_limitContext);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public skew_timing_check_opt(): Skew_timing_check_optContext | undefined {
    return this.tryGetRuleContext(0, Skew_timing_check_optContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_timeskew_timing_check;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterTimeskew_timing_check) {
      listener.enterTimeskew_timing_check(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitTimeskew_timing_check) {
      listener.exitTimeskew_timing_check(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitTimeskew_timing_check) {
      return visitor.visitTimeskew_timing_check(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Skew_timing_check_optContext extends ParserRuleContext {
  public CO(): TerminalNode {
    return this.getToken(VerilogParser.CO, 0);
  }

  public notifier(): NotifierContext | undefined {
    return this.tryGetRuleContext(0, NotifierContext);
  }

  public event_based_flag_opt(): Event_based_flag_optContext | undefined {
    return this.tryGetRuleContext(0, Event_based_flag_optContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_skew_timing_check_opt;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterSkew_timing_check_opt) {
      listener.enterSkew_timing_check_opt(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitSkew_timing_check_opt) {
      listener.exitSkew_timing_check_opt(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitSkew_timing_check_opt) {
      return visitor.visitSkew_timing_check_opt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Event_based_flag_optContext extends ParserRuleContext {
  public CO(): TerminalNode {
    return this.getToken(VerilogParser.CO, 0);
  }

  public event_based_flag(): Event_based_flagContext | undefined {
    return this.tryGetRuleContext(0, Event_based_flagContext);
  }

  public remain_active_flag_opt(): Remain_active_flag_optContext | undefined {
    return this.tryGetRuleContext(0, Remain_active_flag_optContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_event_based_flag_opt;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterEvent_based_flag_opt) {
      listener.enterEvent_based_flag_opt(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitEvent_based_flag_opt) {
      listener.exitEvent_based_flag_opt(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitEvent_based_flag_opt) {
      return visitor.visitEvent_based_flag_opt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Remain_active_flag_optContext extends ParserRuleContext {
  public CO(): TerminalNode {
    return this.getToken(VerilogParser.CO, 0);
  }

  public remain_active_flag(): Remain_active_flagContext | undefined {
    return this.tryGetRuleContext(0, Remain_active_flagContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_remain_active_flag_opt;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterRemain_active_flag_opt) {
      listener.enterRemain_active_flag_opt(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitRemain_active_flag_opt) {
      listener.exitRemain_active_flag_opt(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitRemain_active_flag_opt) {
      return visitor.visitRemain_active_flag_opt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Fullskew_timing_checkContext extends ParserRuleContext {
  public DLFULLSKEW(): TerminalNode {
    return this.getToken(VerilogParser.DLFULLSKEW, 0);
  }

  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public reference_event(): Reference_eventContext {
    return this.getRuleContext(0, Reference_eventContext);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  public data_event(): Data_eventContext {
    return this.getRuleContext(0, Data_eventContext);
  }

  public timing_check_limit(): Timing_check_limitContext[];
  public timing_check_limit(i: number): Timing_check_limitContext;
  public timing_check_limit(i?: number): Timing_check_limitContext | Timing_check_limitContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Timing_check_limitContext);
    } else {
      return this.getRuleContext(i, Timing_check_limitContext);
    }
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public skew_timing_check_opt(): Skew_timing_check_optContext | undefined {
    return this.tryGetRuleContext(0, Skew_timing_check_optContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_fullskew_timing_check;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterFullskew_timing_check) {
      listener.enterFullskew_timing_check(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitFullskew_timing_check) {
      listener.exitFullskew_timing_check(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitFullskew_timing_check) {
      return visitor.visitFullskew_timing_check(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Period_timing_checkContext extends ParserRuleContext {
  public DLPERIOD(): TerminalNode {
    return this.getToken(VerilogParser.DLPERIOD, 0);
  }

  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public controlled_reference_event(): Controlled_reference_eventContext {
    return this.getRuleContext(0, Controlled_reference_eventContext);
  }

  public CO(): TerminalNode {
    return this.getToken(VerilogParser.CO, 0);
  }

  public timing_check_limit(): Timing_check_limitContext {
    return this.getRuleContext(0, Timing_check_limitContext);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public notifier_opt(): Notifier_optContext | undefined {
    return this.tryGetRuleContext(0, Notifier_optContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_period_timing_check;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterPeriod_timing_check) {
      listener.enterPeriod_timing_check(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitPeriod_timing_check) {
      listener.exitPeriod_timing_check(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitPeriod_timing_check) {
      return visitor.visitPeriod_timing_check(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Width_timing_checkContext extends ParserRuleContext {
  public DLWIDTH(): TerminalNode {
    return this.getToken(VerilogParser.DLWIDTH, 0);
  }

  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public controlled_reference_event(): Controlled_reference_eventContext {
    return this.getRuleContext(0, Controlled_reference_eventContext);
  }

  public CO(): TerminalNode {
    return this.getToken(VerilogParser.CO, 0);
  }

  public timing_check_limit(): Timing_check_limitContext {
    return this.getRuleContext(0, Timing_check_limitContext);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public threshold_opt(): Threshold_optContext | undefined {
    return this.tryGetRuleContext(0, Threshold_optContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_width_timing_check;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterWidth_timing_check) {
      listener.enterWidth_timing_check(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitWidth_timing_check) {
      listener.exitWidth_timing_check(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitWidth_timing_check) {
      return visitor.visitWidth_timing_check(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Threshold_optContext extends ParserRuleContext {
  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  public threshold(): ThresholdContext {
    return this.getRuleContext(0, ThresholdContext);
  }

  public notifier(): NotifierContext | undefined {
    return this.tryGetRuleContext(0, NotifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_threshold_opt;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterThreshold_opt) {
      listener.enterThreshold_opt(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitThreshold_opt) {
      listener.exitThreshold_opt(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitThreshold_opt) {
      return visitor.visitThreshold_opt(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Nochange_timing_checkContext extends ParserRuleContext {
  public DLNOCHANGE(): TerminalNode {
    return this.getToken(VerilogParser.DLNOCHANGE, 0);
  }

  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public reference_event(): Reference_eventContext {
    return this.getRuleContext(0, Reference_eventContext);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  public data_event(): Data_eventContext {
    return this.getRuleContext(0, Data_eventContext);
  }

  public start_edge_offset(): Start_edge_offsetContext {
    return this.getRuleContext(0, Start_edge_offsetContext);
  }

  public end_edge_offset(): End_edge_offsetContext {
    return this.getRuleContext(0, End_edge_offsetContext);
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public SC(): TerminalNode {
    return this.getToken(VerilogParser.SC, 0);
  }

  public notifier_opt(): Notifier_optContext | undefined {
    return this.tryGetRuleContext(0, Notifier_optContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_nochange_timing_check;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterNochange_timing_check) {
      listener.enterNochange_timing_check(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitNochange_timing_check) {
      listener.exitNochange_timing_check(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitNochange_timing_check) {
      return visitor.visitNochange_timing_check(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Checktime_conditionContext extends ParserRuleContext {
  public mintypmax_expression(): Mintypmax_expressionContext {
    return this.getRuleContext(0, Mintypmax_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_checktime_condition;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterChecktime_condition) {
      listener.enterChecktime_condition(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitChecktime_condition) {
      listener.exitChecktime_condition(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitChecktime_condition) {
      return visitor.visitChecktime_condition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Controlled_reference_eventContext extends ParserRuleContext {
  public controlled_timing_check_event(): Controlled_timing_check_eventContext {
    return this.getRuleContext(0, Controlled_timing_check_eventContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_controlled_reference_event;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterControlled_reference_event) {
      listener.enterControlled_reference_event(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitControlled_reference_event) {
      listener.exitControlled_reference_event(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitControlled_reference_event) {
      return visitor.visitControlled_reference_event(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Data_eventContext extends ParserRuleContext {
  public timing_check_event(): Timing_check_eventContext {
    return this.getRuleContext(0, Timing_check_eventContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_data_event;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterData_event) {
      listener.enterData_event(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitData_event) {
      listener.exitData_event(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitData_event) {
      return visitor.visitData_event(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Delayed_dataContext extends ParserRuleContext {
  public terminal_identifier(): Terminal_identifierContext {
    return this.getRuleContext(0, Terminal_identifierContext);
  }

  public LB(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LB, 0);
  }

  public constant_mintypmax_expression(): Constant_mintypmax_expressionContext | undefined {
    return this.tryGetRuleContext(0, Constant_mintypmax_expressionContext);
  }

  public RB(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RB, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_delayed_data;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterDelayed_data) {
      listener.enterDelayed_data(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitDelayed_data) {
      listener.exitDelayed_data(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitDelayed_data) {
      return visitor.visitDelayed_data(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Delayed_referenceContext extends ParserRuleContext {
  public terminal_identifier(): Terminal_identifierContext {
    return this.getRuleContext(0, Terminal_identifierContext);
  }

  public LB(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LB, 0);
  }

  public constant_mintypmax_expression(): Constant_mintypmax_expressionContext | undefined {
    return this.tryGetRuleContext(0, Constant_mintypmax_expressionContext);
  }

  public RB(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RB, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_delayed_reference;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterDelayed_reference) {
      listener.enterDelayed_reference(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitDelayed_reference) {
      listener.exitDelayed_reference(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitDelayed_reference) {
      return visitor.visitDelayed_reference(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class End_edge_offsetContext extends ParserRuleContext {
  public mintypmax_expression(): Mintypmax_expressionContext {
    return this.getRuleContext(0, Mintypmax_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_end_edge_offset;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterEnd_edge_offset) {
      listener.enterEnd_edge_offset(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitEnd_edge_offset) {
      listener.exitEnd_edge_offset(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitEnd_edge_offset) {
      return visitor.visitEnd_edge_offset(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Event_based_flagContext extends ParserRuleContext {
  public constant_expression(): Constant_expressionContext {
    return this.getRuleContext(0, Constant_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_event_based_flag;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterEvent_based_flag) {
      listener.enterEvent_based_flag(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitEvent_based_flag) {
      listener.exitEvent_based_flag(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitEvent_based_flag) {
      return visitor.visitEvent_based_flag(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class NotifierContext extends ParserRuleContext {
  public variable_identifier(): Variable_identifierContext {
    return this.getRuleContext(0, Variable_identifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_notifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterNotifier) {
      listener.enterNotifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitNotifier) {
      listener.exitNotifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitNotifier) {
      return visitor.visitNotifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Reference_eventContext extends ParserRuleContext {
  public timing_check_event(): Timing_check_eventContext {
    return this.getRuleContext(0, Timing_check_eventContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_reference_event;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterReference_event) {
      listener.enterReference_event(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitReference_event) {
      listener.exitReference_event(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitReference_event) {
      return visitor.visitReference_event(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Remain_active_flagContext extends ParserRuleContext {
  public constant_expression(): Constant_expressionContext {
    return this.getRuleContext(0, Constant_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_remain_active_flag;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterRemain_active_flag) {
      listener.enterRemain_active_flag(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitRemain_active_flag) {
      listener.exitRemain_active_flag(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitRemain_active_flag) {
      return visitor.visitRemain_active_flag(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Stamptime_conditionContext extends ParserRuleContext {
  public mintypmax_expression(): Mintypmax_expressionContext {
    return this.getRuleContext(0, Mintypmax_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_stamptime_condition;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterStamptime_condition) {
      listener.enterStamptime_condition(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitStamptime_condition) {
      listener.exitStamptime_condition(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitStamptime_condition) {
      return visitor.visitStamptime_condition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Start_edge_offsetContext extends ParserRuleContext {
  public mintypmax_expression(): Mintypmax_expressionContext {
    return this.getRuleContext(0, Mintypmax_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_start_edge_offset;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterStart_edge_offset) {
      listener.enterStart_edge_offset(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitStart_edge_offset) {
      listener.exitStart_edge_offset(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitStart_edge_offset) {
      return visitor.visitStart_edge_offset(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class ThresholdContext extends ParserRuleContext {
  public constant_expression(): Constant_expressionContext {
    return this.getRuleContext(0, Constant_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_threshold;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterThreshold) {
      listener.enterThreshold(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitThreshold) {
      listener.exitThreshold(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitThreshold) {
      return visitor.visitThreshold(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Timing_check_limitContext extends ParserRuleContext {
  public expression(): ExpressionContext {
    return this.getRuleContext(0, ExpressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_timing_check_limit;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterTiming_check_limit) {
      listener.enterTiming_check_limit(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitTiming_check_limit) {
      listener.exitTiming_check_limit(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitTiming_check_limit) {
      return visitor.visitTiming_check_limit(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Timing_check_eventContext extends ParserRuleContext {
  public specify_terminal_descriptor(): Specify_terminal_descriptorContext {
    return this.getRuleContext(0, Specify_terminal_descriptorContext);
  }

  public timing_check_event_control(): Timing_check_event_controlContext | undefined {
    return this.tryGetRuleContext(0, Timing_check_event_controlContext);
  }

  public AMAMAM(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.AMAMAM, 0);
  }

  public timing_check_condition(): Timing_check_conditionContext | undefined {
    return this.tryGetRuleContext(0, Timing_check_conditionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_timing_check_event;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterTiming_check_event) {
      listener.enterTiming_check_event(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitTiming_check_event) {
      listener.exitTiming_check_event(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitTiming_check_event) {
      return visitor.visitTiming_check_event(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Controlled_timing_check_eventContext extends ParserRuleContext {
  public timing_check_event_control(): Timing_check_event_controlContext {
    return this.getRuleContext(0, Timing_check_event_controlContext);
  }

  public specify_terminal_descriptor(): Specify_terminal_descriptorContext {
    return this.getRuleContext(0, Specify_terminal_descriptorContext);
  }

  public AMAMAM(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.AMAMAM, 0);
  }

  public timing_check_condition(): Timing_check_conditionContext | undefined {
    return this.tryGetRuleContext(0, Timing_check_conditionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_controlled_timing_check_event;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterControlled_timing_check_event) {
      listener.enterControlled_timing_check_event(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitControlled_timing_check_event) {
      listener.exitControlled_timing_check_event(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitControlled_timing_check_event) {
      return visitor.visitControlled_timing_check_event(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Timing_check_event_controlContext extends ParserRuleContext {
  public POSEDGE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.POSEDGE, 0);
  }

  public NEGEDGE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.NEGEDGE, 0);
  }

  public edge_control_specifier(): Edge_control_specifierContext | undefined {
    return this.tryGetRuleContext(0, Edge_control_specifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_timing_check_event_control;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterTiming_check_event_control) {
      listener.enterTiming_check_event_control(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitTiming_check_event_control) {
      listener.exitTiming_check_event_control(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitTiming_check_event_control) {
      return visitor.visitTiming_check_event_control(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Specify_terminal_descriptorContext extends ParserRuleContext {
  public specify_input_terminal_descriptor(): Specify_input_terminal_descriptorContext | undefined {
    return this.tryGetRuleContext(0, Specify_input_terminal_descriptorContext);
  }

  public specify_output_terminal_descriptor(): Specify_output_terminal_descriptorContext | undefined {
    return this.tryGetRuleContext(0, Specify_output_terminal_descriptorContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_specify_terminal_descriptor;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterSpecify_terminal_descriptor) {
      listener.enterSpecify_terminal_descriptor(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitSpecify_terminal_descriptor) {
      listener.exitSpecify_terminal_descriptor(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitSpecify_terminal_descriptor) {
      return visitor.visitSpecify_terminal_descriptor(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Edge_control_specifierContext extends ParserRuleContext {
  public EDGE(): TerminalNode {
    return this.getToken(VerilogParser.EDGE, 0);
  }

  public LB(): TerminalNode {
    return this.getToken(VerilogParser.LB, 0);
  }

  public edge_descriptor(): Edge_descriptorContext[];
  public edge_descriptor(i: number): Edge_descriptorContext;
  public edge_descriptor(i?: number): Edge_descriptorContext | Edge_descriptorContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Edge_descriptorContext);
    } else {
      return this.getRuleContext(i, Edge_descriptorContext);
    }
  }

  public RB(): TerminalNode {
    return this.getToken(VerilogParser.RB, 0);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_edge_control_specifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterEdge_control_specifier) {
      listener.enterEdge_control_specifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitEdge_control_specifier) {
      listener.exitEdge_control_specifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitEdge_control_specifier) {
      return visitor.visitEdge_control_specifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Edge_descriptorContext extends ParserRuleContext {
  public EDGE_DESCRIPTOR(): TerminalNode {
    return this.getToken(VerilogParser.EDGE_DESCRIPTOR, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_edge_descriptor;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterEdge_descriptor) {
      listener.enterEdge_descriptor(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitEdge_descriptor) {
      listener.exitEdge_descriptor(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitEdge_descriptor) {
      return visitor.visitEdge_descriptor(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Timing_check_conditionContext extends ParserRuleContext {
  public scalar_timing_check_condition(): Scalar_timing_check_conditionContext {
    return this.getRuleContext(0, Scalar_timing_check_conditionContext);
  }

  public LP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LP, 0);
  }

  public RP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RP, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_timing_check_condition;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterTiming_check_condition) {
      listener.enterTiming_check_condition(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitTiming_check_condition) {
      listener.exitTiming_check_condition(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitTiming_check_condition) {
      return visitor.visitTiming_check_condition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Scalar_timing_check_conditionContext extends ParserRuleContext {
  public expression(): ExpressionContext {
    return this.getRuleContext(0, ExpressionContext);
  }

  public TI(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.TI, 0);
  }

  public EQEQ(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.EQEQ, 0);
  }

  public scalar_constant(): Scalar_constantContext | undefined {
    return this.tryGetRuleContext(0, Scalar_constantContext);
  }

  public EQEQEQ(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.EQEQEQ, 0);
  }

  public EMEQ(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.EMEQ, 0);
  }

  public EMEQEQ(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.EMEQEQ, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_scalar_timing_check_condition;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterScalar_timing_check_condition) {
      listener.enterScalar_timing_check_condition(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitScalar_timing_check_condition) {
      listener.exitScalar_timing_check_condition(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitScalar_timing_check_condition) {
      return visitor.visitScalar_timing_check_condition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Scalar_constantContext extends ParserRuleContext {
  public binary_number(): Binary_numberContext | undefined {
    return this.tryGetRuleContext(0, Binary_numberContext);
  }

  public unsigned_number(): Unsigned_numberContext | undefined {
    return this.tryGetRuleContext(0, Unsigned_numberContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_scalar_constant;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterScalar_constant) {
      listener.enterScalar_constant(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitScalar_constant) {
      listener.exitScalar_constant(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitScalar_constant) {
      return visitor.visitScalar_constant(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class ConcatenationContext extends ParserRuleContext {
  public LC(): TerminalNode {
    return this.getToken(VerilogParser.LC, 0);
  }

  public expression(): ExpressionContext[];
  public expression(i: number): ExpressionContext;
  public expression(i?: number): ExpressionContext | ExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ExpressionContext);
    } else {
      return this.getRuleContext(i, ExpressionContext);
    }
  }

  public RC(): TerminalNode {
    return this.getToken(VerilogParser.RC, 0);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_concatenation;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterConcatenation) {
      listener.enterConcatenation(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitConcatenation) {
      listener.exitConcatenation(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitConcatenation) {
      return visitor.visitConcatenation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Constant_concatenationContext extends ParserRuleContext {
  public LC(): TerminalNode {
    return this.getToken(VerilogParser.LC, 0);
  }

  public constant_expression(): Constant_expressionContext[];
  public constant_expression(i: number): Constant_expressionContext;
  public constant_expression(i?: number): Constant_expressionContext | Constant_expressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Constant_expressionContext);
    } else {
      return this.getRuleContext(i, Constant_expressionContext);
    }
  }

  public RC(): TerminalNode {
    return this.getToken(VerilogParser.RC, 0);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_constant_concatenation;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterConstant_concatenation) {
      listener.enterConstant_concatenation(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitConstant_concatenation) {
      listener.exitConstant_concatenation(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitConstant_concatenation) {
      return visitor.visitConstant_concatenation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Constant_multiple_concatenationContext extends ParserRuleContext {
  public LC(): TerminalNode {
    return this.getToken(VerilogParser.LC, 0);
  }

  public constant_expression(): Constant_expressionContext {
    return this.getRuleContext(0, Constant_expressionContext);
  }

  public constant_concatenation(): Constant_concatenationContext {
    return this.getRuleContext(0, Constant_concatenationContext);
  }

  public RC(): TerminalNode {
    return this.getToken(VerilogParser.RC, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_constant_multiple_concatenation;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterConstant_multiple_concatenation) {
      listener.enterConstant_multiple_concatenation(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitConstant_multiple_concatenation) {
      listener.exitConstant_multiple_concatenation(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitConstant_multiple_concatenation) {
      return visitor.visitConstant_multiple_concatenation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Module_path_concatenationContext extends ParserRuleContext {
  public LC(): TerminalNode {
    return this.getToken(VerilogParser.LC, 0);
  }

  public module_path_expression(): Module_path_expressionContext[];
  public module_path_expression(i: number): Module_path_expressionContext;
  public module_path_expression(i?: number): Module_path_expressionContext | Module_path_expressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Module_path_expressionContext);
    } else {
      return this.getRuleContext(i, Module_path_expressionContext);
    }
  }

  public RC(): TerminalNode {
    return this.getToken(VerilogParser.RC, 0);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_module_path_concatenation;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterModule_path_concatenation) {
      listener.enterModule_path_concatenation(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitModule_path_concatenation) {
      listener.exitModule_path_concatenation(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitModule_path_concatenation) {
      return visitor.visitModule_path_concatenation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Module_path_multiple_concatenationContext extends ParserRuleContext {
  public LC(): TerminalNode {
    return this.getToken(VerilogParser.LC, 0);
  }

  public constant_expression(): Constant_expressionContext {
    return this.getRuleContext(0, Constant_expressionContext);
  }

  public module_path_concatenation(): Module_path_concatenationContext {
    return this.getRuleContext(0, Module_path_concatenationContext);
  }

  public RC(): TerminalNode {
    return this.getToken(VerilogParser.RC, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_module_path_multiple_concatenation;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterModule_path_multiple_concatenation) {
      listener.enterModule_path_multiple_concatenation(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitModule_path_multiple_concatenation) {
      listener.exitModule_path_multiple_concatenation(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitModule_path_multiple_concatenation) {
      return visitor.visitModule_path_multiple_concatenation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Multiple_concatenationContext extends ParserRuleContext {
  public LC(): TerminalNode {
    return this.getToken(VerilogParser.LC, 0);
  }

  public constant_expression(): Constant_expressionContext {
    return this.getRuleContext(0, Constant_expressionContext);
  }

  public concatenation(): ConcatenationContext {
    return this.getRuleContext(0, ConcatenationContext);
  }

  public RC(): TerminalNode {
    return this.getToken(VerilogParser.RC, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_multiple_concatenation;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterMultiple_concatenation) {
      listener.enterMultiple_concatenation(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitMultiple_concatenation) {
      listener.exitMultiple_concatenation(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitMultiple_concatenation) {
      return visitor.visitMultiple_concatenation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Constant_function_callContext extends ParserRuleContext {
  public function_identifier(): Function_identifierContext {
    return this.getRuleContext(0, Function_identifierContext);
  }

  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public constant_expression(): Constant_expressionContext[];
  public constant_expression(i: number): Constant_expressionContext;
  public constant_expression(i?: number): Constant_expressionContext | Constant_expressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Constant_expressionContext);
    } else {
      return this.getRuleContext(i, Constant_expressionContext);
    }
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public attribute_instance(): Attribute_instanceContext[];
  public attribute_instance(i: number): Attribute_instanceContext;
  public attribute_instance(i?: number): Attribute_instanceContext | Attribute_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Attribute_instanceContext);
    } else {
      return this.getRuleContext(i, Attribute_instanceContext);
    }
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_constant_function_call;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterConstant_function_call) {
      listener.enterConstant_function_call(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitConstant_function_call) {
      listener.exitConstant_function_call(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitConstant_function_call) {
      return visitor.visitConstant_function_call(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Constant_system_function_callContext extends ParserRuleContext {
  public system_function_identifier(): System_function_identifierContext {
    return this.getRuleContext(0, System_function_identifierContext);
  }

  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public constant_expression(): Constant_expressionContext[];
  public constant_expression(i: number): Constant_expressionContext;
  public constant_expression(i?: number): Constant_expressionContext | Constant_expressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Constant_expressionContext);
    } else {
      return this.getRuleContext(i, Constant_expressionContext);
    }
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_constant_system_function_call;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterConstant_system_function_call) {
      listener.enterConstant_system_function_call(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitConstant_system_function_call) {
      listener.exitConstant_system_function_call(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitConstant_system_function_call) {
      return visitor.visitConstant_system_function_call(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Function_callContext extends ParserRuleContext {
  public hierarchical_identifier(): Hierarchical_identifierContext {
    return this.getRuleContext(0, Hierarchical_identifierContext);
  }

  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public expression(): ExpressionContext[];
  public expression(i: number): ExpressionContext;
  public expression(i?: number): ExpressionContext | ExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ExpressionContext);
    } else {
      return this.getRuleContext(i, ExpressionContext);
    }
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public attribute_instance(): Attribute_instanceContext[];
  public attribute_instance(i: number): Attribute_instanceContext;
  public attribute_instance(i?: number): Attribute_instanceContext | Attribute_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Attribute_instanceContext);
    } else {
      return this.getRuleContext(i, Attribute_instanceContext);
    }
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_function_call;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterFunction_call) {
      listener.enterFunction_call(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitFunction_call) {
      listener.exitFunction_call(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitFunction_call) {
      return visitor.visitFunction_call(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class System_function_callContext extends ParserRuleContext {
  public system_function_identifier(): System_function_identifierContext {
    return this.getRuleContext(0, System_function_identifierContext);
  }

  public sys_func_call_port_list(): Sys_func_call_port_listContext | undefined {
    return this.tryGetRuleContext(0, Sys_func_call_port_listContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_system_function_call;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterSystem_function_call) {
      listener.enterSystem_function_call(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitSystem_function_call) {
      listener.exitSystem_function_call(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitSystem_function_call) {
      return visitor.visitSystem_function_call(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Sys_func_call_port_listContext extends ParserRuleContext {
  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public expression(): ExpressionContext[];
  public expression(i: number): ExpressionContext;
  public expression(i?: number): ExpressionContext | ExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ExpressionContext);
    } else {
      return this.getRuleContext(i, ExpressionContext);
    }
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_sys_func_call_port_list;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterSys_func_call_port_list) {
      listener.enterSys_func_call_port_list(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitSys_func_call_port_list) {
      listener.exitSys_func_call_port_list(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitSys_func_call_port_list) {
      return visitor.visitSys_func_call_port_list(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Base_expressionContext extends ParserRuleContext {
  public expression(): ExpressionContext {
    return this.getRuleContext(0, ExpressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_base_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterBase_expression) {
      listener.enterBase_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitBase_expression) {
      listener.exitBase_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitBase_expression) {
      return visitor.visitBase_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Constant_base_expressionContext extends ParserRuleContext {
  public constant_expression(): Constant_expressionContext {
    return this.getRuleContext(0, Constant_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_constant_base_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterConstant_base_expression) {
      listener.enterConstant_base_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitConstant_base_expression) {
      listener.exitConstant_base_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitConstant_base_expression) {
      return visitor.visitConstant_base_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Constant_expressionContext extends ParserRuleContext {
  public constant_primary(): Constant_primaryContext | undefined {
    return this.tryGetRuleContext(0, Constant_primaryContext);
  }

  public unary_operator(): Unary_operatorContext | undefined {
    return this.tryGetRuleContext(0, Unary_operatorContext);
  }

  public attribute_instance(): Attribute_instanceContext[];
  public attribute_instance(i: number): Attribute_instanceContext;
  public attribute_instance(i?: number): Attribute_instanceContext | Attribute_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Attribute_instanceContext);
    } else {
      return this.getRuleContext(i, Attribute_instanceContext);
    }
  }

  public constant_expression(): Constant_expressionContext[];
  public constant_expression(i: number): Constant_expressionContext;
  public constant_expression(i?: number): Constant_expressionContext | Constant_expressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Constant_expressionContext);
    } else {
      return this.getRuleContext(i, Constant_expressionContext);
    }
  }

  public ASAS(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.ASAS, 0);
  }

  public AS(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.AS, 0);
  }

  public SL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.SL, 0);
  }

  public MO(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.MO, 0);
  }

  public PL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.PL, 0);
  }

  public MI(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.MI, 0);
  }

  public GTGT(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.GTGT, 0);
  }

  public LTLT(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LTLT, 0);
  }

  public GTGTGT(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.GTGTGT, 0);
  }

  public LTLTLT(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LTLTLT, 0);
  }

  public LT(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LT, 0);
  }

  public LTEQ(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LTEQ, 0);
  }

  public GT(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.GT, 0);
  }

  public GTEQ(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.GTEQ, 0);
  }

  public EQEQ(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.EQEQ, 0);
  }

  public EMEQ(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.EMEQ, 0);
  }

  public EQEQEQ(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.EQEQEQ, 0);
  }

  public EMEQEQ(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.EMEQEQ, 0);
  }

  public AM(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.AM, 0);
  }

  public CA(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.CA, 0);
  }

  public CATI(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.CATI, 0);
  }

  public TICA(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.TICA, 0);
  }

  public VL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.VL, 0);
  }

  public AMAM(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.AMAM, 0);
  }

  public VLVL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.VLVL, 0);
  }

  public QM(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.QM, 0);
  }

  public CL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.CL, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_constant_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterConstant_expression) {
      listener.enterConstant_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitConstant_expression) {
      listener.exitConstant_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitConstant_expression) {
      return visitor.visitConstant_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Constant_mintypmax_expressionContext extends ParserRuleContext {
  public constant_expression(): Constant_expressionContext[];
  public constant_expression(i: number): Constant_expressionContext;
  public constant_expression(i?: number): Constant_expressionContext | Constant_expressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Constant_expressionContext);
    } else {
      return this.getRuleContext(i, Constant_expressionContext);
    }
  }

  public CL(): TerminalNode[];
  public CL(i: number): TerminalNode;
  public CL(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CL);
    } else {
      return this.getToken(VerilogParser.CL, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_constant_mintypmax_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterConstant_mintypmax_expression) {
      listener.enterConstant_mintypmax_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitConstant_mintypmax_expression) {
      listener.exitConstant_mintypmax_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitConstant_mintypmax_expression) {
      return visitor.visitConstant_mintypmax_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Constant_range_expressionContext extends ParserRuleContext {
  public constant_expression(): Constant_expressionContext | undefined {
    return this.tryGetRuleContext(0, Constant_expressionContext);
  }

  public msb_constant_expression(): Msb_constant_expressionContext | undefined {
    return this.tryGetRuleContext(0, Msb_constant_expressionContext);
  }

  public CL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.CL, 0);
  }

  public lsb_constant_expression(): Lsb_constant_expressionContext | undefined {
    return this.tryGetRuleContext(0, Lsb_constant_expressionContext);
  }

  public constant_base_expression(): Constant_base_expressionContext | undefined {
    return this.tryGetRuleContext(0, Constant_base_expressionContext);
  }

  public PLCL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.PLCL, 0);
  }

  public width_constant_expression(): Width_constant_expressionContext | undefined {
    return this.tryGetRuleContext(0, Width_constant_expressionContext);
  }

  public MICL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.MICL, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_constant_range_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterConstant_range_expression) {
      listener.enterConstant_range_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitConstant_range_expression) {
      listener.exitConstant_range_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitConstant_range_expression) {
      return visitor.visitConstant_range_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Dimension_constant_expressionContext extends ParserRuleContext {
  public constant_expression(): Constant_expressionContext {
    return this.getRuleContext(0, Constant_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_dimension_constant_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterDimension_constant_expression) {
      listener.enterDimension_constant_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitDimension_constant_expression) {
      listener.exitDimension_constant_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitDimension_constant_expression) {
      return visitor.visitDimension_constant_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class ExpressionContext extends ParserRuleContext {
  public primary(): PrimaryContext | undefined {
    return this.tryGetRuleContext(0, PrimaryContext);
  }

  public unary_operator(): Unary_operatorContext | undefined {
    return this.tryGetRuleContext(0, Unary_operatorContext);
  }

  public attribute_instance(): Attribute_instanceContext[];
  public attribute_instance(i: number): Attribute_instanceContext;
  public attribute_instance(i?: number): Attribute_instanceContext | Attribute_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Attribute_instanceContext);
    } else {
      return this.getRuleContext(i, Attribute_instanceContext);
    }
  }

  public expression(): ExpressionContext[];
  public expression(i: number): ExpressionContext;
  public expression(i?: number): ExpressionContext | ExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ExpressionContext);
    } else {
      return this.getRuleContext(i, ExpressionContext);
    }
  }

  public ASAS(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.ASAS, 0);
  }

  public AS(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.AS, 0);
  }

  public SL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.SL, 0);
  }

  public MO(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.MO, 0);
  }

  public PL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.PL, 0);
  }

  public MI(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.MI, 0);
  }

  public GTGT(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.GTGT, 0);
  }

  public LTLT(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LTLT, 0);
  }

  public GTGTGT(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.GTGTGT, 0);
  }

  public LTLTLT(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LTLTLT, 0);
  }

  public LT(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LT, 0);
  }

  public LTEQ(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LTEQ, 0);
  }

  public GT(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.GT, 0);
  }

  public GTEQ(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.GTEQ, 0);
  }

  public EQEQ(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.EQEQ, 0);
  }

  public EMEQ(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.EMEQ, 0);
  }

  public EQEQEQ(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.EQEQEQ, 0);
  }

  public EMEQEQ(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.EMEQEQ, 0);
  }

  public AM(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.AM, 0);
  }

  public CA(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.CA, 0);
  }

  public CATI(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.CATI, 0);
  }

  public TICA(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.TICA, 0);
  }

  public VL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.VL, 0);
  }

  public AMAM(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.AMAM, 0);
  }

  public VLVL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.VLVL, 0);
  }

  public QM(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.QM, 0);
  }

  public CL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.CL, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterExpression) {
      listener.enterExpression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitExpression) {
      listener.exitExpression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitExpression) {
      return visitor.visitExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Lsb_constant_expressionContext extends ParserRuleContext {
  public constant_expression(): Constant_expressionContext {
    return this.getRuleContext(0, Constant_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_lsb_constant_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterLsb_constant_expression) {
      listener.enterLsb_constant_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitLsb_constant_expression) {
      listener.exitLsb_constant_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitLsb_constant_expression) {
      return visitor.visitLsb_constant_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Mintypmax_expressionContext extends ParserRuleContext {
  public expression(): ExpressionContext[];
  public expression(i: number): ExpressionContext;
  public expression(i?: number): ExpressionContext | ExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ExpressionContext);
    } else {
      return this.getRuleContext(i, ExpressionContext);
    }
  }

  public CL(): TerminalNode[];
  public CL(i: number): TerminalNode;
  public CL(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CL);
    } else {
      return this.getToken(VerilogParser.CL, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_mintypmax_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterMintypmax_expression) {
      listener.enterMintypmax_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitMintypmax_expression) {
      listener.exitMintypmax_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitMintypmax_expression) {
      return visitor.visitMintypmax_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Module_path_expressionContext extends ParserRuleContext {
  public module_path_primary(): Module_path_primaryContext | undefined {
    return this.tryGetRuleContext(0, Module_path_primaryContext);
  }

  public unary_module_path_operator(): Unary_module_path_operatorContext | undefined {
    return this.tryGetRuleContext(0, Unary_module_path_operatorContext);
  }

  public attribute_instance(): Attribute_instanceContext[];
  public attribute_instance(i: number): Attribute_instanceContext;
  public attribute_instance(i?: number): Attribute_instanceContext | Attribute_instanceContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Attribute_instanceContext);
    } else {
      return this.getRuleContext(i, Attribute_instanceContext);
    }
  }

  public module_path_expression(): Module_path_expressionContext[];
  public module_path_expression(i: number): Module_path_expressionContext;
  public module_path_expression(i?: number): Module_path_expressionContext | Module_path_expressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Module_path_expressionContext);
    } else {
      return this.getRuleContext(i, Module_path_expressionContext);
    }
  }

  public EQEQ(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.EQEQ, 0);
  }

  public EMEQ(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.EMEQ, 0);
  }

  public AM(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.AM, 0);
  }

  public CA(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.CA, 0);
  }

  public CATI(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.CATI, 0);
  }

  public TICA(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.TICA, 0);
  }

  public VL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.VL, 0);
  }

  public AMAM(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.AMAM, 0);
  }

  public VLVL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.VLVL, 0);
  }

  public QM(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.QM, 0);
  }

  public CL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.CL, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_module_path_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterModule_path_expression) {
      listener.enterModule_path_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitModule_path_expression) {
      listener.exitModule_path_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitModule_path_expression) {
      return visitor.visitModule_path_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Module_path_mintypmax_expressionContext extends ParserRuleContext {
  public module_path_expression(): Module_path_expressionContext[];
  public module_path_expression(i: number): Module_path_expressionContext;
  public module_path_expression(i?: number): Module_path_expressionContext | Module_path_expressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Module_path_expressionContext);
    } else {
      return this.getRuleContext(i, Module_path_expressionContext);
    }
  }

  public CL(): TerminalNode[];
  public CL(i: number): TerminalNode;
  public CL(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CL);
    } else {
      return this.getToken(VerilogParser.CL, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_module_path_mintypmax_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterModule_path_mintypmax_expression) {
      listener.enterModule_path_mintypmax_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitModule_path_mintypmax_expression) {
      listener.exitModule_path_mintypmax_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitModule_path_mintypmax_expression) {
      return visitor.visitModule_path_mintypmax_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Msb_constant_expressionContext extends ParserRuleContext {
  public constant_expression(): Constant_expressionContext {
    return this.getRuleContext(0, Constant_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_msb_constant_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterMsb_constant_expression) {
      listener.enterMsb_constant_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitMsb_constant_expression) {
      listener.exitMsb_constant_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitMsb_constant_expression) {
      return visitor.visitMsb_constant_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Range_expressionContext extends ParserRuleContext {
  public expression(): ExpressionContext | undefined {
    return this.tryGetRuleContext(0, ExpressionContext);
  }

  public msb_constant_expression(): Msb_constant_expressionContext | undefined {
    return this.tryGetRuleContext(0, Msb_constant_expressionContext);
  }

  public CL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.CL, 0);
  }

  public lsb_constant_expression(): Lsb_constant_expressionContext | undefined {
    return this.tryGetRuleContext(0, Lsb_constant_expressionContext);
  }

  public base_expression(): Base_expressionContext | undefined {
    return this.tryGetRuleContext(0, Base_expressionContext);
  }

  public PLCL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.PLCL, 0);
  }

  public width_constant_expression(): Width_constant_expressionContext | undefined {
    return this.tryGetRuleContext(0, Width_constant_expressionContext);
  }

  public MICL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.MICL, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_range_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterRange_expression) {
      listener.enterRange_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitRange_expression) {
      listener.exitRange_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitRange_expression) {
      return visitor.visitRange_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Width_constant_expressionContext extends ParserRuleContext {
  public constant_expression(): Constant_expressionContext {
    return this.getRuleContext(0, Constant_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_width_constant_expression;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterWidth_constant_expression) {
      listener.enterWidth_constant_expression(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitWidth_constant_expression) {
      listener.exitWidth_constant_expression(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitWidth_constant_expression) {
      return visitor.visitWidth_constant_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Constant_primaryContext extends ParserRuleContext {
  public number(): NumberContext | undefined {
    return this.tryGetRuleContext(0, NumberContext);
  }

  public identifier(): IdentifierContext | undefined {
    return this.tryGetRuleContext(0, IdentifierContext);
  }

  public LB(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LB, 0);
  }

  public constant_range_expression(): Constant_range_expressionContext | undefined {
    return this.tryGetRuleContext(0, Constant_range_expressionContext);
  }

  public RB(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RB, 0);
  }

  public constant_concatenation(): Constant_concatenationContext | undefined {
    return this.tryGetRuleContext(0, Constant_concatenationContext);
  }

  public constant_multiple_concatenation(): Constant_multiple_concatenationContext | undefined {
    return this.tryGetRuleContext(0, Constant_multiple_concatenationContext);
  }

  public constant_function_call(): Constant_function_callContext | undefined {
    return this.tryGetRuleContext(0, Constant_function_callContext);
  }

  public constant_system_function_call(): Constant_system_function_callContext | undefined {
    return this.tryGetRuleContext(0, Constant_system_function_callContext);
  }

  public LP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LP, 0);
  }

  public constant_mintypmax_expression(): Constant_mintypmax_expressionContext | undefined {
    return this.tryGetRuleContext(0, Constant_mintypmax_expressionContext);
  }

  public RP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RP, 0);
  }

  public string_(): String_Context | undefined {
    return this.tryGetRuleContext(0, String_Context);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_constant_primary;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterConstant_primary) {
      listener.enterConstant_primary(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitConstant_primary) {
      listener.exitConstant_primary(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitConstant_primary) {
      return visitor.visitConstant_primary(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Module_path_primaryContext extends ParserRuleContext {
  public number(): NumberContext | undefined {
    return this.tryGetRuleContext(0, NumberContext);
  }

  public identifier(): IdentifierContext | undefined {
    return this.tryGetRuleContext(0, IdentifierContext);
  }

  public module_path_concatenation(): Module_path_concatenationContext | undefined {
    return this.tryGetRuleContext(0, Module_path_concatenationContext);
  }

  public module_path_multiple_concatenation(): Module_path_multiple_concatenationContext | undefined {
    return this.tryGetRuleContext(0, Module_path_multiple_concatenationContext);
  }

  public function_call(): Function_callContext | undefined {
    return this.tryGetRuleContext(0, Function_callContext);
  }

  public system_function_call(): System_function_callContext | undefined {
    return this.tryGetRuleContext(0, System_function_callContext);
  }

  public LP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LP, 0);
  }

  public module_path_mintypmax_expression(): Module_path_mintypmax_expressionContext | undefined {
    return this.tryGetRuleContext(0, Module_path_mintypmax_expressionContext);
  }

  public RP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RP, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_module_path_primary;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterModule_path_primary) {
      listener.enterModule_path_primary(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitModule_path_primary) {
      listener.exitModule_path_primary(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitModule_path_primary) {
      return visitor.visitModule_path_primary(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class PrimaryContext extends ParserRuleContext {
  public number(): NumberContext | undefined {
    return this.tryGetRuleContext(0, NumberContext);
  }

  public hierarchical_identifier(): Hierarchical_identifierContext | undefined {
    return this.tryGetRuleContext(0, Hierarchical_identifierContext);
  }

  public select_(): Select_Context | undefined {
    return this.tryGetRuleContext(0, Select_Context);
  }

  public concatenation(): ConcatenationContext | undefined {
    return this.tryGetRuleContext(0, ConcatenationContext);
  }

  public multiple_concatenation(): Multiple_concatenationContext | undefined {
    return this.tryGetRuleContext(0, Multiple_concatenationContext);
  }

  public function_call(): Function_callContext | undefined {
    return this.tryGetRuleContext(0, Function_callContext);
  }

  public system_function_call(): System_function_callContext | undefined {
    return this.tryGetRuleContext(0, System_function_callContext);
  }

  public LP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LP, 0);
  }

  public mintypmax_expression(): Mintypmax_expressionContext | undefined {
    return this.tryGetRuleContext(0, Mintypmax_expressionContext);
  }

  public RP(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RP, 0);
  }

  public string_(): String_Context | undefined {
    return this.tryGetRuleContext(0, String_Context);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_primary;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterPrimary) {
      listener.enterPrimary(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitPrimary) {
      listener.exitPrimary(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitPrimary) {
      return visitor.visitPrimary(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Select_Context extends ParserRuleContext {
  public LB(): TerminalNode {
    return this.getToken(VerilogParser.LB, 0);
  }

  public range_expression(): Range_expressionContext {
    return this.getRuleContext(0, Range_expressionContext);
  }

  public RB(): TerminalNode {
    return this.getToken(VerilogParser.RB, 0);
  }

  public bit_select(): Bit_selectContext | undefined {
    return this.tryGetRuleContext(0, Bit_selectContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_select_;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterSelect_) {
      listener.enterSelect_(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitSelect_) {
      listener.exitSelect_(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitSelect_) {
      return visitor.visitSelect_(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Bit_selectContext extends ParserRuleContext {
  public LB(): TerminalNode[];
  public LB(i: number): TerminalNode;
  public LB(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.LB);
    } else {
      return this.getToken(VerilogParser.LB, i);
    }
  }

  public expression(): ExpressionContext[];
  public expression(i: number): ExpressionContext;
  public expression(i?: number): ExpressionContext | ExpressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(ExpressionContext);
    } else {
      return this.getRuleContext(i, ExpressionContext);
    }
  }

  public RB(): TerminalNode[];
  public RB(i: number): TerminalNode;
  public RB(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.RB);
    } else {
      return this.getToken(VerilogParser.RB, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_bit_select;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterBit_select) {
      listener.enterBit_select(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitBit_select) {
      listener.exitBit_select(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitBit_select) {
      return visitor.visitBit_select(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Net_lvalueContext extends ParserRuleContext {
  public hierarchical_identifier(): Hierarchical_identifierContext | undefined {
    return this.tryGetRuleContext(0, Hierarchical_identifierContext);
  }

  public const_select(): Const_selectContext | undefined {
    return this.tryGetRuleContext(0, Const_selectContext);
  }

  public LC(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LC, 0);
  }

  public net_lvalue(): Net_lvalueContext[];
  public net_lvalue(i: number): Net_lvalueContext;
  public net_lvalue(i?: number): Net_lvalueContext | Net_lvalueContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Net_lvalueContext);
    } else {
      return this.getRuleContext(i, Net_lvalueContext);
    }
  }

  public RC(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RC, 0);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_net_lvalue;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterNet_lvalue) {
      listener.enterNet_lvalue(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitNet_lvalue) {
      listener.exitNet_lvalue(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitNet_lvalue) {
      return visitor.visitNet_lvalue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Const_selectContext extends ParserRuleContext {
  public LB(): TerminalNode {
    return this.getToken(VerilogParser.LB, 0);
  }

  public constant_range_expression(): Constant_range_expressionContext {
    return this.getRuleContext(0, Constant_range_expressionContext);
  }

  public RB(): TerminalNode {
    return this.getToken(VerilogParser.RB, 0);
  }

  public const_bit_select(): Const_bit_selectContext | undefined {
    return this.tryGetRuleContext(0, Const_bit_selectContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_const_select;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterConst_select) {
      listener.enterConst_select(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitConst_select) {
      listener.exitConst_select(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitConst_select) {
      return visitor.visitConst_select(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Const_bit_selectContext extends ParserRuleContext {
  public LB(): TerminalNode[];
  public LB(i: number): TerminalNode;
  public LB(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.LB);
    } else {
      return this.getToken(VerilogParser.LB, i);
    }
  }

  public constant_expression(): Constant_expressionContext[];
  public constant_expression(i: number): Constant_expressionContext;
  public constant_expression(i?: number): Constant_expressionContext | Constant_expressionContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Constant_expressionContext);
    } else {
      return this.getRuleContext(i, Constant_expressionContext);
    }
  }

  public RB(): TerminalNode[];
  public RB(i: number): TerminalNode;
  public RB(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.RB);
    } else {
      return this.getToken(VerilogParser.RB, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_const_bit_select;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterConst_bit_select) {
      listener.enterConst_bit_select(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitConst_bit_select) {
      listener.exitConst_bit_select(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitConst_bit_select) {
      return visitor.visitConst_bit_select(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Variable_lvalueContext extends ParserRuleContext {
  public hierarchical_identifier(): Hierarchical_identifierContext | undefined {
    return this.tryGetRuleContext(0, Hierarchical_identifierContext);
  }

  public select_(): Select_Context | undefined {
    return this.tryGetRuleContext(0, Select_Context);
  }

  public LC(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.LC, 0);
  }

  public variable_lvalue(): Variable_lvalueContext[];
  public variable_lvalue(i: number): Variable_lvalueContext;
  public variable_lvalue(i?: number): Variable_lvalueContext | Variable_lvalueContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Variable_lvalueContext);
    } else {
      return this.getRuleContext(i, Variable_lvalueContext);
    }
  }

  public RC(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.RC, 0);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_variable_lvalue;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterVariable_lvalue) {
      listener.enterVariable_lvalue(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitVariable_lvalue) {
      listener.exitVariable_lvalue(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitVariable_lvalue) {
      return visitor.visitVariable_lvalue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Unary_operatorContext extends ParserRuleContext {
  public PL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.PL, 0);
  }

  public MI(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.MI, 0);
  }

  public EM(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.EM, 0);
  }

  public TI(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.TI, 0);
  }

  public AM(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.AM, 0);
  }

  public TIAM(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.TIAM, 0);
  }

  public VL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.VL, 0);
  }

  public TIVL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.TIVL, 0);
  }

  public CA(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.CA, 0);
  }

  public TICA(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.TICA, 0);
  }

  public CATI(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.CATI, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_unary_operator;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterUnary_operator) {
      listener.enterUnary_operator(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitUnary_operator) {
      listener.exitUnary_operator(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitUnary_operator) {
      return visitor.visitUnary_operator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Unary_module_path_operatorContext extends ParserRuleContext {
  public EM(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.EM, 0);
  }

  public TI(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.TI, 0);
  }

  public AM(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.AM, 0);
  }

  public TIAM(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.TIAM, 0);
  }

  public VL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.VL, 0);
  }

  public TIVL(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.TIVL, 0);
  }

  public CA(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.CA, 0);
  }

  public TICA(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.TICA, 0);
  }

  public CATI(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.CATI, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_unary_module_path_operator;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterUnary_module_path_operator) {
      listener.enterUnary_module_path_operator(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitUnary_module_path_operator) {
      listener.exitUnary_module_path_operator(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitUnary_module_path_operator) {
      return visitor.visitUnary_module_path_operator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class NumberContext extends ParserRuleContext {
  public decimal_number(): Decimal_numberContext | undefined {
    return this.tryGetRuleContext(0, Decimal_numberContext);
  }

  public octal_number(): Octal_numberContext | undefined {
    return this.tryGetRuleContext(0, Octal_numberContext);
  }

  public binary_number(): Binary_numberContext | undefined {
    return this.tryGetRuleContext(0, Binary_numberContext);
  }

  public hex_number(): Hex_numberContext | undefined {
    return this.tryGetRuleContext(0, Hex_numberContext);
  }

  public real_number(): Real_numberContext | undefined {
    return this.tryGetRuleContext(0, Real_numberContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_number;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterNumber) {
      listener.enterNumber(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitNumber) {
      listener.exitNumber(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitNumber) {
      return visitor.visitNumber(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Real_numberContext extends ParserRuleContext {
  public fixed_point_number(): Fixed_point_numberContext | undefined {
    return this.tryGetRuleContext(0, Fixed_point_numberContext);
  }

  public exponential_number(): Exponential_numberContext | undefined {
    return this.tryGetRuleContext(0, Exponential_numberContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_real_number;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterReal_number) {
      listener.enterReal_number(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitReal_number) {
      listener.exitReal_number(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitReal_number) {
      return visitor.visitReal_number(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Decimal_numberContext extends ParserRuleContext {
  public unsigned_number(): Unsigned_numberContext | undefined {
    return this.tryGetRuleContext(0, Unsigned_numberContext);
  }

  public decimal_base(): Decimal_baseContext | undefined {
    return this.tryGetRuleContext(0, Decimal_baseContext);
  }

  public decimal_value(): Decimal_valueContext | undefined {
    return this.tryGetRuleContext(0, Decimal_valueContext);
  }

  public size(): SizeContext | undefined {
    return this.tryGetRuleContext(0, SizeContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_decimal_number;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterDecimal_number) {
      listener.enterDecimal_number(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitDecimal_number) {
      listener.exitDecimal_number(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitDecimal_number) {
      return visitor.visitDecimal_number(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Binary_numberContext extends ParserRuleContext {
  public binary_base(): Binary_baseContext {
    return this.getRuleContext(0, Binary_baseContext);
  }

  public binary_value(): Binary_valueContext {
    return this.getRuleContext(0, Binary_valueContext);
  }

  public size(): SizeContext | undefined {
    return this.tryGetRuleContext(0, SizeContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_binary_number;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterBinary_number) {
      listener.enterBinary_number(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitBinary_number) {
      listener.exitBinary_number(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitBinary_number) {
      return visitor.visitBinary_number(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Octal_numberContext extends ParserRuleContext {
  public octal_base(): Octal_baseContext {
    return this.getRuleContext(0, Octal_baseContext);
  }

  public octal_value(): Octal_valueContext {
    return this.getRuleContext(0, Octal_valueContext);
  }

  public size(): SizeContext | undefined {
    return this.tryGetRuleContext(0, SizeContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_octal_number;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterOctal_number) {
      listener.enterOctal_number(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitOctal_number) {
      listener.exitOctal_number(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitOctal_number) {
      return visitor.visitOctal_number(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Hex_numberContext extends ParserRuleContext {
  public hex_base(): Hex_baseContext {
    return this.getRuleContext(0, Hex_baseContext);
  }

  public hex_value(): Hex_valueContext {
    return this.getRuleContext(0, Hex_valueContext);
  }

  public size(): SizeContext | undefined {
    return this.tryGetRuleContext(0, SizeContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_hex_number;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterHex_number) {
      listener.enterHex_number(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitHex_number) {
      listener.exitHex_number(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitHex_number) {
      return visitor.visitHex_number(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class SizeContext extends ParserRuleContext {
  public UNSIGNED_NUMBER(): TerminalNode {
    return this.getToken(VerilogParser.UNSIGNED_NUMBER, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_size;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterSize) {
      listener.enterSize(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitSize) {
      listener.exitSize(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitSize) {
      return visitor.visitSize(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Fixed_point_numberContext extends ParserRuleContext {
  public FIXED_POINT_NUMBER(): TerminalNode {
    return this.getToken(VerilogParser.FIXED_POINT_NUMBER, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_fixed_point_number;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterFixed_point_number) {
      listener.enterFixed_point_number(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitFixed_point_number) {
      listener.exitFixed_point_number(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitFixed_point_number) {
      return visitor.visitFixed_point_number(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Exponential_numberContext extends ParserRuleContext {
  public EXPONENTIAL_NUMBER(): TerminalNode {
    return this.getToken(VerilogParser.EXPONENTIAL_NUMBER, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_exponential_number;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterExponential_number) {
      listener.enterExponential_number(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitExponential_number) {
      listener.exitExponential_number(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitExponential_number) {
      return visitor.visitExponential_number(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Unsigned_numberContext extends ParserRuleContext {
  public UNSIGNED_NUMBER(): TerminalNode {
    return this.getToken(VerilogParser.UNSIGNED_NUMBER, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_unsigned_number;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterUnsigned_number) {
      listener.enterUnsigned_number(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitUnsigned_number) {
      listener.exitUnsigned_number(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitUnsigned_number) {
      return visitor.visitUnsigned_number(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Decimal_valueContext extends ParserRuleContext {
  public UNSIGNED_NUMBER(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.UNSIGNED_NUMBER, 0);
  }

  public X_OR_Z_UNDERSCORE(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.X_OR_Z_UNDERSCORE, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_decimal_value;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterDecimal_value) {
      listener.enterDecimal_value(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitDecimal_value) {
      listener.exitDecimal_value(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitDecimal_value) {
      return visitor.visitDecimal_value(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Binary_valueContext extends ParserRuleContext {
  public BINARY_VALUE(): TerminalNode {
    return this.getToken(VerilogParser.BINARY_VALUE, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_binary_value;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterBinary_value) {
      listener.enterBinary_value(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitBinary_value) {
      listener.exitBinary_value(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitBinary_value) {
      return visitor.visitBinary_value(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Octal_valueContext extends ParserRuleContext {
  public OCTAL_VALUE(): TerminalNode {
    return this.getToken(VerilogParser.OCTAL_VALUE, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_octal_value;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterOctal_value) {
      listener.enterOctal_value(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitOctal_value) {
      listener.exitOctal_value(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitOctal_value) {
      return visitor.visitOctal_value(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Hex_valueContext extends ParserRuleContext {
  public HEX_VALUE(): TerminalNode {
    return this.getToken(VerilogParser.HEX_VALUE, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_hex_value;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterHex_value) {
      listener.enterHex_value(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitHex_value) {
      listener.exitHex_value(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitHex_value) {
      return visitor.visitHex_value(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Decimal_baseContext extends ParserRuleContext {
  public DECIMAL_BASE(): TerminalNode {
    return this.getToken(VerilogParser.DECIMAL_BASE, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_decimal_base;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterDecimal_base) {
      listener.enterDecimal_base(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitDecimal_base) {
      listener.exitDecimal_base(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitDecimal_base) {
      return visitor.visitDecimal_base(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Binary_baseContext extends ParserRuleContext {
  public BINARY_BASE(): TerminalNode {
    return this.getToken(VerilogParser.BINARY_BASE, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_binary_base;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterBinary_base) {
      listener.enterBinary_base(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitBinary_base) {
      listener.exitBinary_base(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitBinary_base) {
      return visitor.visitBinary_base(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Octal_baseContext extends ParserRuleContext {
  public OCTAL_BASE(): TerminalNode {
    return this.getToken(VerilogParser.OCTAL_BASE, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_octal_base;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterOctal_base) {
      listener.enterOctal_base(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitOctal_base) {
      listener.exitOctal_base(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitOctal_base) {
      return visitor.visitOctal_base(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Hex_baseContext extends ParserRuleContext {
  public HEX_BASE(): TerminalNode {
    return this.getToken(VerilogParser.HEX_BASE, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_hex_base;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterHex_base) {
      listener.enterHex_base(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitHex_base) {
      listener.exitHex_base(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitHex_base) {
      return visitor.visitHex_base(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class String_Context extends ParserRuleContext {
  public STRING(): TerminalNode {
    return this.getToken(VerilogParser.STRING, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_string_;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterString_) {
      listener.enterString_(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitString_) {
      listener.exitString_(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitString_) {
      return visitor.visitString_(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Attribute_instanceContext extends ParserRuleContext {
  public LP(): TerminalNode {
    return this.getToken(VerilogParser.LP, 0);
  }

  public AS(): TerminalNode[];
  public AS(i: number): TerminalNode;
  public AS(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.AS);
    } else {
      return this.getToken(VerilogParser.AS, i);
    }
  }

  public attr_spec(): Attr_specContext[];
  public attr_spec(i: number): Attr_specContext;
  public attr_spec(i?: number): Attr_specContext | Attr_specContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Attr_specContext);
    } else {
      return this.getRuleContext(i, Attr_specContext);
    }
  }

  public RP(): TerminalNode {
    return this.getToken(VerilogParser.RP, 0);
  }

  public CO(): TerminalNode[];
  public CO(i: number): TerminalNode;
  public CO(i?: number): TerminalNode | TerminalNode[] {
    if (i === undefined) {
      return this.getTokens(VerilogParser.CO);
    } else {
      return this.getToken(VerilogParser.CO, i);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_attribute_instance;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterAttribute_instance) {
      listener.enterAttribute_instance(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitAttribute_instance) {
      listener.exitAttribute_instance(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitAttribute_instance) {
      return visitor.visitAttribute_instance(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Attr_specContext extends ParserRuleContext {
  public attr_name(): Attr_nameContext {
    return this.getRuleContext(0, Attr_nameContext);
  }

  public EQ(): TerminalNode | undefined {
    return this.tryGetToken(VerilogParser.EQ, 0);
  }

  public constant_expression(): Constant_expressionContext | undefined {
    return this.tryGetRuleContext(0, Constant_expressionContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_attr_spec;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterAttr_spec) {
      listener.enterAttr_spec(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitAttr_spec) {
      listener.exitAttr_spec(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitAttr_spec) {
      return visitor.visitAttr_spec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Attr_nameContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_attr_name;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterAttr_name) {
      listener.enterAttr_name(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitAttr_name) {
      listener.exitAttr_name(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitAttr_name) {
      return visitor.visitAttr_name(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Block_identifierContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_block_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterBlock_identifier) {
      listener.enterBlock_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitBlock_identifier) {
      listener.exitBlock_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitBlock_identifier) {
      return visitor.visitBlock_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Cell_identifierContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_cell_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterCell_identifier) {
      listener.enterCell_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitCell_identifier) {
      listener.exitCell_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitCell_identifier) {
      return visitor.visitCell_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Config_identifierContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_config_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterConfig_identifier) {
      listener.enterConfig_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitConfig_identifier) {
      listener.exitConfig_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitConfig_identifier) {
      return visitor.visitConfig_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Escaped_identifierContext extends ParserRuleContext {
  public ESCAPED_IDENTIFIER(): TerminalNode {
    return this.getToken(VerilogParser.ESCAPED_IDENTIFIER, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_escaped_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterEscaped_identifier) {
      listener.enterEscaped_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitEscaped_identifier) {
      listener.exitEscaped_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitEscaped_identifier) {
      return visitor.visitEscaped_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Event_identifierContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_event_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterEvent_identifier) {
      listener.enterEvent_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitEvent_identifier) {
      listener.exitEvent_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitEvent_identifier) {
      return visitor.visitEvent_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Function_identifierContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_function_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterFunction_identifier) {
      listener.enterFunction_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitFunction_identifier) {
      listener.exitFunction_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitFunction_identifier) {
      return visitor.visitFunction_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Gate_instance_identifierContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_gate_instance_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterGate_instance_identifier) {
      listener.enterGate_instance_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitGate_instance_identifier) {
      listener.exitGate_instance_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitGate_instance_identifier) {
      return visitor.visitGate_instance_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Generate_block_identifierContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_generate_block_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterGenerate_block_identifier) {
      listener.enterGenerate_block_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitGenerate_block_identifier) {
      listener.exitGenerate_block_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitGenerate_block_identifier) {
      return visitor.visitGenerate_block_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Genvar_identifierContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_genvar_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterGenvar_identifier) {
      listener.enterGenvar_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitGenvar_identifier) {
      listener.exitGenvar_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitGenvar_identifier) {
      return visitor.visitGenvar_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Hierarchical_identifierContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }

  public hier_ref(): Hier_refContext[];
  public hier_ref(i: number): Hier_refContext;
  public hier_ref(i?: number): Hier_refContext | Hier_refContext[] {
    if (i === undefined) {
      return this.getRuleContexts(Hier_refContext);
    } else {
      return this.getRuleContext(i, Hier_refContext);
    }
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_hierarchical_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterHierarchical_identifier) {
      listener.enterHierarchical_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitHierarchical_identifier) {
      listener.exitHierarchical_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitHierarchical_identifier) {
      return visitor.visitHierarchical_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Hier_refContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }

  public DT(): TerminalNode {
    return this.getToken(VerilogParser.DT, 0);
  }

  public const_bit_select(): Const_bit_selectContext | undefined {
    return this.tryGetRuleContext(0, Const_bit_selectContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_hier_ref;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterHier_ref) {
      listener.enterHier_ref(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitHier_ref) {
      listener.exitHier_ref(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitHier_ref) {
      return visitor.visitHier_ref(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class IdentifierContext extends ParserRuleContext {
  public escaped_identifier(): Escaped_identifierContext | undefined {
    return this.tryGetRuleContext(0, Escaped_identifierContext);
  }

  public simple_identifier(): Simple_identifierContext | undefined {
    return this.tryGetRuleContext(0, Simple_identifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterIdentifier) {
      listener.enterIdentifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitIdentifier) {
      listener.exitIdentifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitIdentifier) {
      return visitor.visitIdentifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Input_port_identifierContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_input_port_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterInput_port_identifier) {
      listener.enterInput_port_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitInput_port_identifier) {
      listener.exitInput_port_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitInput_port_identifier) {
      return visitor.visitInput_port_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Instance_identifierContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_instance_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterInstance_identifier) {
      listener.enterInstance_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitInstance_identifier) {
      listener.exitInstance_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitInstance_identifier) {
      return visitor.visitInstance_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Library_identifierContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_library_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterLibrary_identifier) {
      listener.enterLibrary_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitLibrary_identifier) {
      listener.exitLibrary_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitLibrary_identifier) {
      return visitor.visitLibrary_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Module_identifierContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_module_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterModule_identifier) {
      listener.enterModule_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitModule_identifier) {
      listener.exitModule_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitModule_identifier) {
      return visitor.visitModule_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Module_instance_identifierContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_module_instance_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterModule_instance_identifier) {
      listener.enterModule_instance_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitModule_instance_identifier) {
      listener.exitModule_instance_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitModule_instance_identifier) {
      return visitor.visitModule_instance_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Net_identifierContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_net_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterNet_identifier) {
      listener.enterNet_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitNet_identifier) {
      listener.exitNet_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitNet_identifier) {
      return visitor.visitNet_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Output_port_identifierContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_output_port_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterOutput_port_identifier) {
      listener.enterOutput_port_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitOutput_port_identifier) {
      listener.exitOutput_port_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitOutput_port_identifier) {
      return visitor.visitOutput_port_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Parameter_identifierContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_parameter_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterParameter_identifier) {
      listener.enterParameter_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitParameter_identifier) {
      listener.exitParameter_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitParameter_identifier) {
      return visitor.visitParameter_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Port_identifierContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_port_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterPort_identifier) {
      listener.enterPort_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitPort_identifier) {
      listener.exitPort_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitPort_identifier) {
      return visitor.visitPort_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Real_identifierContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_real_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterReal_identifier) {
      listener.enterReal_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitReal_identifier) {
      listener.exitReal_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitReal_identifier) {
      return visitor.visitReal_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Simple_identifierContext extends ParserRuleContext {
  public SIMPLE_IDENTIFIER(): TerminalNode {
    return this.getToken(VerilogParser.SIMPLE_IDENTIFIER, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_simple_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterSimple_identifier) {
      listener.enterSimple_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitSimple_identifier) {
      listener.exitSimple_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitSimple_identifier) {
      return visitor.visitSimple_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Specparam_identifierContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_specparam_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterSpecparam_identifier) {
      listener.enterSpecparam_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitSpecparam_identifier) {
      listener.exitSpecparam_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitSpecparam_identifier) {
      return visitor.visitSpecparam_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class System_function_identifierContext extends ParserRuleContext {
  public SYSTEM_TF_IDENTIFIER(): TerminalNode {
    return this.getToken(VerilogParser.SYSTEM_TF_IDENTIFIER, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_system_function_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterSystem_function_identifier) {
      listener.enterSystem_function_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitSystem_function_identifier) {
      listener.exitSystem_function_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitSystem_function_identifier) {
      return visitor.visitSystem_function_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class System_task_identifierContext extends ParserRuleContext {
  public SYSTEM_TF_IDENTIFIER(): TerminalNode {
    return this.getToken(VerilogParser.SYSTEM_TF_IDENTIFIER, 0);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_system_task_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterSystem_task_identifier) {
      listener.enterSystem_task_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitSystem_task_identifier) {
      listener.exitSystem_task_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitSystem_task_identifier) {
      return visitor.visitSystem_task_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Task_identifierContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_task_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterTask_identifier) {
      listener.enterTask_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitTask_identifier) {
      listener.exitTask_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitTask_identifier) {
      return visitor.visitTask_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Terminal_identifierContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_terminal_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterTerminal_identifier) {
      listener.enterTerminal_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitTerminal_identifier) {
      listener.exitTerminal_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitTerminal_identifier) {
      return visitor.visitTerminal_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Topmodule_identifierContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_topmodule_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterTopmodule_identifier) {
      listener.enterTopmodule_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitTopmodule_identifier) {
      listener.exitTopmodule_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitTopmodule_identifier) {
      return visitor.visitTopmodule_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Udp_identifierContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_udp_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterUdp_identifier) {
      listener.enterUdp_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitUdp_identifier) {
      listener.exitUdp_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitUdp_identifier) {
      return visitor.visitUdp_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Udp_instance_identifierContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_udp_instance_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterUdp_instance_identifier) {
      listener.enterUdp_instance_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitUdp_instance_identifier) {
      listener.exitUdp_instance_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitUdp_instance_identifier) {
      return visitor.visitUdp_instance_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


export class Variable_identifierContext extends ParserRuleContext {
  public identifier(): IdentifierContext {
    return this.getRuleContext(0, IdentifierContext);
  }

  constructor(parent: ParserRuleContext | undefined, invokingState: number) {
    super(parent, invokingState);
  }

  // @Override
  public get ruleIndex(): number {
    return VerilogParser.RULE_variable_identifier;
  }

  // @Override
  public enterRule(listener: VerilogParserListener): void {
    if (listener.enterVariable_identifier) {
      listener.enterVariable_identifier(this);
    }
  }

  // @Override
  public exitRule(listener: VerilogParserListener): void {
    if (listener.exitVariable_identifier) {
      listener.exitVariable_identifier(this);
    }
  }

  // @Override
  public accept<Result>(visitor: VerilogParserVisitor<Result>): Result {
    if (visitor.visitVariable_identifier) {
      return visitor.visitVariable_identifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}


